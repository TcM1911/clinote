// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package notestore

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/TcM1911/evernote-sdk-golang/errors"
	"github.com/TcM1911/evernote-sdk-golang/limits"
	"github.com/TcM1911/evernote-sdk-golang/types"
	"github.com/TcM1911/evernote-sdk-golang/userstore"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = userstore.GoUnusedProtection__
var _ = types.GoUnusedProtection__
var _ = errors.GoUnusedProtection__
var _ = limits.GoUnusedProtection__

type NoteStore interface {
	// Asks the NoteStore to provide information about the status of the user
	// account corresponding to the provided authentication token.
	//
	// Parameters:
	//  - AuthenticationToken
	GetSyncState(authenticationToken string) (r *SyncState, err error)
	// Asks the NoteStore to provide information about the status of the user
	// account corresponding to the provided authentication token.
	// This version of 'getSyncState' allows the client to upload coarse-
	// grained usage metrics to the service.
	//
	// @param clientMetrics  see the documentation of the ClientUsageMetrics
	//   structure for an explanation of the fields that clients can pass to
	//   the service.
	//
	// Parameters:
	//  - AuthenticationToken
	//  - ClientMetrics
	GetSyncStateWithMetrics(authenticationToken string, clientMetrics *ClientUsageMetrics) (r *SyncState, err error)
	// DEPRECATED - use getFilteredSyncChunk.
	//
	// Parameters:
	//  - AuthenticationToken
	//  - AfterUSN
	//  - MaxEntries
	//  - FullSyncOnly
	GetSyncChunk(authenticationToken string, afterUSN int32, maxEntries int32, fullSyncOnly bool) (r *SyncChunk, err error)
	// Asks the NoteStore to provide the state of the account in order of
	// last modification.  This request retrieves one block of the server's
	// state so that a client can make several small requests against a large
	// account rather than getting the entire state in one big message.
	// This call gives fine-grained control of the data that will
	// be received by a client by omitting data elements that a client doesn't
	// need. This may reduce network traffic and sync times.
	//
	// @param afterUSN
	//   The client can pass this value to ask only for objects that
	//   have been updated after a certain point.  This allows the client to
	//   receive updates after its last checkpoint rather than doing a full
	//   synchronization on every pass.  The default value of "0" indicates
	//   that the client wants to get objects from the start of the account.
	//
	// @param maxEntries
	//   The maximum number of modified objects that should be
	//   returned in the result SyncChunk.  This can be used to limit the size
	//   of each individual message to be friendly for network transfer.
	//
	// @param filter
	//   The caller must set some of the flags in this structure to specify which
	//   data types should be returned during the synchronization.  See
	//   the SyncChunkFilter structure for information on each flag.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "afterUSN" - if negative
	//   </li>
	//   <li> BAD_DATA_FORMAT "maxEntries" - if less than 1
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - AfterUSN
	//  - MaxEntries
	//  - Filter
	GetFilteredSyncChunk(authenticationToken string, afterUSN int32, maxEntries int32, filter *SyncChunkFilter) (r *SyncChunk, err error)
	// Asks the NoteStore to provide information about the status of a linked
	// notebook that has been shared with the caller, or that is public to the
	// world.
	// This will return a result that is similar to getSyncState, but may omit
	// SyncState.uploaded if the caller doesn't have permission to write to
	// the linked notebook.
	//
	// This function must be called on the shard that owns the referenced
	// notebook.  (I.e. the shardId in /shard/shardId/edam/note must be the
	// same as LinkedNotebook.shardId.)
	//
	// @param authenticationToken
	//   This should be an authenticationToken for the guest who has received
	//   the invitation to the share.  (I.e. this should not be the result of
	//   NoteStore.authenticateToSharedNotebook)
	//
	// @param linkedNotebook
	//   This structure should contain identifying information and permissions
	//   to access the notebook in question.
	//
	// Parameters:
	//  - AuthenticationToken
	//  - LinkedNotebook
	GetLinkedNotebookSyncState(authenticationToken string, linkedNotebook *types.LinkedNotebook) (r *SyncState, err error)
	// Asks the NoteStore to provide information about the contents of a linked
	// notebook that has been shared with the caller, or that is public to the
	// world.
	// This will return a result that is similar to getSyncChunk, but will only
	// contain entries that are visible to the caller.  I.e. only that particular
	// Notebook will be visible, along with its Notes, and Tags on those Notes.
	//
	// This function must be called on the shard that owns the referenced
	// notebook.  (I.e. the shardId in /shard/shardId/edam/note must be the
	// same as LinkedNotebook.shardId.)
	//
	// @param authenticationToken
	//   This should be an authenticationToken for the guest who has received
	//   the invitation to the share.  (I.e. this should not be the result of
	//   NoteStore.authenticateToSharedNotebook)
	//
	// @param linkedNotebook
	//   This structure should contain identifying information and permissions
	//   to access the notebook in question.  This must contain the valid fields
	//   for either a shared notebook (e.g. shareKey)
	//   or a public notebook (e.g. username, uri)
	//
	// @param afterUSN
	//   The client can pass this value to ask only for objects that
	//   have been updated after a certain point.  This allows the client to
	//   receive updates after its last checkpoint rather than doing a full
	//   synchronization on every pass.  The default value of "0" indicates
	//   that the client wants to get objects from the start of the account.
	//
	// @param maxEntries
	//   The maximum number of modified objects that should be
	//   returned in the result SyncChunk.  This can be used to limit the size
	//   of each individual message to be friendly for network transfer.
	//   Applications should not request more than 256 objects at a time,
	//   and must handle the case where the service returns less than the
	//   requested number of objects in a given request even though more
	//   objects are available on the service.
	//
	// @param fullSyncOnly
	//   If true, then the client only wants initial data for a full sync.
	//   In this case, the service will not return any expunged objects,
	//   and will not return any Resources, since these are also provided
	//   in their corresponding Notes.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "afterUSN" - if negative
	//   </li>
	//   <li> BAD_DATA_FORMAT "maxEntries" - if less than 1
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "LinkedNotebook" - if the provided information doesn't match any
	//     valid notebook
	//   </li>
	//   <li> "LinkedNotebook.uri" - if the provided public URI doesn't match any
	//     valid notebook
	//   </li>
	//   <li> "SharedNotebook.id" - if the provided information indicates a
	//      shared notebook that no longer exists
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - LinkedNotebook
	//  - AfterUSN
	//  - MaxEntries
	//  - FullSyncOnly
	GetLinkedNotebookSyncChunk(authenticationToken string, linkedNotebook *types.LinkedNotebook, afterUSN int32, maxEntries int32, fullSyncOnly bool) (r *SyncChunk, err error)
	// Returns a list of all of the notebooks in the account.
	//
	// Parameters:
	//  - AuthenticationToken
	ListNotebooks(authenticationToken string) (r []*types.Notebook, err error)
	// Returns the current state of the notebook with the provided GUID.
	// The notebook may be active or deleted (but not expunged).
	//
	// @param guid
	//   The GUID of the notebook to be retrieved.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Notebook.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Notebook" - private notebook, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Notebook.guid" - tag not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	GetNotebook(authenticationToken string, guid types.GUID) (r *types.Notebook, err error)
	// Returns the notebook that should be used to store new notes in the
	// user's account when no other notebooks are specified.
	//
	// Parameters:
	//  - AuthenticationToken
	GetDefaultNotebook(authenticationToken string) (r *types.Notebook, err error)
	// Asks the service to make a notebook with the provided name.
	//
	// @param notebook
	//   The desired fields for the notebook must be provided on this
	//   object.  The name of the notebook must be set, and either the 'active'
	//   or 'defaultNotebook' fields may be set by the client at creation.
	//   If a notebook exists in the account with the same name (via
	//   case-insensitive compare), this will throw an EDAMUserException.
	//
	// @return
	//   The newly created Notebook.  The server-side GUID will be
	//   saved in this object's 'guid' field.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Notebook.name" - invalid length or pattern
	//   </li>
	//   <li> BAD_DATA_FORMAT "Notebook.stack" - invalid length or pattern
	//   </li>
	//   <li> BAD_DATA_FORMAT "Publishing.uri" - if publishing set but bad uri
	//   </li>
	//   <li> BAD_DATA_FORMAT "Publishing.publicDescription" - if too long
	//   </li>
	//   <li> DATA_CONFLICT "Notebook.name" - name already in use
	//   </li>
	//   <li> DATA_CONFLICT "Publishing.uri" - if URI already in use
	//   </li>
	//   <li> DATA_REQUIRED "Publishing.uri" - if publishing set but uri missing
	//   </li>
	//   <li> LIMIT_REACHED "Notebook" - at max number of notebooks
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Notebook
	CreateNotebook(authenticationToken string, notebook *types.Notebook) (r *types.Notebook, err error)
	// Submits notebook changes to the service.  The provided data must include
	// the notebook's guid field for identification.
	//
	// @param notebook
	//   The notebook object containing the requested changes.
	//
	// @return
	//   The Update Sequence Number for this change within the account.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Notebook.name" - invalid length or pattern
	//   </li>
	//   <li> BAD_DATA_FORMAT "Notebook.stack" - invalid length or pattern
	//   </li>
	//   <li> BAD_DATA_FORMAT "Publishing.uri" - if publishing set but bad uri
	//   </li>
	//   <li> BAD_DATA_FORMAT "Publishing.publicDescription" - if too long
	//   </li>
	//   <li> DATA_CONFLICT "Notebook.name" - name already in use
	//   </li>
	//   <li> DATA_CONFLICT "Publishing.uri" - if URI already in use
	//   </li>
	//   <li> DATA_REQUIRED "Publishing.uri" - if publishing set but uri missing
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Notebook.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Notebook
	UpdateNotebook(authenticationToken string, notebook *types.Notebook) (r int32, err error)
	// Permanently removes the notebook from the user's account.
	// After this action, the notebook is no longer available for undeletion, etc.
	// If the notebook contains any Notes, they will be moved to the current
	// default notebook and moved into the trash (i.e. Note.active=false).
	// <p/>
	// NOTE: This function is generally not available to third party applications.
	// Calls will result in an EDAMUserException with the error code
	// PERMISSION_DENIED.
	//
	// @param guid
	//   The GUID of the notebook to delete.
	//
	// @return
	//   The Update Sequence Number for this change within the account.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Notebook.guid" - if the parameter is missing
	//   </li>
	//   <li> LIMIT_REACHED "Notebook" - trying to expunge the last Notebook
	//   </li>
	//   <li> PERMISSION_DENIED "Notebook" - private notebook, user doesn't own
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	ExpungeNotebook(authenticationToken string, guid types.GUID) (r int32, err error)
	// Returns a list of the tags in the account.  Evernote does not support
	// the undeletion of tags, so this will only include active tags.
	//
	// Parameters:
	//  - AuthenticationToken
	ListTags(authenticationToken string) (r []*types.Tag, err error)
	// Returns a list of the tags that are applied to at least one note within
	// the provided notebook.  If the notebook is public, the authenticationToken
	// may be ignored.
	//
	// @param notebookGuid
	//    the GUID of the notebook to use to find tags
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Notebook.guid" - notebook not found by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - NotebookGuid
	ListTagsByNotebook(authenticationToken string, notebookGuid types.GUID) (r []*types.Tag, err error)
	// Returns the current state of the Tag with the provided GUID.
	//
	// @param guid
	//   The GUID of the tag to be retrieved.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Tag.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Tag" - private Tag, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Tag.guid" - tag not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	GetTag(authenticationToken string, guid types.GUID) (r *types.Tag, err error)
	// Asks the service to make a tag with a set of information.
	//
	// @param tag
	//   The desired list of fields for the tag are specified in this
	//   object.  The caller must specify the tag name, and may provide
	//   the parentGUID.
	//
	// @return
	//   The newly created Tag.  The server-side GUID will be
	//   saved in this object.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Tag.name" - invalid length or pattern
	//   </li>
	//   <li> BAD_DATA_FORMAT "Tag.parentGuid" - malformed GUID
	//   </li>
	//   <li> DATA_CONFLICT "Tag.name" - name already in use
	//   </li>
	//   <li> LIMIT_REACHED "Tag" - at max number of tags
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Tag.parentGuid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Tag
	CreateTag(authenticationToken string, tag *types.Tag) (r *types.Tag, err error)
	// Submits tag changes to the service.  The provided data must include
	// the tag's guid field for identification.  The service will apply
	// updates to the following tag fields:  name, parentGuid
	//
	// @param tag
	//   The tag object containing the requested changes.
	//
	// @return
	//   The Update Sequence Number for this change within the account.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Tag.name" - invalid length or pattern
	//   </li>
	//   <li> BAD_DATA_FORMAT "Tag.parentGuid" - malformed GUID
	//   </li>
	//   <li> DATA_CONFLICT "Tag.name" - name already in use
	//   </li>
	//   <li> DATA_CONFLICT "Tag.parentGuid" - can't set parent: circular
	//   </li>
	//   <li> PERMISSION_DENIED "Tag" - user doesn't own tag
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Tag.guid" - tag not found, by GUID
	//   </li>
	//   <li> "Tag.parentGuid" - parent not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Tag
	UpdateTag(authenticationToken string, tag *types.Tag) (r int32, err error)
	// Removes the provided tag from every note that is currently tagged with
	// this tag.  If this operation is successful, the tag will still be in
	// the account, but it will not be tagged on any notes.
	//
	// This function is not indended for use by full synchronizing clients, since
	// it does not provide enough result information to the client to reconcile
	// the local state without performing a follow-up sync from the service.  This
	// is intended for "thin clients" that need to efficiently support this as
	// a UI operation.
	//
	// @param guid
	//   The GUID of the tag to remove from all notes.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Tag.guid" - if the guid parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Tag" - user doesn't own tag
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Tag.guid" - tag not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	UntagAll(authenticationToken string, guid types.GUID) (err error)
	// Permanently deletes the tag with the provided GUID, if present.
	// <p/>
	// NOTE: This function is generally not available to third party applications.
	// Calls will result in an EDAMUserException with the error code
	// PERMISSION_DENIED.
	//
	// @param guid
	//   The GUID of the tag to delete.
	//
	// @return
	//   The Update Sequence Number for this change within the account.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Tag.guid" - if the guid parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Tag" - user doesn't own tag
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Tag.guid" - tag not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	ExpungeTag(authenticationToken string, guid types.GUID) (r int32, err error)
	// Returns a list of the searches in the account.  Evernote does not support
	// the undeletion of searches, so this will only include active searches.
	//
	// Parameters:
	//  - AuthenticationToken
	ListSearches(authenticationToken string) (r []*types.SavedSearch, err error)
	// Returns the current state of the search with the provided GUID.
	//
	// @param guid
	//   The GUID of the search to be retrieved.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "SavedSearch.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "SavedSearch" - private Tag, user doesn't own
	//   </li>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "SavedSearch.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	GetSearch(authenticationToken string, guid types.GUID) (r *types.SavedSearch, err error)
	// Asks the service to make a saved search with a set of information.
	//
	// @param search
	//   The desired list of fields for the search are specified in this
	//   object. The caller must specify the name and query for the
	//   search, and may optionally specify a search scope.
	//   The SavedSearch.format field is ignored by the service.
	//
	// @return
	//   The newly created SavedSearch.  The server-side GUID will be
	//   saved in this object.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "SavedSearch.name" - invalid length or pattern
	//   </li>
	//   <li> BAD_DATA_FORMAT "SavedSearch.query" - invalid length
	//   </li>
	//   <li> DATA_CONFLICT "SavedSearch.name" - name already in use
	//   </li>
	//   <li> LIMIT_REACHED "SavedSearch" - at max number of searches
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Search
	CreateSearch(authenticationToken string, search *types.SavedSearch) (r *types.SavedSearch, err error)
	// Submits search changes to the service. The provided data must include
	// the search's guid field for identification. The service will apply
	// updates to the following search fields: name, query, and scope.
	//
	// @param search
	//   The search object containing the requested changes.
	//
	// @return
	//   The Update Sequence Number for this change within the account.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "SavedSearch.name" - invalid length or pattern
	//   </li>
	//   <li> BAD_DATA_FORMAT "SavedSearch.query" - invalid length
	//   </li>
	//   <li> DATA_CONFLICT "SavedSearch.name" - name already in use
	//   </li>
	//   <li> PERMISSION_DENIED "SavedSearch" - user doesn't own tag
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "SavedSearch.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Search
	UpdateSearch(authenticationToken string, search *types.SavedSearch) (r int32, err error)
	// Permanently deletes the saved search with the provided GUID, if present.
	// <p/>
	// NOTE: This function is generally not available to third party applications.
	// Calls will result in an EDAMUserException with the error code
	// PERMISSION_DENIED.
	//
	// @param guid
	//   The GUID of the search to delete.
	//
	// @return
	//   The Update Sequence Number for this change within the account.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "SavedSearch.guid" - if the guid parameter is empty
	//   </li>
	//   <li> PERMISSION_DENIED "SavedSearch" - user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "SavedSearch.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	ExpungeSearch(authenticationToken string, guid types.GUID) (r int32, err error)
	// DEPRECATED. Use findNotesMetadata.
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Filter
	//  - Offset
	//  - MaxNotes
	FindNotes(authenticationToken string, filter *NoteFilter, offset int32, maxNotes int32) (r *NoteList, err error)
	// Finds the position of a note within a sorted subset of all of the user's
	// notes. This may be useful for thin clients that are displaying a paginated
	// listing of a large account, which need to know where a particular note
	// sits in the list without retrieving all notes first.
	//
	// @param authenticationToken
	//   Must be a valid token for the user's account unless the NoteFilter
	//   'notebookGuid' is the GUID of a public notebook.
	//
	// @param filter
	//   The list of criteria that will constrain the notes to be returned.
	//
	// @param guid
	//   The GUID of the note to be retrieved.
	//
	// @return
	//   If the note with the provided GUID is found within the matching note
	//   list, this will return the offset of that note within that list (where
	//   the first offset is 0).  If the note is not found within the set of
	//   notes, this will return -1.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "offset" - not between 0 and EDAM_USER_NOTES_MAX
	//   </li>
	//   <li> BAD_DATA_FORMAT "maxNotes" - not between 0 and EDAM_USER_NOTES_MAX
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteFilter.tagGuids" - if any are malformed
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
	//   </li>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Notebook.guid" - not found, by GUID
	//   </li>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Filter
	//  - GUID
	FindNoteOffset(authenticationToken string, filter *NoteFilter, guid types.GUID) (r int32, err error)
	// Used to find the high-level information about a set of the notes from a
	// user's account based on various criteria specified via a NoteFilter object.
	// <p/>
	// Web applications that wish to periodically check for new content in a user's
	// Evernote account should consider using webhooks instead of polling this API.
	// See http://dev.evernote.com/documentation/cloud/chapters/polling_notification.php
	// for more information.
	//
	// @param authenticationToken
	//   Must be a valid token for the user's account unless the NoteFilter
	//   'notebookGuid' is the GUID of a public notebook.
	//
	// @param filter
	//   The list of criteria that will constrain the notes to be returned.
	//
	// @param offset
	//   The numeric index of the first note to show within the sorted
	//   results.  The numbering scheme starts with "0".  This can be used for
	//   pagination.
	//
	// @param maxNotes
	//   The mximum notes to return in this query.  The service will return a set
	//   of notes that is no larger than this number, but may return fewer notes
	//   if needed.  The NoteList.totalNotes field in the return value will
	//   indicate whether there are more values available after the returned set.
	//
	// @param resultSpec
	//   This specifies which information should be returned for each matching
	//   Note. The fields on this structure can be used to eliminate data that
	//   the client doesn't need, which will reduce the time and bandwidth
	//   to receive and process the reply.
	//
	// @return
	//   The list of notes that match the criteria.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "offset" - not between 0 and EDAM_USER_NOTES_MAX
	//   </li>
	//   <li> BAD_DATA_FORMAT "maxNotes" - not between 0 and EDAM_USER_NOTES_MAX
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteFilter.tagGuids" - if any are malformed
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Notebook.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Filter
	//  - Offset
	//  - MaxNotes
	//  - ResultSpec
	FindNotesMetadata(authenticationToken string, filter *NoteFilter, offset int32, maxNotes int32, resultSpec *NotesMetadataResultSpec) (r *NotesMetadataList, err error)
	// This function is used to determine how many notes are found for each
	// notebook and tag in the user's account, given a current set of filter
	// parameters that determine the current selection.  This function will
	// return a structure that gives the note count for each notebook and tag
	// that has at least one note under the requested filter.  Any notebook or
	// tag that has zero notes in the filtered set will not be listed in the
	// reply to this function (so they can be assumed to be 0).
	//
	// @param authenticationToken
	//   Must be a valid token for the user's account unless the NoteFilter
	//   'notebookGuid' is the GUID of a public notebook.
	//
	// @param filter
	//   The note selection filter that is currently being applied.  The note
	//   counts are to be calculated with this filter applied to the total set
	//   of notes in the user's account.
	//
	// @param withTrash
	//   If true, then the NoteCollectionCounts.trashCount will be calculated
	//   and supplied in the reply. Otherwise, the trash value will be omitted.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuids" - if any are malformed
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
	//   </li>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Notebook.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Filter
	//  - WithTrash
	FindNoteCounts(authenticationToken string, filter *NoteFilter, withTrash bool) (r *NoteCollectionCounts, err error)
	// Returns the current state of the note in the service with the provided
	// GUID.  The ENML contents of the note will only be provided if the
	// 'withContent' parameter is true.  The service will include the meta-data
	// for each resource in the note, but the binary contents of the resources
	// and their recognition data will be omitted.
	// If the Note is found in a public notebook, the authenticationToken
	// will be ignored (so it could be an empty string).  The applicationData
	// fields are returned as keysOnly.
	//
	// @param guid
	//   The GUID of the note to be retrieved.
	//
	// @param withContent
	//   If true, the note will include the ENML contents of its
	//   'content' field.
	//
	// @param withResourcesData
	//   If true, any Resource elements in this Note will include the binary
	//   contents of their 'data' field's body.
	//
	// @param withResourcesRecognition
	//   If true, any Resource elements will include the binary contents of the
	//   'recognition' field's body if recognition data is present.
	//
	// @param withResourcesAlternateData
	//   If true, any Resource elements in this Note will include the binary
	//   contents of their 'alternateData' fields' body, if an alternate form
	//   is present.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	//  - WithContent
	//  - WithResourcesData
	//  - WithResourcesRecognition
	//  - WithResourcesAlternateData
	GetNote(authenticationToken string, guid types.GUID, withContent bool, withResourcesData bool, withResourcesRecognition bool, withResourcesAlternateData bool) (r *types.Note, err error)
	// Get all of the application data for the note identified by GUID,
	// with values returned within the LazyMap fullMap field.
	// If there are no applicationData entries, then a LazyMap
	// with an empty fullMap will be returned. If your application
	// only needs to fetch its own applicationData entry, use
	// getNoteApplicationDataEntry instead.
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	GetNoteApplicationData(authenticationToken string, guid types.GUID) (r *types.LazyMap, err error)
	// Get the value of a single entry in the applicationData map
	// for the note identified by GUID.
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - note not found, by GUID</li>
	//   <li> "NoteAttributes.applicationData.key" - note not found, by key</li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	//  - Key
	GetNoteApplicationDataEntry(authenticationToken string, guid types.GUID, key string) (r string, err error)
	// Update, or create, an entry in the applicationData map for
	// the note identified by guid.
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	//  - Key
	//  - Value
	SetNoteApplicationDataEntry(authenticationToken string, guid types.GUID, key string, value string) (r int32, err error)
	// Remove an entry identified by 'key' from the applicationData map for
	// the note identified by 'guid'. Silently ignores an unset of a
	// non-existing key.
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	//  - Key
	UnsetNoteApplicationDataEntry(authenticationToken string, guid types.GUID, key string) (r int32, err error)
	// Returns XHTML contents of the note with the provided GUID.
	// If the Note is found in a public notebook, the authenticationToken
	// will be ignored (so it could be an empty string).
	//
	// @param guid
	//   The GUID of the note to be retrieved.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	GetNoteContent(authenticationToken string, guid types.GUID) (r string, err error)
	// Returns a block of the extracted plain text contents of the note with the
	// provided GUID.  This text can be indexed for search purposes by a light
	// client that doesn't have capabilities to extract all of the searchable
	// text content from the note and its resources.
	//
	// If the Note is found in a public notebook, the authenticationToken
	// will be ignored (so it could be an empty string).
	//
	// @param guid
	//   The GUID of the note to be retrieved.
	//
	// @param noteOnly
	//   If true, this will only return the text extracted from the ENML contents
	//   of the note itself.  If false, this will also include the extracted text
	//   from any text-bearing resources (PDF, recognized images)
	//
	// @param tokenizeForIndexing
	//   If true, this will break the text into cleanly separated and sanitized
	//   tokens.  If false, this will return the more raw text extraction, with
	//   its original punctuation, capitalization, spacing, etc.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	//  - NoteOnly
	//  - TokenizeForIndexing
	GetNoteSearchText(authenticationToken string, guid types.GUID, noteOnly bool, tokenizeForIndexing bool) (r string, err error)
	// Returns a block of the extracted plain text contents of the resource with
	// the provided GUID.  This text can be indexed for search purposes by a light
	// client that doesn't have capability to extract all of the searchable
	// text content from a resource.
	//
	// If the Resource is found in a public notebook, the authenticationToken
	// will be ignored (so it could be an empty string).
	//
	// @param guid
	//   The GUID of the resource to be retrieved.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Resource.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	GetResourceSearchText(authenticationToken string, guid types.GUID) (r string, err error)
	// Returns a list of the names of the tags for the note with the provided
	// guid.  This can be used with authentication to get the tags for a
	// user's own note, or can be used without valid authentication to retrieve
	// the names of the tags for a note in a public notebook.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	GetNoteTagNames(authenticationToken string, guid types.GUID) (r []string, err error)
	// Asks the service to make a note with the provided set of information.
	//
	// @param note
	//   A Note object containing the desired fields to be populated on
	//   the service.
	//
	// @return
	//   The newly created Note from the service.  The server-side
	//   GUIDs for the Note and any Resources will be saved in this object.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Note.title" - invalid length or pattern
	//   </li>
	//   <li> BAD_DATA_FORMAT "Note.content" - invalid length for ENML content
	//   </li>
	//   <li> BAD_DATA_FORMAT "Resource.mime" - invalid resource MIME type
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteAttributes.*" - bad resource string
	//   </li>
	//   <li> BAD_DATA_FORMAT "ResourceAttributes.*" - bad resource string
	//   </li>
	//   <li> DATA_CONFLICT "Note.deleted" - deleted time set on active note
	//   </li>
	//   <li> DATA_REQUIRED "Resource.data" - resource data body missing
	//   </li>
	//   <li> ENML_VALIDATION "*" - note content doesn't validate against DTD
	//   </li>
	//   <li> LIMIT_REACHED "Note" - at max number per account
	//   </li>
	//   <li> LIMIT_REACHED "Note.size" - total note size too large
	//   </li>
	//   <li> LIMIT_REACHED "Note.resources" - too many resources on Note
	//   </li>
	//   <li> LIMIT_REACHED "Note.tagGuids" - too many Tags on Note
	//   </li>
	//   <li> LIMIT_REACHED "Resource.data.size" - resource too large
	//   </li>
	//   <li> LIMIT_REACHED "NoteAttribute.*" - attribute string too long
	//   </li>
	//   <li> LIMIT_REACHED "ResourceAttribute.*" - attribute string too long
	//   </li>
	//   <li> PERMISSION_DENIED "Note.notebookGuid" - NB not owned by user
	//   </li>
	//   <li> QUOTA_REACHED "Accounting.uploadLimit" - note exceeds upload quota
	//   </li>
	//   <li> BAD_DATA_FORMAT "Tag.name" - Note.tagNames was provided, and one
	//     of the specified tags had an invalid length or pattern
	//   </li>
	//   <li> LIMIT_REACHED "Tag" - Note.tagNames was provided, and the required
	//     new tags would exceed the maximum number per account
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.notebookGuid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Note
	CreateNote(authenticationToken string, note *types.Note) (r *types.Note, err error)
	// Submit a set of changes to a note to the service.  The provided data
	// must include the note's guid field for identification. The note's
	// title must also be set.
	//
	// @param note
	//   A Note object containing the desired fields to be populated on
	//   the service. With the exception of the note's title and guid, fields
	//   that are not being changed do not need to be set. If the content is not
	//   being modified, note.content should be left unset. If the list of
	//   resources is not being modified, note.resources should be left unset.
	//
	// @return
	//   The metadata (no contents) for the Note on the server after the update
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Note.title" - invalid length or pattern
	//   </li>
	//   <li> BAD_DATA_FORMAT "Note.content" - invalid length for ENML body
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteAttributes.*" - bad resource string
	//   </li>
	//   <li> BAD_DATA_FORMAT "ResourceAttributes.*" - bad resource string
	//   </li>
	//   <li> BAD_DATA_FORMAT "Resource.mime" - invalid resource MIME type
	//   </li>
	//   <li> DATA_CONFLICT "Note.deleted" - deleted time set on active note
	//   </li>
	//   <li> DATA_REQUIRED "Resource.data" - resource data body missing
	//   </li>
	//   <li> ENML_VALIDATION "*" - note content doesn't validate against DTD
	//   </li>
	//   <li> LIMIT_REACHED "Note.tagGuids" - too many Tags on Note
	//   </li>
	//   <li> LIMIT_REACHED "Note.resources" - too many resources on Note
	//   </li>
	//   <li> LIMIT_REACHED "Note.size" - total note size too large
	//   </li>
	//   <li> LIMIT_REACHED "Resource.data.size" - resource too large
	//   </li>
	//   <li> LIMIT_REACHED "NoteAttribute.*" - attribute string too long
	//   </li>
	//   <li> LIMIT_REACHED "ResourceAttribute.*" - attribute string too long
	//   </li>
	//   <li> PERMISSION_DENIED "Note" - user doesn't own
	//   </li>
	//   <li> PERMISSION_DENIED "Note.notebookGuid" - user doesn't own destination
	//   </li>
	//   <li> QUOTA_REACHED "Accounting.uploadLimit" - note exceeds upload quota
	//   </li>
	//   <li> BAD_DATA_FORMAT "Tag.name" - Note.tagNames was provided, and one
	//     of the specified tags had an invalid length or pattern
	//   </li>
	//   <li> LIMIT_REACHED "Tag" - Note.tagNames was provided, and the required
	//     new tags would exceed the maximum number per account
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - note not found, by GUID
	//   </li>
	//   <li> "Note.notebookGuid" - if notebookGuid provided, but not found
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Note
	UpdateNote(authenticationToken string, note *types.Note) (r *types.Note, err error)
	// Moves the note into the trash. The note may still be undeleted, unless it
	// is expunged.  This is equivalent to calling updateNote() after setting
	// Note.active = false
	//
	// @param guid
	//   The GUID of the note to delete.
	//
	// @return
	//   The Update Sequence Number for this change within the account.
	//
	// @throws EDAMUserException <ul>
	//   <li> PERMISSION_DENIED "Note" - user doesn't have permission to
	//          update the note.
	//   </li>
	// </ul>
	//
	// @throws EDAMUserException <ul>
	//   <li> DATA_CONFLICT "Note.guid" - the note is already deleted
	//   </li>
	// </ul>
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	DeleteNote(authenticationToken string, guid types.GUID) (r int32, err error)
	// Permanently removes a Note, and all of its Resources,
	// from the service.
	// <p/>
	// NOTE: This function is not available to third party applications.
	// Calls will result in an EDAMUserException with the error code
	// PERMISSION_DENIED.
	//
	// @param guid
	//   The GUID of the note to delete.
	//
	// @return
	//   The Update Sequence Number for this change within the account.
	//
	// @throws EDAMUserException <ul>
	//   <li> PERMISSION_DENIED "Note" - user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	ExpungeNote(authenticationToken string, guid types.GUID) (r int32, err error)
	// Permanently removes a list of Notes, and all of their Resources, from
	// the service.  This should be invoked with a small number of Note GUIDs
	// (e.g. 100 or less) on each call.  To expunge a larger number of notes,
	// call this method multiple times.  This should also be used to reduce the
	// number of Notes in a notebook before calling expungeNotebook() or
	// in the trash before calling expungeInactiveNotes(), since these calls may
	// be prohibitively slow if there are more than a few hundred notes.
	// If an exception is thrown for any of the GUIDs, then none of the notes
	// will be deleted.  I.e. this call can be treated as an atomic transaction.
	// <p/>
	// NOTE: This function is not available to third party applications.
	// Calls will result in an EDAMUserException with the error code
	// PERMISSION_DENIED.
	//
	// @param noteGuids
	//   The list of GUIDs for the Notes to remove.
	//
	// @return
	//   The account's updateCount at the end of this operation
	//
	// @throws EDAMUserException <ul>
	//   <li> PERMISSION_DENIED "Note" - user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - NoteGuids
	ExpungeNotes(authenticationToken string, noteGuids []string) (r int32, err error)
	// Permanently removes all of the Notes that are currently marked as
	// inactive.  This is equivalent to "emptying the trash", and these Notes
	// will be gone permanently.
	// <p/>
	// This operation may be relatively slow if the account contains a large
	// number of inactive Notes.
	// <p/>
	// NOTE: This function is not available to third party applications.
	// Calls will result in an EDAMUserException with the error code
	// PERMISSION_DENIED.
	//
	// @return
	//    The number of notes that were expunged.
	//
	// Parameters:
	//  - AuthenticationToken
	ExpungeInactiveNotes(authenticationToken string) (r int32, err error)
	// Performs a deep copy of the Note with the provided GUID 'noteGuid' into
	// the Notebook with the provided GUID 'toNotebookGuid'.
	// The caller must be the owner of both the Note and the Notebook.
	// This creates a new Note in the destination Notebook with new content and
	// Resources that match all of the content and Resources from the original
	// Note, but with new GUID identifiers.
	// The original Note is not modified by this operation.
	// The copied note is considered as an "upload" for the purpose of upload
	// transfer limit calculation, so its size is added to the upload count for
	// the owner.
	//
	// @param noteGuid
	//   The GUID of the Note to copy.
	//
	// @param toNotebookGuid
	//   The GUID of the Notebook that should receive the new Note.
	//
	// @return
	//   The metadata for the new Note that was created.  This will include the
	//   new GUID for this Note (and any copied Resources), but will not include
	//   the content body or the binary bodies of any Resources.
	//
	// @throws EDAMUserException <ul>
	//   <li> LIMIT_REACHED "Note" - at max number per account
	//   </li>
	//   <li> PERMISSION_DENIED "Notebook.guid" - destination not owned by user
	//   </li>
	//   <li> PERMISSION_DENIED "Note" - user doesn't own
	//   </li>
	//   <li> QUOTA_REACHED "Accounting.uploadLimit" - note exceeds upload quota
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Notebook.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - NoteGuid
	//  - ToNotebookGuid
	CopyNote(authenticationToken string, noteGuid types.GUID, toNotebookGuid types.GUID) (r *types.Note, err error)
	// Returns a list of the prior versions of a particular note that are
	// saved within the service.  These prior versions are stored to provide a
	// recovery from unintentional removal of content from a note. The identifiers
	// that are returned by this call can be used with getNoteVersion to retrieve
	// the previous note.
	// The identifiers will be listed from the most recent versions to the oldest.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - NoteGuid
	ListNoteVersions(authenticationToken string, noteGuid types.GUID) (r []*NoteVersionId, err error)
	// This can be used to retrieve a previous version of a Note after it has been
	// updated within the service.  The caller must identify the note (via its
	// guid) and the version (via the updateSequenceNumber of that version).
	// to find a listing of the stored version USNs for a note, call
	// listNoteVersions.
	// This call is only available for notes in Premium accounts.  (I.e. access
	// to past versions of Notes is a Premium-only feature.)
	//
	// @param noteGuid
	//   The GUID of the note to be retrieved.
	//
	// @param updateSequenceNum
	//   The USN of the version of the note that is being retrieved
	//
	// @param withResourcesData
	//   If true, any Resource elements in this Note will include the binary
	//   contents of their 'data' field's body.
	//
	// @param withResourcesRecognition
	//   If true, any Resource elements will include the binary contents of the
	//   'recognition' field's body if recognition data is present.
	//
	// @param withResourcesAlternateData
	//   If true, any Resource elements in this Note will include the binary
	//   contents of their 'alternateData' fields' body, if an alternate form
	//   is present.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
	//   </li>
	//   <li> PERMISSION_DENIED "updateSequenceNum" -
	//     The account isn't permitted to access previous versions of notes.
	//     (i.e. this is a Free account.)
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	//   <li> "Note.updateSequenceNumber" - the Note doesn't have a version with
	//      the corresponding USN.
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - NoteGuid
	//  - UpdateSequenceNum
	//  - WithResourcesData
	//  - WithResourcesRecognition
	//  - WithResourcesAlternateData
	GetNoteVersion(authenticationToken string, noteGuid types.GUID, updateSequenceNum int32, withResourcesData bool, withResourcesRecognition bool, withResourcesAlternateData bool) (r *types.Note, err error)
	// Returns the current state of the resource in the service with the
	// provided GUID.
	// If the Resource is found in a public notebook, the authenticationToken
	// will be ignored (so it could be an empty string).  Only the
	// keys for the applicationData will be returned.
	//
	// @param guid
	//   The GUID of the resource to be retrieved.
	//
	// @param withData
	//   If true, the Resource will include the binary contents of the
	//   'data' field's body.
	//
	// @param withRecognition
	//   If true, the Resource will include the binary contents of the
	//   'recognition' field's body if recognition data is present.
	//
	// @param withAttributes
	//   If true, the Resource will include the attributes
	//
	// @param withAlternateData
	//   If true, the Resource will include the binary contents of the
	//   'alternateData' field's body, if an alternate form is present.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Resource.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	//  - WithData
	//  - WithRecognition
	//  - WithAttributes
	//  - WithAlternateData
	GetResource(authenticationToken string, guid types.GUID, withData bool, withRecognition bool, withAttributes bool, withAlternateData bool) (r *types.Resource, err error)
	// Get all of the application data for the Resource identified by GUID,
	// with values returned within the LazyMap fullMap field.
	// If there are no applicationData entries, then a LazyMap
	// with an empty fullMap will be returned. If your application
	// only needs to fetch its own applicationData entry, use
	// getResourceApplicationDataEntry instead.
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	GetResourceApplicationData(authenticationToken string, guid types.GUID) (r *types.LazyMap, err error)
	// Get the value of a single entry in the applicationData map
	// for the Resource identified by GUID.
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Resource.guid" - Resource not found, by GUID</li>
	//   <li> "ResourceAttributes.applicationData.key" - Resource not found, by key</li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	//  - Key
	GetResourceApplicationDataEntry(authenticationToken string, guid types.GUID, key string) (r string, err error)
	// Update, or create, an entry in the applicationData map for
	// the Resource identified by guid.
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	//  - Key
	//  - Value
	SetResourceApplicationDataEntry(authenticationToken string, guid types.GUID, key string, value string) (r int32, err error)
	// Remove an entry identified by 'key' from the applicationData map for
	// the Resource identified by 'guid'.
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	//  - Key
	UnsetResourceApplicationDataEntry(authenticationToken string, guid types.GUID, key string) (r int32, err error)
	// Submit a set of changes to a resource to the service.  This can be used
	// to update the meta-data about the resource, but cannot be used to change
	// the binary contents of the resource (including the length and hash).  These
	// cannot be changed directly without creating a new resource and removing the
	// old one via updateNote.
	//
	// @param resource
	//   A Resource object containing the desired fields to be populated on
	//   the service.  The service will attempt to update the resource with the
	//   following fields from the client:
	//   <ul>
	//      <li>guid:  must be provided to identify the resource
	//      </li>
	//      <li>mime
	//      </li>
	//      <li>width
	//      </li>
	//      <li>height
	//      </li>
	//      <li>duration
	//      </li>
	//      <li>attributes:  optional.  if present, the set of attributes will
	//           be replaced.
	//      </li>
	//   </ul>
	//
	// @return
	//   The Update Sequence Number of the resource after the changes have been
	//   applied.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
	//   </li>
	//   <li> BAD_DATA_FORMAT "Resource.mime" - invalid resource MIME type
	//   </li>
	//   <li> BAD_DATA_FORMAT "ResourceAttributes.*" - bad resource string
	//   </li>
	//   <li> LIMIT_REACHED "ResourceAttribute.*" - attribute string too long
	//   </li>
	//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Resource.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Resource
	UpdateResource(authenticationToken string, resource *types.Resource) (r int32, err error)
	// Returns binary data of the resource with the provided GUID.  For
	// example, if this were an image resource, this would contain the
	// raw bits of the image.
	// If the Resource is found in a public notebook, the authenticationToken
	// will be ignored (so it could be an empty string).
	//
	// @param guid
	//   The GUID of the resource to be retrieved.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Resource.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	GetResourceData(authenticationToken string, guid types.GUID) (r []byte, err error)
	// Returns the current state of a resource, referenced by containing
	// note GUID and resource content hash.
	//
	// @param noteGuid
	//   The GUID of the note that holds the resource to be retrieved.
	//
	// @param contentHash
	//   The MD5 checksum of the resource within that note. Note that
	//   this is the binary checksum, for example from Resource.data.bodyHash,
	//   and not the hex-encoded checksum that is used within an en-media
	//   tag in a note body.
	//
	// @param withData
	//   If true, the Resource will include the binary contents of the
	//   'data' field's body.
	//
	// @param withRecognition
	//   If true, the Resource will include the binary contents of the
	//   'recognition' field's body.
	//
	// @param withAlternateData
	//   If true, the Resource will include the binary contents of the
	//   'alternateData' field's body, if an alternate form is present.
	//
	// @throws EDAMUserException <ul>
	//   <li> DATA_REQUIRED "Note.guid" - noteGuid param missing
	//   </li>
	//   <li> DATA_REQUIRED "Note.contentHash" - contentHash param missing
	//   </li>
	//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note" - not found, by guid
	//   </li>
	//   <li> "Resource" - not found, by hash
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - NoteGuid
	//  - ContentHash
	//  - WithData
	//  - WithRecognition
	//  - WithAlternateData
	GetResourceByHash(authenticationToken string, noteGuid types.GUID, contentHash []byte, withData bool, withRecognition bool, withAlternateData bool) (r *types.Resource, err error)
	// Returns the binary contents of the recognition index for the resource
	// with the provided GUID.  If the caller asks about a resource that has
	// no recognition data, this will throw EDAMNotFoundException.
	// If the Resource is found in a public notebook, the authenticationToken
	// will be ignored (so it could be an empty string).
	//
	// @param guid
	//   The GUID of the resource whose recognition data should be retrieved.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Resource.guid" - not found, by GUID
	//   </li>
	//   <li> "Resource.recognition" - resource has no recognition
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	GetResourceRecognition(authenticationToken string, guid types.GUID) (r []byte, err error)
	// If the Resource with the provided GUID has an alternate data representation
	// (indicated via the Resource.alternateData field), then this request can
	// be used to retrieve the binary contents of that alternate data file.
	// If the caller asks about a resource that has no alternate data form, this
	// will throw EDAMNotFoundException.
	//
	// @param guid
	//    The GUID of the resource whose recognition data should be retrieved.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Resource.guid" - not found, by GUID
	//   </li>
	//   <li> "Resource.alternateData" - resource has no recognition
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	GetResourceAlternateData(authenticationToken string, guid types.GUID) (r []byte, err error)
	// Returns the set of attributes for the Resource with the provided GUID.
	// If the Resource is found in a public notebook, the authenticationToken
	// will be ignored (so it could be an empty string).
	//
	// @param guid
	//   The GUID of the resource whose attributes should be retrieved.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Resource.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	GetResourceAttributes(authenticationToken string, guid types.GUID) (r *types.ResourceAttributes, err error)
	// <p>
	// Looks for a user account with the provided userId on this NoteStore
	// shard and determines whether that account contains a public notebook
	// with the given URI.  If the account is not found, or no public notebook
	// exists with this URI, this will throw an EDAMNotFoundException,
	// otherwise this will return the information for that Notebook.
	// </p>
	// <p>
	// If a notebook is visible on the web with a full URL like
	// http://www.evernote.com/pub/sethdemo/api
	// Then 'sethdemo' is the username that can be used to look up the userId,
	// and 'api' is the publicUri.
	// </p>
	//
	// @param userId
	//    The numeric identifier for the user who owns the public notebook.
	//    To find this value based on a username string, you can invoke
	//    UserStore.getPublicUserInfo
	//
	// @param publicUri
	//    The uri string for the public notebook, from Notebook.publishing.uri.
	//
	// @throws EDAMNotFoundException <ul>
	//   <li>"Publishing.uri" - not found, by URI</li>
	// </ul>
	//
	// @throws EDAMSystemException <ul>
	//   <li> TAKEN_DOWN "PublicNotebook" - The specified public notebook is
	//     taken down (for all requesters).</li>
	//   <li> TAKEN_DOWN "Country" - The specified public notebook is taken
	//     down for the requester because of an IP-based country lookup.</li>
	// </ul>
	//
	// Parameters:
	//  - UserId
	//  - PublicUri
	GetPublicNotebook(userId types.UserID, publicUri string) (r *types.Notebook, err error)
	// Used to construct a shared notebook object. The constructed notebook will
	// contain a "share key" which serve as a unique identifer and access token
	// for a user to access the notebook of the shared notebook owner.
	//
	// @param sharedNotebook
	//   A shared notebook object populated with the email address of the share
	//   recipient, the notebook guid and the access permissions. All other
	//   attributes of the shared object are ignored. The SharedNotebook.allowPreview
	//   field must be explicitly set with either a true or false value.
	//
	// @return
	//   The fully populated SharedNotebook object including the server assigned
	//   share id and shareKey which can both be used to uniquely identify the
	//   SharedNotebook.
	//
	// @throws EDAMUserException <ul>
	//   <li>BAD_DATA_FORMAT "SharedNotebook.email" - if the email was not valid</li>
	//   <li>BAD_DATA_FORMAT "requireLogin" - if the SharedNotebook.allowPreview field was
	//       not set, and the SharedNotebook.requireLogin was also not set or was set to
	//       false.</li>
	//   <li>PERMISSION_DENIED "SharedNotebook.recipientSettings" - if
	//       recipientSettings is set in the sharedNotebook.  Only the recipient
	//       can set these values via the setSharedNotebookRecipientSettings
	//       method.
	//   </li>
	//   </ul>
	// @throws EDAMNotFoundException <ul>
	//   <li>Notebook.guid - if the notebookGuid is not a valid GUID for the user.
	//   </li>
	//   </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - SharedNotebook
	CreateSharedNotebook(authenticationToken string, sharedNotebook *types.SharedNotebook) (r *types.SharedNotebook, err error)
	// Update a SharedNotebook object.
	//
	// @param authenticationToken
	//   Must be an authentication token from the owner or a shared notebook
	//   authentication token or business authentication token with sufficient
	//   permissions to change invitations for a notebook.
	//
	// @param sharedNotebook
	//  The SharedNotebook object containing the requested changes.
	//  The "id" of the shared notebook must be set to allow the service
	//  to identify the SharedNotebook to be updated. In addition, you MUST set
	//  the email, permission, and allowPreview fields to the desired values.
	//  All other fields will be ignored if set.
	//
	// @return
	//  The Update Serial Number for this change within the account.
	//
	// @throws EDAMUserException <ul>
	//   <li>UNSUPPORTED_OPERATION "updateSharedNotebook" - if this service instance does not support shared notebooks.</li>
	//   <li>BAD_DATA_FORMAT "SharedNotebook.email" - if the email was not valid.</li>
	//   <li>DATA_REQUIRED "SharedNotebook.id" - if the id field was not set.</li>
	//   <li>DATA_REQUIRED "SharedNotebook.privilege" - if the privilege field was not set.</li>
	//   <li>DATA_REQUIRED "SharedNotebook.allowPreview" - if the allowPreview field was not set.</li>
	//   </ul>
	// @throws EDAMNotFoundException <ul>
	//   <li>SharedNotebook.id - if no shared notebook with the specified ID was found.
	//   </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - SharedNotebook
	UpdateSharedNotebook(authenticationToken string, sharedNotebook *types.SharedNotebook) (r int32, err error)
	// Set values for the recipient settings associated with a shared notebook.  Having
	// update rights to the shared notebook record itself has no effect on this call;
	// only the recipient of the shared notebook can can the recipient settings.
	//
	// If you do <i>not</i> wish to, or cannot, change one of the reminderNotifyEmail or
	// reminderNotifyInApp fields, you must leave that field unset in recipientSettings.
	// This method will skip that field for updates and leave the existing state as
	// it is.
	//
	// @return The update sequence number of the account to which the shared notebook
	//   belongs, which is the account from which we are sharing a notebook.
	//
	// @throws EDAMNotFoundException "sharedNotebookId" - Thrown if the service does not
	//   have a shared notebook record for the sharedNotebookId on the given shard.  If you
	//   receive this exception, it is probable that the shared notebook record has
	//   been revoked or expired, or that you accessed the wrong shard.
	//
	// @throws EDAMUserException <ul>
	//   <li>PEMISSION_DENIED "authenticationToken" - If you do not have permission to set
	//       the recipient settings for the shared notebook.  Only the recipient has
	//       permission to do this.
	//   <li>DATA_CONFLICT "recipientSettings.reminderNotifyEmail" - Setting whether
	//       or not you want to receive reminder e-mail notifications is possible on
	//       a business notebook in the business to which the user belongs.  All
	//       others can safely unset the reminderNotifyEmail field from the
	//       recipientSettings parameter.
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - SharedNotebookId
	//  - RecipientSettings
	SetSharedNotebookRecipientSettings(authenticationToken string, sharedNotebookId int64, recipientSettings *types.SharedNotebookRecipientSettings) (r int32, err error)
	// Send a reminder message to some or all of the email addresses that a notebook has been
	// shared with. The message includes the current link to view the notebook.
	// @param authenticationToken
	//   The auth token of the user with permissions to share the notebook
	// @param notebookGuid
	//   The guid of the shared notebook
	// @param messageText
	//  User provided text to include in the email
	// @param recipients
	//  The email addresses of the recipients. If this list is empty then all of the
	//  users that the notebook has been shared with are emailed.
	//  If an email address doesn't correspond to share invite members then that address
	//  is ignored.
	// @return
	//  The number of messages sent
	// @throws EDAMUserException <ul>
	//   <li> LIMIT_REACHED "(recipients)" -
	//     The email can't be sent because this would exceed the user's daily
	//     email limit.
	//   </li>
	//   <li> PERMISSION_DENIED "Notebook.guid" - The user doesn't have permission to
	//     send a message for the specified notebook.
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Notebook.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - NotebookGuid
	//  - MessageText
	//  - Recipients
	SendMessageToSharedNotebookMembers(authenticationToken string, notebookGuid types.GUID, messageText string, recipients []string) (r int32, err error)
	// Lists the collection of shared notebooks for all notebooks in the
	// users account.
	//
	// @return
	//  The list of all SharedNotebooks for the user
	//
	// Parameters:
	//  - AuthenticationToken
	ListSharedNotebooks(authenticationToken string) (r []*types.SharedNotebook, err error)
	// Expunges the SharedNotebooks in the user's account using the
	// SharedNotebook.id as the identifier.
	// <p/>
	// NOTE: This function is generally not available to third party applications.
	// Calls will result in an EDAMUserException with the error code
	// PERMISSION_DENIED.
	//
	// @param
	//   sharedNotebookIds - a list of ShardNotebook.id longs identifying the
	//       objects to delete permanently.
	//
	// @return
	//   The account's update sequence number.
	//
	// Parameters:
	//  - AuthenticationToken
	//  - SharedNotebookIds
	ExpungeSharedNotebooks(authenticationToken string, sharedNotebookIds []int64) (r int32, err error)
	// Asks the service to make a linked notebook with the provided name, username
	// of the owner and identifiers provided. A linked notebook can be either a
	// link to a public notebook or to a private shared notebook.
	//
	// @param linkedNotebook
	//   The desired fields for the linked notebook must be provided on this
	//   object.  The name of the linked notebook must be set. Either a username
	//   uri or a shard id and share key must be provided otherwise a
	//   EDAMUserException is thrown.
	//
	// @return
	//   The newly created LinkedNotebook.  The server-side id will be
	//   saved in this object's 'id' field.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "LinkedNotebook.name" - invalid length or pattern
	//   </li>
	//   <li> BAD_DATA_FORMAT "LinkedNotebook.username" - bad username format
	//   </li>
	//   <li> BAD_DATA_FORMAT "LinkedNotebook.uri" -
	//     if public notebook set but bad uri
	//   </li>
	//   <li> BAD_DATA_FORMAT "LinkedNotebook.shareKey" -
	//     if private notebook set but bad shareKey
	//   </li>
	//   <li> DATA_REQUIRED "LinkedNotebook.shardId" -
	//     if private notebook but shard id not provided
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - LinkedNotebook
	CreateLinkedNotebook(authenticationToken string, linkedNotebook *types.LinkedNotebook) (r *types.LinkedNotebook, err error)
	// @param linkedNotebook
	//   Updates the name of a linked notebook.
	//
	// @return
	//   The Update Sequence Number for this change within the account.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "LinkedNotebook.name" - invalid length or pattern
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - LinkedNotebook
	UpdateLinkedNotebook(authenticationToken string, linkedNotebook *types.LinkedNotebook) (r int32, err error)
	// Returns a list of linked notebooks
	//
	// Parameters:
	//  - AuthenticationToken
	ListLinkedNotebooks(authenticationToken string) (r []*types.LinkedNotebook, err error)
	// Permanently expunges the linked notebook from the account.
	// <p/>
	// NOTE: This function is generally not available to third party applications.
	// Calls will result in an EDAMUserException with the error code
	// PERMISSION_DENIED.
	//
	// @param guid
	//   The LinkedNotebook.guid field of the LinkedNotebook to permanently remove
	//   from the account.
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	ExpungeLinkedNotebook(authenticationToken string, guid types.GUID) (r int32, err error)
	// Asks the service to produce an authentication token that can be used to
	// access the contents of a shared notebook from someone else's account.
	// This authenticationToken can be used with the various other NoteStore
	// calls to find and retrieve notes, and if the permissions in the shared
	// notebook are sufficient, to make changes to the contents of the notebook.
	//
	// @param shareKey
	//   The 'shareKey' identifier from the SharedNotebook that was granted to
	//   some recipient.  This string internally encodes the notebook identifier
	//   and a security signature.
	//
	// @param authenticationToken
	//   If a non-empty string is provided, this is the full user-based
	//   authentication token that identifies the user who is currently logged in
	//   and trying to access the shared notebook.  This may be required if the
	//   notebook was created with 'requireLogin'.
	//   If this string is empty, the service will attempt to authenticate to the
	//   shared notebook without any logged in user.
	//
	// @throws EDAMSystemException <ul>
	//   <li> BAD_DATA_FORMAT "shareKey" - invalid shareKey string
	//   </li>
	//   <li> INVALID_AUTH "shareKey" - bad signature on shareKey string
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "SharedNotebook.id" - the shared notebook no longer exists
	//   </li>
	// </ul>
	//
	// @throws EDAMUserException <ul>
	//   <li> DATA_REQUIRED "authenticationToken" - the share requires login, and
	//          no valid authentication token was provided.
	//   </li>
	//   <li> PERMISSION_DENIED "SharedNotebook.username" - share requires login,
	//          and another username has already been bound to this notebook.
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - ShareKey
	//  - AuthenticationToken
	AuthenticateToSharedNotebook(shareKey string, authenticationToken string) (r *userstore.AuthenticationResult_, err error)
	// This function is used to retrieve extended information about a shared
	// notebook by a guest who has already authenticated to access that notebook.
	// This requires an 'authenticationToken' parameter which should be the
	// resut of a call to authenticateToSharedNotebook(...).
	// I.e. this is the token that gives access to the particular shared notebook
	// in someone else's account -- it's not the authenticationToken for the
	// owner of the notebook itself.
	//
	// @param authenticationToken
	//   Should be the authentication token retrieved from the reply of
	//   authenticateToSharedNotebook(), proving access to a particular shared
	//   notebook.
	//
	// @throws EDAMUserException <ul>
	//   <li> PERMISSION_DENIED "authenticationToken" -
	//          authentication token doesn't correspond to a valid shared notebook
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "SharedNotebook.id" - the shared notebook no longer exists
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	GetSharedNotebookByAuth(authenticationToken string) (r *types.SharedNotebook, err error)
	// Attempts to send a single note to one or more email recipients.
	// <p/>
	// NOTE: This function is generally not available to third party applications.
	// Calls will result in an EDAMUserException with the error code
	// PERMISSION_DENIED.
	//
	// @param authenticationToken
	//    The note will be sent as the user logged in via this token, using that
	//    user's registered email address.  If the authenticated user doesn't
	//    have permission to read that note, the emailing will fail.
	//
	// @param parameters
	//    The note must be specified either by GUID (in which case it will be
	//    sent using the existing data in the service), or else the full Note
	//    must be passed to this call.  This also specifies the additional
	//    email fields that will be used in the email.
	//
	// @throws EDAMUserException <ul>
	//   <li> LIMIT_REACHED "NoteEmailParameters.toAddresses" -
	//     The email can't be sent because this would exceed the user's daily
	//     email limit.
	//   </li>
	//   <li> BAD_DATA_FORMAT "(email address)" -
	//     email address malformed
	//   </li>
	//   <li> DATA_REQUIRED "NoteEmailParameters.toAddresses" -
	//     if there are no To: or Cc: addresses provided.
	//   </li>
	//   <li> DATA_REQUIRED "Note.title" -
	//     if the caller provides a Note parameter with no title
	//   </li>
	//   <li> DATA_REQUIRED "Note.content" -
	//     if the caller provides a Note parameter with no content
	//   </li>
	//   <li> ENML_VALIDATION "*" - note content doesn't validate against DTD
	//   </li>
	//   <li> DATA_REQUIRED "NoteEmailParameters.note" -
	//     if no guid or note provided
	//   </li>
	//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Parameters
	EmailNote(authenticationToken string, parameters *NoteEmailParameters) (err error)
	// If this note is not already shared (via its own direct URL), then this
	// will start sharing that note.
	// This will return the secret "Note Key" for this note that
	// can currently be used in conjunction with the Note's GUID to gain direct
	// read-only access to the Note.
	// If the note is already shared, then this won't make any changes to the
	// note, and the existing "Note Key" will be returned.  The only way to change
	// the Note Key for an existing note is to stopSharingNote first, and then
	// call this function.
	//
	// @param guid
	//   The GUID of the note to be shared.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	ShareNote(authenticationToken string, guid types.GUID) (r string, err error)
	// If this note is not already shared then this will stop sharing that note
	// and invalidate its "Note Key", so any existing URLs to access that Note
	// will stop working.
	// If the Note is not shared, then this function will do nothing.
	//
	// @param guid
	//   The GUID of the note to be un-shared.
	//
	// @throws EDAMUserException <ul>
	//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
	//   </li>
	//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "Note.guid" - not found, by GUID
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - GUID
	StopSharingNote(authenticationToken string, guid types.GUID) (err error)
	// Asks the service to produce an authentication token that can be used to
	// access the contents of a single Note which was individually shared
	// from someone's account.
	// This authenticationToken can be used with the various other NoteStore
	// calls to find and retrieve the Note and its directly-referenced children.
	//
	// @param guid
	//   The GUID identifying this Note on this shard.
	//
	// @param noteKey
	//   The 'noteKey' identifier from the Note that was originally created via
	//   a call to shareNote() and then given to a recipient to access.
	//
	// @param authenticationToken
	//   An optional authenticationToken that identifies the user accessing the
	//   shared note. This parameter may be required to access some shared notes.
	//
	// @throws EDAMUserException <ul>
	//   <li> PERMISSION_DENIED "Note" - the Note with that GUID is either not
	//     shared, or the noteKey doesn't match the current key for this note
	//   </li>
	//   <li> PERMISSION_DENIED "authenticationToken" - an authentication token is
	//     required to access this Note, but either no authentication token or a
	//     "non-owner" authentication token was provided.
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li> "guid" - the note with that GUID is not found
	//   </li>
	// </ul>
	//
	// @throws EDAMSystemException <ul>
	//   <li> TAKEN_DOWN "Note" - The specified shared note is taken down (for
	//     all requesters).
	//   </li>
	//   <li> TAKEN_DOWN "Country" - The specified shared note is taken down
	//     for the requester because of an IP-based country lookup.
	//   </ul>
	// </ul>
	//
	// Parameters:
	//  - GUID
	//  - NoteKey
	//  - AuthenticationToken
	AuthenticateToSharedNote(guid string, noteKey string, authenticationToken string) (r *userstore.AuthenticationResult_, err error)
	// Identify related entities on the service, such as notes,
	// notebooks, and tags related to notes or content.
	//
	// @param query
	//   The information about which we are finding related entities.
	//
	// @param resultSpec
	//   Allows the client to indicate the type and quantity of
	//   information to be returned, allowing a saving of time and
	//   bandwidth.
	//
	// @return
	//   The result of the query, with information considered
	//   to likely be relevantly related to the information
	//   described by the query.
	//
	// @throws EDAMUserException <ul>
	//   <li>BAD_DATA_FORMAT "RelatedQuery.plainText" - If you provided a
	//     a zero-length plain text value.
	//   </li>
	//   <li>BAD_DATA_FORMAT "RelatedQuery.noteGuid" - If you provided an
	//     invalid Note GUID, that is, one that does not match the constraints
	//     defined by EDAM_GUID_LEN_MIN, EDAM_GUID_LEN_MAX, EDAM_GUID_REGEX.
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteFilter.tagGuids" - if any are malformed
	//   </li>
	//   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
	//   </li>
	//   <li>PERMISSION_DENIED "Note" - If the caller does not have access to
	//     the note identified by RelatedQuery.noteGuid.
	//   </li>
	//   <li>DATA_REQUIRED "RelatedResultSpec" - If you did not not set any values
	//     in the result spec.
	//   </li>
	// </ul>
	//
	// @throws EDAMNotFoundException <ul>
	//   <li>"RelatedQuery.noteGuid" - the note with that GUID is not
	//     found, if that field has been set in the query.
	//   </li>
	// </ul>
	//
	// Parameters:
	//  - AuthenticationToken
	//  - Query
	//  - ResultSpec
	FindRelated(authenticationToken string, query *RelatedQuery, resultSpec *RelatedResultSpec) (r *RelatedResult_, err error)
}

type NoteStoreClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewNoteStoreClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *NoteStoreClient {
	return &NoteStoreClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewNoteStoreClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *NoteStoreClient {
	return &NoteStoreClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Asks the NoteStore to provide information about the status of the user
// account corresponding to the provided authentication token.
//
// Parameters:
//  - AuthenticationToken
func (p *NoteStoreClient) GetSyncState(authenticationToken string) (r *SyncState, err error) {
	if err = p.sendGetSyncState(authenticationToken); err != nil {
		return
	}
	return p.recvGetSyncState()
}

func (p *NoteStoreClient) sendGetSyncState(authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSyncState", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetSyncStateArgs{
		AuthenticationToken: authenticationToken,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetSyncState() (value *SyncState, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getSyncState" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSyncState failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSyncState failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error29 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error30 error
		error30, err = error29.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error30
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSyncState failed: invalid message type")
		return
	}
	result := NoteStoreGetSyncStateResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// Asks the NoteStore to provide information about the status of the user
// account corresponding to the provided authentication token.
// This version of 'getSyncState' allows the client to upload coarse-
// grained usage metrics to the service.
//
// @param clientMetrics  see the documentation of the ClientUsageMetrics
//   structure for an explanation of the fields that clients can pass to
//   the service.
//
// Parameters:
//  - AuthenticationToken
//  - ClientMetrics
func (p *NoteStoreClient) GetSyncStateWithMetrics(authenticationToken string, clientMetrics *ClientUsageMetrics) (r *SyncState, err error) {
	if err = p.sendGetSyncStateWithMetrics(authenticationToken, clientMetrics); err != nil {
		return
	}
	return p.recvGetSyncStateWithMetrics()
}

func (p *NoteStoreClient) sendGetSyncStateWithMetrics(authenticationToken string, clientMetrics *ClientUsageMetrics) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSyncStateWithMetrics", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetSyncStateWithMetricsArgs{
		AuthenticationToken: authenticationToken,
		ClientMetrics:       clientMetrics,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetSyncStateWithMetrics() (value *SyncState, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getSyncStateWithMetrics" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSyncStateWithMetrics failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSyncStateWithMetrics failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error31 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error32 error
		error32, err = error31.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error32
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSyncStateWithMetrics failed: invalid message type")
		return
	}
	result := NoteStoreGetSyncStateWithMetricsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// DEPRECATED - use getFilteredSyncChunk.
//
// Parameters:
//  - AuthenticationToken
//  - AfterUSN
//  - MaxEntries
//  - FullSyncOnly
func (p *NoteStoreClient) GetSyncChunk(authenticationToken string, afterUSN int32, maxEntries int32, fullSyncOnly bool) (r *SyncChunk, err error) {
	if err = p.sendGetSyncChunk(authenticationToken, afterUSN, maxEntries, fullSyncOnly); err != nil {
		return
	}
	return p.recvGetSyncChunk()
}

func (p *NoteStoreClient) sendGetSyncChunk(authenticationToken string, afterUSN int32, maxEntries int32, fullSyncOnly bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSyncChunk", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetSyncChunkArgs{
		AuthenticationToken: authenticationToken,
		AfterUSN:            afterUSN,
		MaxEntries:          maxEntries,
		FullSyncOnly:        fullSyncOnly,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetSyncChunk() (value *SyncChunk, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getSyncChunk" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSyncChunk failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSyncChunk failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error33 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error34 error
		error34, err = error33.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error34
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSyncChunk failed: invalid message type")
		return
	}
	result := NoteStoreGetSyncChunkResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// Asks the NoteStore to provide the state of the account in order of
// last modification.  This request retrieves one block of the server's
// state so that a client can make several small requests against a large
// account rather than getting the entire state in one big message.
// This call gives fine-grained control of the data that will
// be received by a client by omitting data elements that a client doesn't
// need. This may reduce network traffic and sync times.
//
// @param afterUSN
//   The client can pass this value to ask only for objects that
//   have been updated after a certain point.  This allows the client to
//   receive updates after its last checkpoint rather than doing a full
//   synchronization on every pass.  The default value of "0" indicates
//   that the client wants to get objects from the start of the account.
//
// @param maxEntries
//   The maximum number of modified objects that should be
//   returned in the result SyncChunk.  This can be used to limit the size
//   of each individual message to be friendly for network transfer.
//
// @param filter
//   The caller must set some of the flags in this structure to specify which
//   data types should be returned during the synchronization.  See
//   the SyncChunkFilter structure for information on each flag.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "afterUSN" - if negative
//   </li>
//   <li> BAD_DATA_FORMAT "maxEntries" - if less than 1
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - AfterUSN
//  - MaxEntries
//  - Filter
func (p *NoteStoreClient) GetFilteredSyncChunk(authenticationToken string, afterUSN int32, maxEntries int32, filter *SyncChunkFilter) (r *SyncChunk, err error) {
	if err = p.sendGetFilteredSyncChunk(authenticationToken, afterUSN, maxEntries, filter); err != nil {
		return
	}
	return p.recvGetFilteredSyncChunk()
}

func (p *NoteStoreClient) sendGetFilteredSyncChunk(authenticationToken string, afterUSN int32, maxEntries int32, filter *SyncChunkFilter) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getFilteredSyncChunk", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetFilteredSyncChunkArgs{
		AuthenticationToken: authenticationToken,
		AfterUSN:            afterUSN,
		MaxEntries:          maxEntries,
		Filter:              filter,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetFilteredSyncChunk() (value *SyncChunk, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getFilteredSyncChunk" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getFilteredSyncChunk failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getFilteredSyncChunk failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error35 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error36 error
		error36, err = error35.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error36
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getFilteredSyncChunk failed: invalid message type")
		return
	}
	result := NoteStoreGetFilteredSyncChunkResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// Asks the NoteStore to provide information about the status of a linked
// notebook that has been shared with the caller, or that is public to the
// world.
// This will return a result that is similar to getSyncState, but may omit
// SyncState.uploaded if the caller doesn't have permission to write to
// the linked notebook.
//
// This function must be called on the shard that owns the referenced
// notebook.  (I.e. the shardId in /shard/shardId/edam/note must be the
// same as LinkedNotebook.shardId.)
//
// @param authenticationToken
//   This should be an authenticationToken for the guest who has received
//   the invitation to the share.  (I.e. this should not be the result of
//   NoteStore.authenticateToSharedNotebook)
//
// @param linkedNotebook
//   This structure should contain identifying information and permissions
//   to access the notebook in question.
//
// Parameters:
//  - AuthenticationToken
//  - LinkedNotebook
func (p *NoteStoreClient) GetLinkedNotebookSyncState(authenticationToken string, linkedNotebook *types.LinkedNotebook) (r *SyncState, err error) {
	if err = p.sendGetLinkedNotebookSyncState(authenticationToken, linkedNotebook); err != nil {
		return
	}
	return p.recvGetLinkedNotebookSyncState()
}

func (p *NoteStoreClient) sendGetLinkedNotebookSyncState(authenticationToken string, linkedNotebook *types.LinkedNotebook) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getLinkedNotebookSyncState", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetLinkedNotebookSyncStateArgs{
		AuthenticationToken: authenticationToken,
		LinkedNotebook:      linkedNotebook,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetLinkedNotebookSyncState() (value *SyncState, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getLinkedNotebookSyncState" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getLinkedNotebookSyncState failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getLinkedNotebookSyncState failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error37 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error38 error
		error38, err = error37.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error38
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getLinkedNotebookSyncState failed: invalid message type")
		return
	}
	result := NoteStoreGetLinkedNotebookSyncStateResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Asks the NoteStore to provide information about the contents of a linked
// notebook that has been shared with the caller, or that is public to the
// world.
// This will return a result that is similar to getSyncChunk, but will only
// contain entries that are visible to the caller.  I.e. only that particular
// Notebook will be visible, along with its Notes, and Tags on those Notes.
//
// This function must be called on the shard that owns the referenced
// notebook.  (I.e. the shardId in /shard/shardId/edam/note must be the
// same as LinkedNotebook.shardId.)
//
// @param authenticationToken
//   This should be an authenticationToken for the guest who has received
//   the invitation to the share.  (I.e. this should not be the result of
//   NoteStore.authenticateToSharedNotebook)
//
// @param linkedNotebook
//   This structure should contain identifying information and permissions
//   to access the notebook in question.  This must contain the valid fields
//   for either a shared notebook (e.g. shareKey)
//   or a public notebook (e.g. username, uri)
//
// @param afterUSN
//   The client can pass this value to ask only for objects that
//   have been updated after a certain point.  This allows the client to
//   receive updates after its last checkpoint rather than doing a full
//   synchronization on every pass.  The default value of "0" indicates
//   that the client wants to get objects from the start of the account.
//
// @param maxEntries
//   The maximum number of modified objects that should be
//   returned in the result SyncChunk.  This can be used to limit the size
//   of each individual message to be friendly for network transfer.
//   Applications should not request more than 256 objects at a time,
//   and must handle the case where the service returns less than the
//   requested number of objects in a given request even though more
//   objects are available on the service.
//
// @param fullSyncOnly
//   If true, then the client only wants initial data for a full sync.
//   In this case, the service will not return any expunged objects,
//   and will not return any Resources, since these are also provided
//   in their corresponding Notes.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "afterUSN" - if negative
//   </li>
//   <li> BAD_DATA_FORMAT "maxEntries" - if less than 1
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "LinkedNotebook" - if the provided information doesn't match any
//     valid notebook
//   </li>
//   <li> "LinkedNotebook.uri" - if the provided public URI doesn't match any
//     valid notebook
//   </li>
//   <li> "SharedNotebook.id" - if the provided information indicates a
//      shared notebook that no longer exists
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - LinkedNotebook
//  - AfterUSN
//  - MaxEntries
//  - FullSyncOnly
func (p *NoteStoreClient) GetLinkedNotebookSyncChunk(authenticationToken string, linkedNotebook *types.LinkedNotebook, afterUSN int32, maxEntries int32, fullSyncOnly bool) (r *SyncChunk, err error) {
	if err = p.sendGetLinkedNotebookSyncChunk(authenticationToken, linkedNotebook, afterUSN, maxEntries, fullSyncOnly); err != nil {
		return
	}
	return p.recvGetLinkedNotebookSyncChunk()
}

func (p *NoteStoreClient) sendGetLinkedNotebookSyncChunk(authenticationToken string, linkedNotebook *types.LinkedNotebook, afterUSN int32, maxEntries int32, fullSyncOnly bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getLinkedNotebookSyncChunk", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetLinkedNotebookSyncChunkArgs{
		AuthenticationToken: authenticationToken,
		LinkedNotebook:      linkedNotebook,
		AfterUSN:            afterUSN,
		MaxEntries:          maxEntries,
		FullSyncOnly:        fullSyncOnly,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetLinkedNotebookSyncChunk() (value *SyncChunk, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getLinkedNotebookSyncChunk" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getLinkedNotebookSyncChunk failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getLinkedNotebookSyncChunk failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error39 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error40 error
		error40, err = error39.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error40
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getLinkedNotebookSyncChunk failed: invalid message type")
		return
	}
	result := NoteStoreGetLinkedNotebookSyncChunkResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Returns a list of all of the notebooks in the account.
//
// Parameters:
//  - AuthenticationToken
func (p *NoteStoreClient) ListNotebooks(authenticationToken string) (r []*types.Notebook, err error) {
	if err = p.sendListNotebooks(authenticationToken); err != nil {
		return
	}
	return p.recvListNotebooks()
}

func (p *NoteStoreClient) sendListNotebooks(authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listNotebooks", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreListNotebooksArgs{
		AuthenticationToken: authenticationToken,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvListNotebooks() (value []*types.Notebook, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "listNotebooks" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listNotebooks failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listNotebooks failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error41 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error42 error
		error42, err = error41.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error42
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listNotebooks failed: invalid message type")
		return
	}
	result := NoteStoreListNotebooksResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// Returns the current state of the notebook with the provided GUID.
// The notebook may be active or deleted (but not expunged).
//
// @param guid
//   The GUID of the notebook to be retrieved.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Notebook.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Notebook" - private notebook, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Notebook.guid" - tag not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - GUID
func (p *NoteStoreClient) GetNotebook(authenticationToken string, guid types.GUID) (r *types.Notebook, err error) {
	if err = p.sendGetNotebook(authenticationToken, guid); err != nil {
		return
	}
	return p.recvGetNotebook()
}

func (p *NoteStoreClient) sendGetNotebook(authenticationToken string, guid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getNotebook", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetNotebookArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetNotebook() (value *types.Notebook, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getNotebook" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getNotebook failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getNotebook failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error43 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error44 error
		error44, err = error43.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error44
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getNotebook failed: invalid message type")
		return
	}
	result := NoteStoreGetNotebookResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Returns the notebook that should be used to store new notes in the
// user's account when no other notebooks are specified.
//
// Parameters:
//  - AuthenticationToken
func (p *NoteStoreClient) GetDefaultNotebook(authenticationToken string) (r *types.Notebook, err error) {
	if err = p.sendGetDefaultNotebook(authenticationToken); err != nil {
		return
	}
	return p.recvGetDefaultNotebook()
}

func (p *NoteStoreClient) sendGetDefaultNotebook(authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getDefaultNotebook", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetDefaultNotebookArgs{
		AuthenticationToken: authenticationToken,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetDefaultNotebook() (value *types.Notebook, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getDefaultNotebook" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getDefaultNotebook failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getDefaultNotebook failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error45 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error46 error
		error46, err = error45.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error46
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getDefaultNotebook failed: invalid message type")
		return
	}
	result := NoteStoreGetDefaultNotebookResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// Asks the service to make a notebook with the provided name.
//
// @param notebook
//   The desired fields for the notebook must be provided on this
//   object.  The name of the notebook must be set, and either the 'active'
//   or 'defaultNotebook' fields may be set by the client at creation.
//   If a notebook exists in the account with the same name (via
//   case-insensitive compare), this will throw an EDAMUserException.
//
// @return
//   The newly created Notebook.  The server-side GUID will be
//   saved in this object's 'guid' field.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Notebook.name" - invalid length or pattern
//   </li>
//   <li> BAD_DATA_FORMAT "Notebook.stack" - invalid length or pattern
//   </li>
//   <li> BAD_DATA_FORMAT "Publishing.uri" - if publishing set but bad uri
//   </li>
//   <li> BAD_DATA_FORMAT "Publishing.publicDescription" - if too long
//   </li>
//   <li> DATA_CONFLICT "Notebook.name" - name already in use
//   </li>
//   <li> DATA_CONFLICT "Publishing.uri" - if URI already in use
//   </li>
//   <li> DATA_REQUIRED "Publishing.uri" - if publishing set but uri missing
//   </li>
//   <li> LIMIT_REACHED "Notebook" - at max number of notebooks
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Notebook
func (p *NoteStoreClient) CreateNotebook(authenticationToken string, notebook *types.Notebook) (r *types.Notebook, err error) {
	if err = p.sendCreateNotebook(authenticationToken, notebook); err != nil {
		return
	}
	return p.recvCreateNotebook()
}

func (p *NoteStoreClient) sendCreateNotebook(authenticationToken string, notebook *types.Notebook) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createNotebook", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreCreateNotebookArgs{
		AuthenticationToken: authenticationToken,
		Notebook:            notebook,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvCreateNotebook() (value *types.Notebook, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createNotebook" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createNotebook failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createNotebook failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error47 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error48 error
		error48, err = error47.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error48
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createNotebook failed: invalid message type")
		return
	}
	result := NoteStoreCreateNotebookResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// Submits notebook changes to the service.  The provided data must include
// the notebook's guid field for identification.
//
// @param notebook
//   The notebook object containing the requested changes.
//
// @return
//   The Update Sequence Number for this change within the account.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Notebook.name" - invalid length or pattern
//   </li>
//   <li> BAD_DATA_FORMAT "Notebook.stack" - invalid length or pattern
//   </li>
//   <li> BAD_DATA_FORMAT "Publishing.uri" - if publishing set but bad uri
//   </li>
//   <li> BAD_DATA_FORMAT "Publishing.publicDescription" - if too long
//   </li>
//   <li> DATA_CONFLICT "Notebook.name" - name already in use
//   </li>
//   <li> DATA_CONFLICT "Publishing.uri" - if URI already in use
//   </li>
//   <li> DATA_REQUIRED "Publishing.uri" - if publishing set but uri missing
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Notebook.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Notebook
func (p *NoteStoreClient) UpdateNotebook(authenticationToken string, notebook *types.Notebook) (r int32, err error) {
	if err = p.sendUpdateNotebook(authenticationToken, notebook); err != nil {
		return
	}
	return p.recvUpdateNotebook()
}

func (p *NoteStoreClient) sendUpdateNotebook(authenticationToken string, notebook *types.Notebook) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateNotebook", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreUpdateNotebookArgs{
		AuthenticationToken: authenticationToken,
		Notebook:            notebook,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvUpdateNotebook() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateNotebook" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateNotebook failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateNotebook failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error49 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error50 error
		error50, err = error49.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error50
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateNotebook failed: invalid message type")
		return
	}
	result := NoteStoreUpdateNotebookResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Permanently removes the notebook from the user's account.
// After this action, the notebook is no longer available for undeletion, etc.
// If the notebook contains any Notes, they will be moved to the current
// default notebook and moved into the trash (i.e. Note.active=false).
// <p/>
// NOTE: This function is generally not available to third party applications.
// Calls will result in an EDAMUserException with the error code
// PERMISSION_DENIED.
//
// @param guid
//   The GUID of the notebook to delete.
//
// @return
//   The Update Sequence Number for this change within the account.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Notebook.guid" - if the parameter is missing
//   </li>
//   <li> LIMIT_REACHED "Notebook" - trying to expunge the last Notebook
//   </li>
//   <li> PERMISSION_DENIED "Notebook" - private notebook, user doesn't own
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - GUID
func (p *NoteStoreClient) ExpungeNotebook(authenticationToken string, guid types.GUID) (r int32, err error) {
	if err = p.sendExpungeNotebook(authenticationToken, guid); err != nil {
		return
	}
	return p.recvExpungeNotebook()
}

func (p *NoteStoreClient) sendExpungeNotebook(authenticationToken string, guid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("expungeNotebook", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreExpungeNotebookArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvExpungeNotebook() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "expungeNotebook" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "expungeNotebook failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "expungeNotebook failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error51 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error52 error
		error52, err = error51.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error52
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "expungeNotebook failed: invalid message type")
		return
	}
	result := NoteStoreExpungeNotebookResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Returns a list of the tags in the account.  Evernote does not support
// the undeletion of tags, so this will only include active tags.
//
// Parameters:
//  - AuthenticationToken
func (p *NoteStoreClient) ListTags(authenticationToken string) (r []*types.Tag, err error) {
	if err = p.sendListTags(authenticationToken); err != nil {
		return
	}
	return p.recvListTags()
}

func (p *NoteStoreClient) sendListTags(authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listTags", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreListTagsArgs{
		AuthenticationToken: authenticationToken,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvListTags() (value []*types.Tag, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "listTags" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listTags failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listTags failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error53 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error54 error
		error54, err = error53.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error54
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listTags failed: invalid message type")
		return
	}
	result := NoteStoreListTagsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// Returns a list of the tags that are applied to at least one note within
// the provided notebook.  If the notebook is public, the authenticationToken
// may be ignored.
//
// @param notebookGuid
//    the GUID of the notebook to use to find tags
//
// @throws EDAMNotFoundException <ul>
//   <li> "Notebook.guid" - notebook not found by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - NotebookGuid
func (p *NoteStoreClient) ListTagsByNotebook(authenticationToken string, notebookGuid types.GUID) (r []*types.Tag, err error) {
	if err = p.sendListTagsByNotebook(authenticationToken, notebookGuid); err != nil {
		return
	}
	return p.recvListTagsByNotebook()
}

func (p *NoteStoreClient) sendListTagsByNotebook(authenticationToken string, notebookGuid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listTagsByNotebook", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreListTagsByNotebookArgs{
		AuthenticationToken: authenticationToken,
		NotebookGuid:        notebookGuid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvListTagsByNotebook() (value []*types.Tag, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "listTagsByNotebook" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listTagsByNotebook failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listTagsByNotebook failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error55 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error56 error
		error56, err = error55.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error56
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listTagsByNotebook failed: invalid message type")
		return
	}
	result := NoteStoreListTagsByNotebookResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Returns the current state of the Tag with the provided GUID.
//
// @param guid
//   The GUID of the tag to be retrieved.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Tag.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Tag" - private Tag, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Tag.guid" - tag not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - GUID
func (p *NoteStoreClient) GetTag(authenticationToken string, guid types.GUID) (r *types.Tag, err error) {
	if err = p.sendGetTag(authenticationToken, guid); err != nil {
		return
	}
	return p.recvGetTag()
}

func (p *NoteStoreClient) sendGetTag(authenticationToken string, guid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getTag", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetTagArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetTag() (value *types.Tag, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getTag" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getTag failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getTag failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error57 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error58 error
		error58, err = error57.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error58
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getTag failed: invalid message type")
		return
	}
	result := NoteStoreGetTagResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Asks the service to make a tag with a set of information.
//
// @param tag
//   The desired list of fields for the tag are specified in this
//   object.  The caller must specify the tag name, and may provide
//   the parentGUID.
//
// @return
//   The newly created Tag.  The server-side GUID will be
//   saved in this object.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Tag.name" - invalid length or pattern
//   </li>
//   <li> BAD_DATA_FORMAT "Tag.parentGuid" - malformed GUID
//   </li>
//   <li> DATA_CONFLICT "Tag.name" - name already in use
//   </li>
//   <li> LIMIT_REACHED "Tag" - at max number of tags
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Tag.parentGuid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Tag
func (p *NoteStoreClient) CreateTag(authenticationToken string, tag *types.Tag) (r *types.Tag, err error) {
	if err = p.sendCreateTag(authenticationToken, tag); err != nil {
		return
	}
	return p.recvCreateTag()
}

func (p *NoteStoreClient) sendCreateTag(authenticationToken string, tag *types.Tag) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createTag", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreCreateTagArgs{
		AuthenticationToken: authenticationToken,
		Tag:                 tag,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvCreateTag() (value *types.Tag, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createTag" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createTag failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createTag failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error59 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error60 error
		error60, err = error59.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error60
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createTag failed: invalid message type")
		return
	}
	result := NoteStoreCreateTagResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Submits tag changes to the service.  The provided data must include
// the tag's guid field for identification.  The service will apply
// updates to the following tag fields:  name, parentGuid
//
// @param tag
//   The tag object containing the requested changes.
//
// @return
//   The Update Sequence Number for this change within the account.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Tag.name" - invalid length or pattern
//   </li>
//   <li> BAD_DATA_FORMAT "Tag.parentGuid" - malformed GUID
//   </li>
//   <li> DATA_CONFLICT "Tag.name" - name already in use
//   </li>
//   <li> DATA_CONFLICT "Tag.parentGuid" - can't set parent: circular
//   </li>
//   <li> PERMISSION_DENIED "Tag" - user doesn't own tag
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Tag.guid" - tag not found, by GUID
//   </li>
//   <li> "Tag.parentGuid" - parent not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Tag
func (p *NoteStoreClient) UpdateTag(authenticationToken string, tag *types.Tag) (r int32, err error) {
	if err = p.sendUpdateTag(authenticationToken, tag); err != nil {
		return
	}
	return p.recvUpdateTag()
}

func (p *NoteStoreClient) sendUpdateTag(authenticationToken string, tag *types.Tag) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateTag", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreUpdateTagArgs{
		AuthenticationToken: authenticationToken,
		Tag:                 tag,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvUpdateTag() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateTag" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateTag failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateTag failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error61 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error62 error
		error62, err = error61.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error62
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateTag failed: invalid message type")
		return
	}
	result := NoteStoreUpdateTagResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Removes the provided tag from every note that is currently tagged with
// this tag.  If this operation is successful, the tag will still be in
// the account, but it will not be tagged on any notes.
//
// This function is not indended for use by full synchronizing clients, since
// it does not provide enough result information to the client to reconcile
// the local state without performing a follow-up sync from the service.  This
// is intended for "thin clients" that need to efficiently support this as
// a UI operation.
//
// @param guid
//   The GUID of the tag to remove from all notes.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Tag.guid" - if the guid parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Tag" - user doesn't own tag
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Tag.guid" - tag not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - GUID
func (p *NoteStoreClient) UntagAll(authenticationToken string, guid types.GUID) (err error) {
	if err = p.sendUntagAll(authenticationToken, guid); err != nil {
		return
	}
	return p.recvUntagAll()
}

func (p *NoteStoreClient) sendUntagAll(authenticationToken string, guid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("untagAll", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreUntagAllArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvUntagAll() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "untagAll" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "untagAll failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "untagAll failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error63 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error64 error
		error64, err = error63.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error64
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "untagAll failed: invalid message type")
		return
	}
	result := NoteStoreUntagAllResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	return
}

// Permanently deletes the tag with the provided GUID, if present.
// <p/>
// NOTE: This function is generally not available to third party applications.
// Calls will result in an EDAMUserException with the error code
// PERMISSION_DENIED.
//
// @param guid
//   The GUID of the tag to delete.
//
// @return
//   The Update Sequence Number for this change within the account.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Tag.guid" - if the guid parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Tag" - user doesn't own tag
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Tag.guid" - tag not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - GUID
func (p *NoteStoreClient) ExpungeTag(authenticationToken string, guid types.GUID) (r int32, err error) {
	if err = p.sendExpungeTag(authenticationToken, guid); err != nil {
		return
	}
	return p.recvExpungeTag()
}

func (p *NoteStoreClient) sendExpungeTag(authenticationToken string, guid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("expungeTag", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreExpungeTagArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvExpungeTag() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "expungeTag" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "expungeTag failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "expungeTag failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error65 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error66 error
		error66, err = error65.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error66
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "expungeTag failed: invalid message type")
		return
	}
	result := NoteStoreExpungeTagResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Returns a list of the searches in the account.  Evernote does not support
// the undeletion of searches, so this will only include active searches.
//
// Parameters:
//  - AuthenticationToken
func (p *NoteStoreClient) ListSearches(authenticationToken string) (r []*types.SavedSearch, err error) {
	if err = p.sendListSearches(authenticationToken); err != nil {
		return
	}
	return p.recvListSearches()
}

func (p *NoteStoreClient) sendListSearches(authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listSearches", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreListSearchesArgs{
		AuthenticationToken: authenticationToken,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvListSearches() (value []*types.SavedSearch, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "listSearches" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listSearches failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listSearches failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error67 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error68 error
		error68, err = error67.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error68
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listSearches failed: invalid message type")
		return
	}
	result := NoteStoreListSearchesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// Returns the current state of the search with the provided GUID.
//
// @param guid
//   The GUID of the search to be retrieved.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "SavedSearch.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "SavedSearch" - private Tag, user doesn't own
//   </li>
//
// @throws EDAMNotFoundException <ul>
//   <li> "SavedSearch.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - GUID
func (p *NoteStoreClient) GetSearch(authenticationToken string, guid types.GUID) (r *types.SavedSearch, err error) {
	if err = p.sendGetSearch(authenticationToken, guid); err != nil {
		return
	}
	return p.recvGetSearch()
}

func (p *NoteStoreClient) sendGetSearch(authenticationToken string, guid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSearch", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetSearchArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetSearch() (value *types.SavedSearch, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getSearch" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSearch failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSearch failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error69 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error70 error
		error70, err = error69.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error70
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSearch failed: invalid message type")
		return
	}
	result := NoteStoreGetSearchResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Asks the service to make a saved search with a set of information.
//
// @param search
//   The desired list of fields for the search are specified in this
//   object. The caller must specify the name and query for the
//   search, and may optionally specify a search scope.
//   The SavedSearch.format field is ignored by the service.
//
// @return
//   The newly created SavedSearch.  The server-side GUID will be
//   saved in this object.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "SavedSearch.name" - invalid length or pattern
//   </li>
//   <li> BAD_DATA_FORMAT "SavedSearch.query" - invalid length
//   </li>
//   <li> DATA_CONFLICT "SavedSearch.name" - name already in use
//   </li>
//   <li> LIMIT_REACHED "SavedSearch" - at max number of searches
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Search
func (p *NoteStoreClient) CreateSearch(authenticationToken string, search *types.SavedSearch) (r *types.SavedSearch, err error) {
	if err = p.sendCreateSearch(authenticationToken, search); err != nil {
		return
	}
	return p.recvCreateSearch()
}

func (p *NoteStoreClient) sendCreateSearch(authenticationToken string, search *types.SavedSearch) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createSearch", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreCreateSearchArgs{
		AuthenticationToken: authenticationToken,
		Search:              search,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvCreateSearch() (value *types.SavedSearch, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createSearch" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createSearch failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createSearch failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error71 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error72 error
		error72, err = error71.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error72
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createSearch failed: invalid message type")
		return
	}
	result := NoteStoreCreateSearchResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// Submits search changes to the service. The provided data must include
// the search's guid field for identification. The service will apply
// updates to the following search fields: name, query, and scope.
//
// @param search
//   The search object containing the requested changes.
//
// @return
//   The Update Sequence Number for this change within the account.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "SavedSearch.name" - invalid length or pattern
//   </li>
//   <li> BAD_DATA_FORMAT "SavedSearch.query" - invalid length
//   </li>
//   <li> DATA_CONFLICT "SavedSearch.name" - name already in use
//   </li>
//   <li> PERMISSION_DENIED "SavedSearch" - user doesn't own tag
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "SavedSearch.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Search
func (p *NoteStoreClient) UpdateSearch(authenticationToken string, search *types.SavedSearch) (r int32, err error) {
	if err = p.sendUpdateSearch(authenticationToken, search); err != nil {
		return
	}
	return p.recvUpdateSearch()
}

func (p *NoteStoreClient) sendUpdateSearch(authenticationToken string, search *types.SavedSearch) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateSearch", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreUpdateSearchArgs{
		AuthenticationToken: authenticationToken,
		Search:              search,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvUpdateSearch() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateSearch" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateSearch failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateSearch failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error73 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error74 error
		error74, err = error73.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error74
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateSearch failed: invalid message type")
		return
	}
	result := NoteStoreUpdateSearchResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Permanently deletes the saved search with the provided GUID, if present.
// <p/>
// NOTE: This function is generally not available to third party applications.
// Calls will result in an EDAMUserException with the error code
// PERMISSION_DENIED.
//
// @param guid
//   The GUID of the search to delete.
//
// @return
//   The Update Sequence Number for this change within the account.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "SavedSearch.guid" - if the guid parameter is empty
//   </li>
//   <li> PERMISSION_DENIED "SavedSearch" - user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "SavedSearch.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - GUID
func (p *NoteStoreClient) ExpungeSearch(authenticationToken string, guid types.GUID) (r int32, err error) {
	if err = p.sendExpungeSearch(authenticationToken, guid); err != nil {
		return
	}
	return p.recvExpungeSearch()
}

func (p *NoteStoreClient) sendExpungeSearch(authenticationToken string, guid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("expungeSearch", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreExpungeSearchArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvExpungeSearch() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "expungeSearch" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "expungeSearch failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "expungeSearch failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error75 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error76 error
		error76, err = error75.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error76
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "expungeSearch failed: invalid message type")
		return
	}
	result := NoteStoreExpungeSearchResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// DEPRECATED. Use findNotesMetadata.
//
// Parameters:
//  - AuthenticationToken
//  - Filter
//  - Offset
//  - MaxNotes
func (p *NoteStoreClient) FindNotes(authenticationToken string, filter *NoteFilter, offset int32, maxNotes int32) (r *NoteList, err error) {
	if err = p.sendFindNotes(authenticationToken, filter, offset, maxNotes); err != nil {
		return
	}
	return p.recvFindNotes()
}

func (p *NoteStoreClient) sendFindNotes(authenticationToken string, filter *NoteFilter, offset int32, maxNotes int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findNotes", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreFindNotesArgs{
		AuthenticationToken: authenticationToken,
		Filter:              filter,
		Offset:              offset,
		MaxNotes:            maxNotes,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvFindNotes() (value *NoteList, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "findNotes" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "findNotes failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findNotes failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error77 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error78 error
		error78, err = error77.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error78
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "findNotes failed: invalid message type")
		return
	}
	result := NoteStoreFindNotesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Finds the position of a note within a sorted subset of all of the user's
// notes. This may be useful for thin clients that are displaying a paginated
// listing of a large account, which need to know where a particular note
// sits in the list without retrieving all notes first.
//
// @param authenticationToken
//   Must be a valid token for the user's account unless the NoteFilter
//   'notebookGuid' is the GUID of a public notebook.
//
// @param filter
//   The list of criteria that will constrain the notes to be returned.
//
// @param guid
//   The GUID of the note to be retrieved.
//
// @return
//   If the note with the provided GUID is found within the matching note
//   list, this will return the offset of that note within that list (where
//   the first offset is 0).  If the note is not found within the set of
//   notes, this will return -1.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "offset" - not between 0 and EDAM_USER_NOTES_MAX
//   </li>
//   <li> BAD_DATA_FORMAT "maxNotes" - not between 0 and EDAM_USER_NOTES_MAX
//   </li>
//   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
//   </li>
//   <li> BAD_DATA_FORMAT "NoteFilter.tagGuids" - if any are malformed
//   </li>
//   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
//   </li>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Notebook.guid" - not found, by GUID
//   </li>
//   <li> "Note.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Filter
//  - GUID
func (p *NoteStoreClient) FindNoteOffset(authenticationToken string, filter *NoteFilter, guid types.GUID) (r int32, err error) {
	if err = p.sendFindNoteOffset(authenticationToken, filter, guid); err != nil {
		return
	}
	return p.recvFindNoteOffset()
}

func (p *NoteStoreClient) sendFindNoteOffset(authenticationToken string, filter *NoteFilter, guid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findNoteOffset", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreFindNoteOffsetArgs{
		AuthenticationToken: authenticationToken,
		Filter:              filter,
		GUID:                guid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvFindNoteOffset() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "findNoteOffset" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "findNoteOffset failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findNoteOffset failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error79 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error80 error
		error80, err = error79.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error80
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "findNoteOffset failed: invalid message type")
		return
	}
	result := NoteStoreFindNoteOffsetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Used to find the high-level information about a set of the notes from a
// user's account based on various criteria specified via a NoteFilter object.
// <p/>
// Web applications that wish to periodically check for new content in a user's
// Evernote account should consider using webhooks instead of polling this API.
// See http://dev.evernote.com/documentation/cloud/chapters/polling_notification.php
// for more information.
//
// @param authenticationToken
//   Must be a valid token for the user's account unless the NoteFilter
//   'notebookGuid' is the GUID of a public notebook.
//
// @param filter
//   The list of criteria that will constrain the notes to be returned.
//
// @param offset
//   The numeric index of the first note to show within the sorted
//   results.  The numbering scheme starts with "0".  This can be used for
//   pagination.
//
// @param maxNotes
//   The mximum notes to return in this query.  The service will return a set
//   of notes that is no larger than this number, but may return fewer notes
//   if needed.  The NoteList.totalNotes field in the return value will
//   indicate whether there are more values available after the returned set.
//
// @param resultSpec
//   This specifies which information should be returned for each matching
//   Note. The fields on this structure can be used to eliminate data that
//   the client doesn't need, which will reduce the time and bandwidth
//   to receive and process the reply.
//
// @return
//   The list of notes that match the criteria.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "offset" - not between 0 and EDAM_USER_NOTES_MAX
//   </li>
//   <li> BAD_DATA_FORMAT "maxNotes" - not between 0 and EDAM_USER_NOTES_MAX
//   </li>
//   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
//   </li>
//   <li> BAD_DATA_FORMAT "NoteFilter.tagGuids" - if any are malformed
//   </li>
//   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Notebook.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Filter
//  - Offset
//  - MaxNotes
//  - ResultSpec
func (p *NoteStoreClient) FindNotesMetadata(authenticationToken string, filter *NoteFilter, offset int32, maxNotes int32, resultSpec *NotesMetadataResultSpec) (r *NotesMetadataList, err error) {
	if err = p.sendFindNotesMetadata(authenticationToken, filter, offset, maxNotes, resultSpec); err != nil {
		return
	}
	return p.recvFindNotesMetadata()
}

func (p *NoteStoreClient) sendFindNotesMetadata(authenticationToken string, filter *NoteFilter, offset int32, maxNotes int32, resultSpec *NotesMetadataResultSpec) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findNotesMetadata", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreFindNotesMetadataArgs{
		AuthenticationToken: authenticationToken,
		Filter:              filter,
		Offset:              offset,
		MaxNotes:            maxNotes,
		ResultSpec:          resultSpec,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvFindNotesMetadata() (value *NotesMetadataList, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "findNotesMetadata" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "findNotesMetadata failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findNotesMetadata failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error81 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error82 error
		error82, err = error81.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error82
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "findNotesMetadata failed: invalid message type")
		return
	}
	result := NoteStoreFindNotesMetadataResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// This function is used to determine how many notes are found for each
// notebook and tag in the user's account, given a current set of filter
// parameters that determine the current selection.  This function will
// return a structure that gives the note count for each notebook and tag
// that has at least one note under the requested filter.  Any notebook or
// tag that has zero notes in the filtered set will not be listed in the
// reply to this function (so they can be assumed to be 0).
//
// @param authenticationToken
//   Must be a valid token for the user's account unless the NoteFilter
//   'notebookGuid' is the GUID of a public notebook.
//
// @param filter
//   The note selection filter that is currently being applied.  The note
//   counts are to be calculated with this filter applied to the total set
//   of notes in the user's account.
//
// @param withTrash
//   If true, then the NoteCollectionCounts.trashCount will be calculated
//   and supplied in the reply. Otherwise, the trash value will be omitted.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
//   </li>
//   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuids" - if any are malformed
//   </li>
//   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
//   </li>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Notebook.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Filter
//  - WithTrash
func (p *NoteStoreClient) FindNoteCounts(authenticationToken string, filter *NoteFilter, withTrash bool) (r *NoteCollectionCounts, err error) {
	if err = p.sendFindNoteCounts(authenticationToken, filter, withTrash); err != nil {
		return
	}
	return p.recvFindNoteCounts()
}

func (p *NoteStoreClient) sendFindNoteCounts(authenticationToken string, filter *NoteFilter, withTrash bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findNoteCounts", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreFindNoteCountsArgs{
		AuthenticationToken: authenticationToken,
		Filter:              filter,
		WithTrash:           withTrash,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvFindNoteCounts() (value *NoteCollectionCounts, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "findNoteCounts" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "findNoteCounts failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findNoteCounts failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error83 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error84 error
		error84, err = error83.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error84
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "findNoteCounts failed: invalid message type")
		return
	}
	result := NoteStoreFindNoteCountsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Returns the current state of the note in the service with the provided
// GUID.  The ENML contents of the note will only be provided if the
// 'withContent' parameter is true.  The service will include the meta-data
// for each resource in the note, but the binary contents of the resources
// and their recognition data will be omitted.
// If the Note is found in a public notebook, the authenticationToken
// will be ignored (so it could be an empty string).  The applicationData
// fields are returned as keysOnly.
//
// @param guid
//   The GUID of the note to be retrieved.
//
// @param withContent
//   If true, the note will include the ENML contents of its
//   'content' field.
//
// @param withResourcesData
//   If true, any Resource elements in this Note will include the binary
//   contents of their 'data' field's body.
//
// @param withResourcesRecognition
//   If true, any Resource elements will include the binary contents of the
//   'recognition' field's body if recognition data is present.
//
// @param withResourcesAlternateData
//   If true, any Resource elements in this Note will include the binary
//   contents of their 'alternateData' fields' body, if an alternate form
//   is present.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - GUID
//  - WithContent
//  - WithResourcesData
//  - WithResourcesRecognition
//  - WithResourcesAlternateData
func (p *NoteStoreClient) GetNote(authenticationToken string, guid types.GUID, withContent bool, withResourcesData bool, withResourcesRecognition bool, withResourcesAlternateData bool) (r *types.Note, err error) {
	if err = p.sendGetNote(authenticationToken, guid, withContent, withResourcesData, withResourcesRecognition, withResourcesAlternateData); err != nil {
		return
	}
	return p.recvGetNote()
}

func (p *NoteStoreClient) sendGetNote(authenticationToken string, guid types.GUID, withContent bool, withResourcesData bool, withResourcesRecognition bool, withResourcesAlternateData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getNote", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetNoteArgs{
		AuthenticationToken:        authenticationToken,
		GUID:                       guid,
		WithContent:                withContent,
		WithResourcesData:          withResourcesData,
		WithResourcesRecognition:   withResourcesRecognition,
		WithResourcesAlternateData: withResourcesAlternateData,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetNote() (value *types.Note, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getNote" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getNote failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getNote failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error85 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error86 error
		error86, err = error85.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error86
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getNote failed: invalid message type")
		return
	}
	result := NoteStoreGetNoteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Get all of the application data for the note identified by GUID,
// with values returned within the LazyMap fullMap field.
// If there are no applicationData entries, then a LazyMap
// with an empty fullMap will be returned. If your application
// only needs to fetch its own applicationData entry, use
// getNoteApplicationDataEntry instead.
//
// Parameters:
//  - AuthenticationToken
//  - GUID
func (p *NoteStoreClient) GetNoteApplicationData(authenticationToken string, guid types.GUID) (r *types.LazyMap, err error) {
	if err = p.sendGetNoteApplicationData(authenticationToken, guid); err != nil {
		return
	}
	return p.recvGetNoteApplicationData()
}

func (p *NoteStoreClient) sendGetNoteApplicationData(authenticationToken string, guid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getNoteApplicationData", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetNoteApplicationDataArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetNoteApplicationData() (value *types.LazyMap, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getNoteApplicationData" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getNoteApplicationData failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getNoteApplicationData failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error87 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error88 error
		error88, err = error87.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error88
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getNoteApplicationData failed: invalid message type")
		return
	}
	result := NoteStoreGetNoteApplicationDataResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Get the value of a single entry in the applicationData map
// for the note identified by GUID.
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - note not found, by GUID</li>
//   <li> "NoteAttributes.applicationData.key" - note not found, by key</li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - GUID
//  - Key
func (p *NoteStoreClient) GetNoteApplicationDataEntry(authenticationToken string, guid types.GUID, key string) (r string, err error) {
	if err = p.sendGetNoteApplicationDataEntry(authenticationToken, guid, key); err != nil {
		return
	}
	return p.recvGetNoteApplicationDataEntry()
}

func (p *NoteStoreClient) sendGetNoteApplicationDataEntry(authenticationToken string, guid types.GUID, key string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getNoteApplicationDataEntry", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetNoteApplicationDataEntryArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
		Key:                 key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetNoteApplicationDataEntry() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getNoteApplicationDataEntry" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getNoteApplicationDataEntry failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getNoteApplicationDataEntry failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error89 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error90 error
		error90, err = error89.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error90
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getNoteApplicationDataEntry failed: invalid message type")
		return
	}
	result := NoteStoreGetNoteApplicationDataEntryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Update, or create, an entry in the applicationData map for
// the note identified by guid.
//
// Parameters:
//  - AuthenticationToken
//  - GUID
//  - Key
//  - Value
func (p *NoteStoreClient) SetNoteApplicationDataEntry(authenticationToken string, guid types.GUID, key string, value string) (r int32, err error) {
	if err = p.sendSetNoteApplicationDataEntry(authenticationToken, guid, key, value); err != nil {
		return
	}
	return p.recvSetNoteApplicationDataEntry()
}

func (p *NoteStoreClient) sendSetNoteApplicationDataEntry(authenticationToken string, guid types.GUID, key string, value string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setNoteApplicationDataEntry", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreSetNoteApplicationDataEntryArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
		Key:                 key,
		Value:               value,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvSetNoteApplicationDataEntry() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "setNoteApplicationDataEntry" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setNoteApplicationDataEntry failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setNoteApplicationDataEntry failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error91 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error92 error
		error92, err = error91.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error92
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setNoteApplicationDataEntry failed: invalid message type")
		return
	}
	result := NoteStoreSetNoteApplicationDataEntryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Remove an entry identified by 'key' from the applicationData map for
// the note identified by 'guid'. Silently ignores an unset of a
// non-existing key.
//
// Parameters:
//  - AuthenticationToken
//  - GUID
//  - Key
func (p *NoteStoreClient) UnsetNoteApplicationDataEntry(authenticationToken string, guid types.GUID, key string) (r int32, err error) {
	if err = p.sendUnsetNoteApplicationDataEntry(authenticationToken, guid, key); err != nil {
		return
	}
	return p.recvUnsetNoteApplicationDataEntry()
}

func (p *NoteStoreClient) sendUnsetNoteApplicationDataEntry(authenticationToken string, guid types.GUID, key string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("unsetNoteApplicationDataEntry", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreUnsetNoteApplicationDataEntryArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
		Key:                 key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvUnsetNoteApplicationDataEntry() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "unsetNoteApplicationDataEntry" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "unsetNoteApplicationDataEntry failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "unsetNoteApplicationDataEntry failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error93 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error94 error
		error94, err = error93.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error94
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "unsetNoteApplicationDataEntry failed: invalid message type")
		return
	}
	result := NoteStoreUnsetNoteApplicationDataEntryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Returns XHTML contents of the note with the provided GUID.
// If the Note is found in a public notebook, the authenticationToken
// will be ignored (so it could be an empty string).
//
// @param guid
//   The GUID of the note to be retrieved.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - GUID
func (p *NoteStoreClient) GetNoteContent(authenticationToken string, guid types.GUID) (r string, err error) {
	if err = p.sendGetNoteContent(authenticationToken, guid); err != nil {
		return
	}
	return p.recvGetNoteContent()
}

func (p *NoteStoreClient) sendGetNoteContent(authenticationToken string, guid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getNoteContent", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetNoteContentArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetNoteContent() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getNoteContent" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getNoteContent failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getNoteContent failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error95 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error96 error
		error96, err = error95.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error96
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getNoteContent failed: invalid message type")
		return
	}
	result := NoteStoreGetNoteContentResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Returns a block of the extracted plain text contents of the note with the
// provided GUID.  This text can be indexed for search purposes by a light
// client that doesn't have capabilities to extract all of the searchable
// text content from the note and its resources.
//
// If the Note is found in a public notebook, the authenticationToken
// will be ignored (so it could be an empty string).
//
// @param guid
//   The GUID of the note to be retrieved.
//
// @param noteOnly
//   If true, this will only return the text extracted from the ENML contents
//   of the note itself.  If false, this will also include the extracted text
//   from any text-bearing resources (PDF, recognized images)
//
// @param tokenizeForIndexing
//   If true, this will break the text into cleanly separated and sanitized
//   tokens.  If false, this will return the more raw text extraction, with
//   its original punctuation, capitalization, spacing, etc.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - GUID
//  - NoteOnly
//  - TokenizeForIndexing
func (p *NoteStoreClient) GetNoteSearchText(authenticationToken string, guid types.GUID, noteOnly bool, tokenizeForIndexing bool) (r string, err error) {
	if err = p.sendGetNoteSearchText(authenticationToken, guid, noteOnly, tokenizeForIndexing); err != nil {
		return
	}
	return p.recvGetNoteSearchText()
}

func (p *NoteStoreClient) sendGetNoteSearchText(authenticationToken string, guid types.GUID, noteOnly bool, tokenizeForIndexing bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getNoteSearchText", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetNoteSearchTextArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
		NoteOnly:            noteOnly,
		TokenizeForIndexing: tokenizeForIndexing,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetNoteSearchText() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getNoteSearchText" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getNoteSearchText failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getNoteSearchText failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error97 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error98 error
		error98, err = error97.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error98
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getNoteSearchText failed: invalid message type")
		return
	}
	result := NoteStoreGetNoteSearchTextResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Returns a block of the extracted plain text contents of the resource with
// the provided GUID.  This text can be indexed for search purposes by a light
// client that doesn't have capability to extract all of the searchable
// text content from a resource.
//
// If the Resource is found in a public notebook, the authenticationToken
// will be ignored (so it could be an empty string).
//
// @param guid
//   The GUID of the resource to be retrieved.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Resource.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - GUID
func (p *NoteStoreClient) GetResourceSearchText(authenticationToken string, guid types.GUID) (r string, err error) {
	if err = p.sendGetResourceSearchText(authenticationToken, guid); err != nil {
		return
	}
	return p.recvGetResourceSearchText()
}

func (p *NoteStoreClient) sendGetResourceSearchText(authenticationToken string, guid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getResourceSearchText", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetResourceSearchTextArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetResourceSearchText() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getResourceSearchText" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getResourceSearchText failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getResourceSearchText failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error99 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error100 error
		error100, err = error99.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error100
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getResourceSearchText failed: invalid message type")
		return
	}
	result := NoteStoreGetResourceSearchTextResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Returns a list of the names of the tags for the note with the provided
// guid.  This can be used with authentication to get the tags for a
// user's own note, or can be used without valid authentication to retrieve
// the names of the tags for a note in a public notebook.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - GUID
func (p *NoteStoreClient) GetNoteTagNames(authenticationToken string, guid types.GUID) (r []string, err error) {
	if err = p.sendGetNoteTagNames(authenticationToken, guid); err != nil {
		return
	}
	return p.recvGetNoteTagNames()
}

func (p *NoteStoreClient) sendGetNoteTagNames(authenticationToken string, guid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getNoteTagNames", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetNoteTagNamesArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetNoteTagNames() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getNoteTagNames" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getNoteTagNames failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getNoteTagNames failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error101 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error102 error
		error102, err = error101.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error102
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getNoteTagNames failed: invalid message type")
		return
	}
	result := NoteStoreGetNoteTagNamesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Asks the service to make a note with the provided set of information.
//
// @param note
//   A Note object containing the desired fields to be populated on
//   the service.
//
// @return
//   The newly created Note from the service.  The server-side
//   GUIDs for the Note and any Resources will be saved in this object.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Note.title" - invalid length or pattern
//   </li>
//   <li> BAD_DATA_FORMAT "Note.content" - invalid length for ENML content
//   </li>
//   <li> BAD_DATA_FORMAT "Resource.mime" - invalid resource MIME type
//   </li>
//   <li> BAD_DATA_FORMAT "NoteAttributes.*" - bad resource string
//   </li>
//   <li> BAD_DATA_FORMAT "ResourceAttributes.*" - bad resource string
//   </li>
//   <li> DATA_CONFLICT "Note.deleted" - deleted time set on active note
//   </li>
//   <li> DATA_REQUIRED "Resource.data" - resource data body missing
//   </li>
//   <li> ENML_VALIDATION "*" - note content doesn't validate against DTD
//   </li>
//   <li> LIMIT_REACHED "Note" - at max number per account
//   </li>
//   <li> LIMIT_REACHED "Note.size" - total note size too large
//   </li>
//   <li> LIMIT_REACHED "Note.resources" - too many resources on Note
//   </li>
//   <li> LIMIT_REACHED "Note.tagGuids" - too many Tags on Note
//   </li>
//   <li> LIMIT_REACHED "Resource.data.size" - resource too large
//   </li>
//   <li> LIMIT_REACHED "NoteAttribute.*" - attribute string too long
//   </li>
//   <li> LIMIT_REACHED "ResourceAttribute.*" - attribute string too long
//   </li>
//   <li> PERMISSION_DENIED "Note.notebookGuid" - NB not owned by user
//   </li>
//   <li> QUOTA_REACHED "Accounting.uploadLimit" - note exceeds upload quota
//   </li>
//   <li> BAD_DATA_FORMAT "Tag.name" - Note.tagNames was provided, and one
//     of the specified tags had an invalid length or pattern
//   </li>
//   <li> LIMIT_REACHED "Tag" - Note.tagNames was provided, and the required
//     new tags would exceed the maximum number per account
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.notebookGuid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Note
func (p *NoteStoreClient) CreateNote(authenticationToken string, note *types.Note) (r *types.Note, err error) {
	if err = p.sendCreateNote(authenticationToken, note); err != nil {
		return
	}
	return p.recvCreateNote()
}

func (p *NoteStoreClient) sendCreateNote(authenticationToken string, note *types.Note) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createNote", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreCreateNoteArgs{
		AuthenticationToken: authenticationToken,
		Note:                note,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvCreateNote() (value *types.Note, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createNote" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createNote failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createNote failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error103 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error104 error
		error104, err = error103.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error104
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createNote failed: invalid message type")
		return
	}
	result := NoteStoreCreateNoteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Submit a set of changes to a note to the service.  The provided data
// must include the note's guid field for identification. The note's
// title must also be set.
//
// @param note
//   A Note object containing the desired fields to be populated on
//   the service. With the exception of the note's title and guid, fields
//   that are not being changed do not need to be set. If the content is not
//   being modified, note.content should be left unset. If the list of
//   resources is not being modified, note.resources should be left unset.
//
// @return
//   The metadata (no contents) for the Note on the server after the update
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Note.title" - invalid length or pattern
//   </li>
//   <li> BAD_DATA_FORMAT "Note.content" - invalid length for ENML body
//   </li>
//   <li> BAD_DATA_FORMAT "NoteAttributes.*" - bad resource string
//   </li>
//   <li> BAD_DATA_FORMAT "ResourceAttributes.*" - bad resource string
//   </li>
//   <li> BAD_DATA_FORMAT "Resource.mime" - invalid resource MIME type
//   </li>
//   <li> DATA_CONFLICT "Note.deleted" - deleted time set on active note
//   </li>
//   <li> DATA_REQUIRED "Resource.data" - resource data body missing
//   </li>
//   <li> ENML_VALIDATION "*" - note content doesn't validate against DTD
//   </li>
//   <li> LIMIT_REACHED "Note.tagGuids" - too many Tags on Note
//   </li>
//   <li> LIMIT_REACHED "Note.resources" - too many resources on Note
//   </li>
//   <li> LIMIT_REACHED "Note.size" - total note size too large
//   </li>
//   <li> LIMIT_REACHED "Resource.data.size" - resource too large
//   </li>
//   <li> LIMIT_REACHED "NoteAttribute.*" - attribute string too long
//   </li>
//   <li> LIMIT_REACHED "ResourceAttribute.*" - attribute string too long
//   </li>
//   <li> PERMISSION_DENIED "Note" - user doesn't own
//   </li>
//   <li> PERMISSION_DENIED "Note.notebookGuid" - user doesn't own destination
//   </li>
//   <li> QUOTA_REACHED "Accounting.uploadLimit" - note exceeds upload quota
//   </li>
//   <li> BAD_DATA_FORMAT "Tag.name" - Note.tagNames was provided, and one
//     of the specified tags had an invalid length or pattern
//   </li>
//   <li> LIMIT_REACHED "Tag" - Note.tagNames was provided, and the required
//     new tags would exceed the maximum number per account
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - note not found, by GUID
//   </li>
//   <li> "Note.notebookGuid" - if notebookGuid provided, but not found
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Note
func (p *NoteStoreClient) UpdateNote(authenticationToken string, note *types.Note) (r *types.Note, err error) {
	if err = p.sendUpdateNote(authenticationToken, note); err != nil {
		return
	}
	return p.recvUpdateNote()
}

func (p *NoteStoreClient) sendUpdateNote(authenticationToken string, note *types.Note) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateNote", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreUpdateNoteArgs{
		AuthenticationToken: authenticationToken,
		Note:                note,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvUpdateNote() (value *types.Note, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateNote" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateNote failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateNote failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error105 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error106 error
		error106, err = error105.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error106
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateNote failed: invalid message type")
		return
	}
	result := NoteStoreUpdateNoteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Moves the note into the trash. The note may still be undeleted, unless it
// is expunged.  This is equivalent to calling updateNote() after setting
// Note.active = false
//
// @param guid
//   The GUID of the note to delete.
//
// @return
//   The Update Sequence Number for this change within the account.
//
// @throws EDAMUserException <ul>
//   <li> PERMISSION_DENIED "Note" - user doesn't have permission to
//          update the note.
//   </li>
// </ul>
//
// @throws EDAMUserException <ul>
//   <li> DATA_CONFLICT "Note.guid" - the note is already deleted
//   </li>
// </ul>
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - GUID
func (p *NoteStoreClient) DeleteNote(authenticationToken string, guid types.GUID) (r int32, err error) {
	if err = p.sendDeleteNote(authenticationToken, guid); err != nil {
		return
	}
	return p.recvDeleteNote()
}

func (p *NoteStoreClient) sendDeleteNote(authenticationToken string, guid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteNote", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreDeleteNoteArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvDeleteNote() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "deleteNote" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteNote failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteNote failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error107 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error108 error
		error108, err = error107.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error108
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteNote failed: invalid message type")
		return
	}
	result := NoteStoreDeleteNoteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Permanently removes a Note, and all of its Resources,
// from the service.
// <p/>
// NOTE: This function is not available to third party applications.
// Calls will result in an EDAMUserException with the error code
// PERMISSION_DENIED.
//
// @param guid
//   The GUID of the note to delete.
//
// @return
//   The Update Sequence Number for this change within the account.
//
// @throws EDAMUserException <ul>
//   <li> PERMISSION_DENIED "Note" - user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - GUID
func (p *NoteStoreClient) ExpungeNote(authenticationToken string, guid types.GUID) (r int32, err error) {
	if err = p.sendExpungeNote(authenticationToken, guid); err != nil {
		return
	}
	return p.recvExpungeNote()
}

func (p *NoteStoreClient) sendExpungeNote(authenticationToken string, guid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("expungeNote", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreExpungeNoteArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvExpungeNote() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "expungeNote" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "expungeNote failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "expungeNote failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error109 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error110 error
		error110, err = error109.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error110
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "expungeNote failed: invalid message type")
		return
	}
	result := NoteStoreExpungeNoteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Permanently removes a list of Notes, and all of their Resources, from
// the service.  This should be invoked with a small number of Note GUIDs
// (e.g. 100 or less) on each call.  To expunge a larger number of notes,
// call this method multiple times.  This should also be used to reduce the
// number of Notes in a notebook before calling expungeNotebook() or
// in the trash before calling expungeInactiveNotes(), since these calls may
// be prohibitively slow if there are more than a few hundred notes.
// If an exception is thrown for any of the GUIDs, then none of the notes
// will be deleted.  I.e. this call can be treated as an atomic transaction.
// <p/>
// NOTE: This function is not available to third party applications.
// Calls will result in an EDAMUserException with the error code
// PERMISSION_DENIED.
//
// @param noteGuids
//   The list of GUIDs for the Notes to remove.
//
// @return
//   The account's updateCount at the end of this operation
//
// @throws EDAMUserException <ul>
//   <li> PERMISSION_DENIED "Note" - user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - NoteGuids
func (p *NoteStoreClient) ExpungeNotes(authenticationToken string, noteGuids []string) (r int32, err error) {
	if err = p.sendExpungeNotes(authenticationToken, noteGuids); err != nil {
		return
	}
	return p.recvExpungeNotes()
}

func (p *NoteStoreClient) sendExpungeNotes(authenticationToken string, noteGuids []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("expungeNotes", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreExpungeNotesArgs{
		AuthenticationToken: authenticationToken,
		NoteGuids:           noteGuids,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvExpungeNotes() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "expungeNotes" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "expungeNotes failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "expungeNotes failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error111 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error112 error
		error112, err = error111.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error112
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "expungeNotes failed: invalid message type")
		return
	}
	result := NoteStoreExpungeNotesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Permanently removes all of the Notes that are currently marked as
// inactive.  This is equivalent to "emptying the trash", and these Notes
// will be gone permanently.
// <p/>
// This operation may be relatively slow if the account contains a large
// number of inactive Notes.
// <p/>
// NOTE: This function is not available to third party applications.
// Calls will result in an EDAMUserException with the error code
// PERMISSION_DENIED.
//
// @return
//    The number of notes that were expunged.
//
// Parameters:
//  - AuthenticationToken
func (p *NoteStoreClient) ExpungeInactiveNotes(authenticationToken string) (r int32, err error) {
	if err = p.sendExpungeInactiveNotes(authenticationToken); err != nil {
		return
	}
	return p.recvExpungeInactiveNotes()
}

func (p *NoteStoreClient) sendExpungeInactiveNotes(authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("expungeInactiveNotes", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreExpungeInactiveNotesArgs{
		AuthenticationToken: authenticationToken,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvExpungeInactiveNotes() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "expungeInactiveNotes" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "expungeInactiveNotes failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "expungeInactiveNotes failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error113 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error114 error
		error114, err = error113.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error114
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "expungeInactiveNotes failed: invalid message type")
		return
	}
	result := NoteStoreExpungeInactiveNotesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// Performs a deep copy of the Note with the provided GUID 'noteGuid' into
// the Notebook with the provided GUID 'toNotebookGuid'.
// The caller must be the owner of both the Note and the Notebook.
// This creates a new Note in the destination Notebook with new content and
// Resources that match all of the content and Resources from the original
// Note, but with new GUID identifiers.
// The original Note is not modified by this operation.
// The copied note is considered as an "upload" for the purpose of upload
// transfer limit calculation, so its size is added to the upload count for
// the owner.
//
// @param noteGuid
//   The GUID of the Note to copy.
//
// @param toNotebookGuid
//   The GUID of the Notebook that should receive the new Note.
//
// @return
//   The metadata for the new Note that was created.  This will include the
//   new GUID for this Note (and any copied Resources), but will not include
//   the content body or the binary bodies of any Resources.
//
// @throws EDAMUserException <ul>
//   <li> LIMIT_REACHED "Note" - at max number per account
//   </li>
//   <li> PERMISSION_DENIED "Notebook.guid" - destination not owned by user
//   </li>
//   <li> PERMISSION_DENIED "Note" - user doesn't own
//   </li>
//   <li> QUOTA_REACHED "Accounting.uploadLimit" - note exceeds upload quota
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Notebook.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - NoteGuid
//  - ToNotebookGuid
func (p *NoteStoreClient) CopyNote(authenticationToken string, noteGuid types.GUID, toNotebookGuid types.GUID) (r *types.Note, err error) {
	if err = p.sendCopyNote(authenticationToken, noteGuid, toNotebookGuid); err != nil {
		return
	}
	return p.recvCopyNote()
}

func (p *NoteStoreClient) sendCopyNote(authenticationToken string, noteGuid types.GUID, toNotebookGuid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("copyNote", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreCopyNoteArgs{
		AuthenticationToken: authenticationToken,
		NoteGuid:            noteGuid,
		ToNotebookGuid:      toNotebookGuid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvCopyNote() (value *types.Note, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "copyNote" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "copyNote failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "copyNote failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error115 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error116 error
		error116, err = error115.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error116
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "copyNote failed: invalid message type")
		return
	}
	result := NoteStoreCopyNoteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Returns a list of the prior versions of a particular note that are
// saved within the service.  These prior versions are stored to provide a
// recovery from unintentional removal of content from a note. The identifiers
// that are returned by this call can be used with getNoteVersion to retrieve
// the previous note.
// The identifiers will be listed from the most recent versions to the oldest.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - NoteGuid
func (p *NoteStoreClient) ListNoteVersions(authenticationToken string, noteGuid types.GUID) (r []*NoteVersionId, err error) {
	if err = p.sendListNoteVersions(authenticationToken, noteGuid); err != nil {
		return
	}
	return p.recvListNoteVersions()
}

func (p *NoteStoreClient) sendListNoteVersions(authenticationToken string, noteGuid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listNoteVersions", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreListNoteVersionsArgs{
		AuthenticationToken: authenticationToken,
		NoteGuid:            noteGuid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvListNoteVersions() (value []*NoteVersionId, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "listNoteVersions" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listNoteVersions failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listNoteVersions failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error117 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error118 error
		error118, err = error117.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error118
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listNoteVersions failed: invalid message type")
		return
	}
	result := NoteStoreListNoteVersionsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// This can be used to retrieve a previous version of a Note after it has been
// updated within the service.  The caller must identify the note (via its
// guid) and the version (via the updateSequenceNumber of that version).
// to find a listing of the stored version USNs for a note, call
// listNoteVersions.
// This call is only available for notes in Premium accounts.  (I.e. access
// to past versions of Notes is a Premium-only feature.)
//
// @param noteGuid
//   The GUID of the note to be retrieved.
//
// @param updateSequenceNum
//   The USN of the version of the note that is being retrieved
//
// @param withResourcesData
//   If true, any Resource elements in this Note will include the binary
//   contents of their 'data' field's body.
//
// @param withResourcesRecognition
//   If true, any Resource elements will include the binary contents of the
//   'recognition' field's body if recognition data is present.
//
// @param withResourcesAlternateData
//   If true, any Resource elements in this Note will include the binary
//   contents of their 'alternateData' fields' body, if an alternate form
//   is present.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
//   </li>
//   <li> PERMISSION_DENIED "updateSequenceNum" -
//     The account isn't permitted to access previous versions of notes.
//     (i.e. this is a Free account.)
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - not found, by GUID
//   </li>
//   <li> "Note.updateSequenceNumber" - the Note doesn't have a version with
//      the corresponding USN.
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - NoteGuid
//  - UpdateSequenceNum
//  - WithResourcesData
//  - WithResourcesRecognition
//  - WithResourcesAlternateData
func (p *NoteStoreClient) GetNoteVersion(authenticationToken string, noteGuid types.GUID, updateSequenceNum int32, withResourcesData bool, withResourcesRecognition bool, withResourcesAlternateData bool) (r *types.Note, err error) {
	if err = p.sendGetNoteVersion(authenticationToken, noteGuid, updateSequenceNum, withResourcesData, withResourcesRecognition, withResourcesAlternateData); err != nil {
		return
	}
	return p.recvGetNoteVersion()
}

func (p *NoteStoreClient) sendGetNoteVersion(authenticationToken string, noteGuid types.GUID, updateSequenceNum int32, withResourcesData bool, withResourcesRecognition bool, withResourcesAlternateData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getNoteVersion", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetNoteVersionArgs{
		AuthenticationToken:        authenticationToken,
		NoteGuid:                   noteGuid,
		UpdateSequenceNum:          updateSequenceNum,
		WithResourcesData:          withResourcesData,
		WithResourcesRecognition:   withResourcesRecognition,
		WithResourcesAlternateData: withResourcesAlternateData,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetNoteVersion() (value *types.Note, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getNoteVersion" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getNoteVersion failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getNoteVersion failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error119 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error120 error
		error120, err = error119.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error120
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getNoteVersion failed: invalid message type")
		return
	}
	result := NoteStoreGetNoteVersionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Returns the current state of the resource in the service with the
// provided GUID.
// If the Resource is found in a public notebook, the authenticationToken
// will be ignored (so it could be an empty string).  Only the
// keys for the applicationData will be returned.
//
// @param guid
//   The GUID of the resource to be retrieved.
//
// @param withData
//   If true, the Resource will include the binary contents of the
//   'data' field's body.
//
// @param withRecognition
//   If true, the Resource will include the binary contents of the
//   'recognition' field's body if recognition data is present.
//
// @param withAttributes
//   If true, the Resource will include the attributes
//
// @param withAlternateData
//   If true, the Resource will include the binary contents of the
//   'alternateData' field's body, if an alternate form is present.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Resource.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - GUID
//  - WithData
//  - WithRecognition
//  - WithAttributes
//  - WithAlternateData
func (p *NoteStoreClient) GetResource(authenticationToken string, guid types.GUID, withData bool, withRecognition bool, withAttributes bool, withAlternateData bool) (r *types.Resource, err error) {
	if err = p.sendGetResource(authenticationToken, guid, withData, withRecognition, withAttributes, withAlternateData); err != nil {
		return
	}
	return p.recvGetResource()
}

func (p *NoteStoreClient) sendGetResource(authenticationToken string, guid types.GUID, withData bool, withRecognition bool, withAttributes bool, withAlternateData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getResource", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetResourceArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
		WithData:            withData,
		WithRecognition:     withRecognition,
		WithAttributes:      withAttributes,
		WithAlternateData:   withAlternateData,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetResource() (value *types.Resource, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getResource" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getResource failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getResource failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error121 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error122 error
		error122, err = error121.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error122
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getResource failed: invalid message type")
		return
	}
	result := NoteStoreGetResourceResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Get all of the application data for the Resource identified by GUID,
// with values returned within the LazyMap fullMap field.
// If there are no applicationData entries, then a LazyMap
// with an empty fullMap will be returned. If your application
// only needs to fetch its own applicationData entry, use
// getResourceApplicationDataEntry instead.
//
// Parameters:
//  - AuthenticationToken
//  - GUID
func (p *NoteStoreClient) GetResourceApplicationData(authenticationToken string, guid types.GUID) (r *types.LazyMap, err error) {
	if err = p.sendGetResourceApplicationData(authenticationToken, guid); err != nil {
		return
	}
	return p.recvGetResourceApplicationData()
}

func (p *NoteStoreClient) sendGetResourceApplicationData(authenticationToken string, guid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getResourceApplicationData", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetResourceApplicationDataArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetResourceApplicationData() (value *types.LazyMap, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getResourceApplicationData" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getResourceApplicationData failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getResourceApplicationData failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error123 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error124 error
		error124, err = error123.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error124
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getResourceApplicationData failed: invalid message type")
		return
	}
	result := NoteStoreGetResourceApplicationDataResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Get the value of a single entry in the applicationData map
// for the Resource identified by GUID.
//
// @throws EDAMNotFoundException <ul>
//   <li> "Resource.guid" - Resource not found, by GUID</li>
//   <li> "ResourceAttributes.applicationData.key" - Resource not found, by key</li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - GUID
//  - Key
func (p *NoteStoreClient) GetResourceApplicationDataEntry(authenticationToken string, guid types.GUID, key string) (r string, err error) {
	if err = p.sendGetResourceApplicationDataEntry(authenticationToken, guid, key); err != nil {
		return
	}
	return p.recvGetResourceApplicationDataEntry()
}

func (p *NoteStoreClient) sendGetResourceApplicationDataEntry(authenticationToken string, guid types.GUID, key string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getResourceApplicationDataEntry", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetResourceApplicationDataEntryArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
		Key:                 key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetResourceApplicationDataEntry() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getResourceApplicationDataEntry" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getResourceApplicationDataEntry failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getResourceApplicationDataEntry failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error125 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error126 error
		error126, err = error125.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error126
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getResourceApplicationDataEntry failed: invalid message type")
		return
	}
	result := NoteStoreGetResourceApplicationDataEntryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Update, or create, an entry in the applicationData map for
// the Resource identified by guid.
//
// Parameters:
//  - AuthenticationToken
//  - GUID
//  - Key
//  - Value
func (p *NoteStoreClient) SetResourceApplicationDataEntry(authenticationToken string, guid types.GUID, key string, value string) (r int32, err error) {
	if err = p.sendSetResourceApplicationDataEntry(authenticationToken, guid, key, value); err != nil {
		return
	}
	return p.recvSetResourceApplicationDataEntry()
}

func (p *NoteStoreClient) sendSetResourceApplicationDataEntry(authenticationToken string, guid types.GUID, key string, value string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setResourceApplicationDataEntry", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreSetResourceApplicationDataEntryArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
		Key:                 key,
		Value:               value,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvSetResourceApplicationDataEntry() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "setResourceApplicationDataEntry" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setResourceApplicationDataEntry failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setResourceApplicationDataEntry failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error127 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error128 error
		error128, err = error127.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error128
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setResourceApplicationDataEntry failed: invalid message type")
		return
	}
	result := NoteStoreSetResourceApplicationDataEntryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Remove an entry identified by 'key' from the applicationData map for
// the Resource identified by 'guid'.
//
// Parameters:
//  - AuthenticationToken
//  - GUID
//  - Key
func (p *NoteStoreClient) UnsetResourceApplicationDataEntry(authenticationToken string, guid types.GUID, key string) (r int32, err error) {
	if err = p.sendUnsetResourceApplicationDataEntry(authenticationToken, guid, key); err != nil {
		return
	}
	return p.recvUnsetResourceApplicationDataEntry()
}

func (p *NoteStoreClient) sendUnsetResourceApplicationDataEntry(authenticationToken string, guid types.GUID, key string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("unsetResourceApplicationDataEntry", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreUnsetResourceApplicationDataEntryArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
		Key:                 key,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvUnsetResourceApplicationDataEntry() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "unsetResourceApplicationDataEntry" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "unsetResourceApplicationDataEntry failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "unsetResourceApplicationDataEntry failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error129 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error130 error
		error130, err = error129.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error130
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "unsetResourceApplicationDataEntry failed: invalid message type")
		return
	}
	result := NoteStoreUnsetResourceApplicationDataEntryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Submit a set of changes to a resource to the service.  This can be used
// to update the meta-data about the resource, but cannot be used to change
// the binary contents of the resource (including the length and hash).  These
// cannot be changed directly without creating a new resource and removing the
// old one via updateNote.
//
// @param resource
//   A Resource object containing the desired fields to be populated on
//   the service.  The service will attempt to update the resource with the
//   following fields from the client:
//   <ul>
//      <li>guid:  must be provided to identify the resource
//      </li>
//      <li>mime
//      </li>
//      <li>width
//      </li>
//      <li>height
//      </li>
//      <li>duration
//      </li>
//      <li>attributes:  optional.  if present, the set of attributes will
//           be replaced.
//      </li>
//   </ul>
//
// @return
//   The Update Sequence Number of the resource after the changes have been
//   applied.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
//   </li>
//   <li> BAD_DATA_FORMAT "Resource.mime" - invalid resource MIME type
//   </li>
//   <li> BAD_DATA_FORMAT "ResourceAttributes.*" - bad resource string
//   </li>
//   <li> LIMIT_REACHED "ResourceAttribute.*" - attribute string too long
//   </li>
//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Resource.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Resource
func (p *NoteStoreClient) UpdateResource(authenticationToken string, resource *types.Resource) (r int32, err error) {
	if err = p.sendUpdateResource(authenticationToken, resource); err != nil {
		return
	}
	return p.recvUpdateResource()
}

func (p *NoteStoreClient) sendUpdateResource(authenticationToken string, resource *types.Resource) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateResource", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreUpdateResourceArgs{
		AuthenticationToken: authenticationToken,
		Resource:            resource,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvUpdateResource() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateResource" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateResource failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateResource failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error131 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error132 error
		error132, err = error131.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error132
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateResource failed: invalid message type")
		return
	}
	result := NoteStoreUpdateResourceResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Returns binary data of the resource with the provided GUID.  For
// example, if this were an image resource, this would contain the
// raw bits of the image.
// If the Resource is found in a public notebook, the authenticationToken
// will be ignored (so it could be an empty string).
//
// @param guid
//   The GUID of the resource to be retrieved.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Resource.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - GUID
func (p *NoteStoreClient) GetResourceData(authenticationToken string, guid types.GUID) (r []byte, err error) {
	if err = p.sendGetResourceData(authenticationToken, guid); err != nil {
		return
	}
	return p.recvGetResourceData()
}

func (p *NoteStoreClient) sendGetResourceData(authenticationToken string, guid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getResourceData", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetResourceDataArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetResourceData() (value []byte, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getResourceData" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getResourceData failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getResourceData failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error133 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error134 error
		error134, err = error133.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error134
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getResourceData failed: invalid message type")
		return
	}
	result := NoteStoreGetResourceDataResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Returns the current state of a resource, referenced by containing
// note GUID and resource content hash.
//
// @param noteGuid
//   The GUID of the note that holds the resource to be retrieved.
//
// @param contentHash
//   The MD5 checksum of the resource within that note. Note that
//   this is the binary checksum, for example from Resource.data.bodyHash,
//   and not the hex-encoded checksum that is used within an en-media
//   tag in a note body.
//
// @param withData
//   If true, the Resource will include the binary contents of the
//   'data' field's body.
//
// @param withRecognition
//   If true, the Resource will include the binary contents of the
//   'recognition' field's body.
//
// @param withAlternateData
//   If true, the Resource will include the binary contents of the
//   'alternateData' field's body, if an alternate form is present.
//
// @throws EDAMUserException <ul>
//   <li> DATA_REQUIRED "Note.guid" - noteGuid param missing
//   </li>
//   <li> DATA_REQUIRED "Note.contentHash" - contentHash param missing
//   </li>
//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note" - not found, by guid
//   </li>
//   <li> "Resource" - not found, by hash
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - NoteGuid
//  - ContentHash
//  - WithData
//  - WithRecognition
//  - WithAlternateData
func (p *NoteStoreClient) GetResourceByHash(authenticationToken string, noteGuid types.GUID, contentHash []byte, withData bool, withRecognition bool, withAlternateData bool) (r *types.Resource, err error) {
	if err = p.sendGetResourceByHash(authenticationToken, noteGuid, contentHash, withData, withRecognition, withAlternateData); err != nil {
		return
	}
	return p.recvGetResourceByHash()
}

func (p *NoteStoreClient) sendGetResourceByHash(authenticationToken string, noteGuid types.GUID, contentHash []byte, withData bool, withRecognition bool, withAlternateData bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getResourceByHash", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetResourceByHashArgs{
		AuthenticationToken: authenticationToken,
		NoteGuid:            noteGuid,
		ContentHash:         contentHash,
		WithData:            withData,
		WithRecognition:     withRecognition,
		WithAlternateData:   withAlternateData,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetResourceByHash() (value *types.Resource, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getResourceByHash" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getResourceByHash failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getResourceByHash failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error135 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error136 error
		error136, err = error135.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error136
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getResourceByHash failed: invalid message type")
		return
	}
	result := NoteStoreGetResourceByHashResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Returns the binary contents of the recognition index for the resource
// with the provided GUID.  If the caller asks about a resource that has
// no recognition data, this will throw EDAMNotFoundException.
// If the Resource is found in a public notebook, the authenticationToken
// will be ignored (so it could be an empty string).
//
// @param guid
//   The GUID of the resource whose recognition data should be retrieved.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Resource.guid" - not found, by GUID
//   </li>
//   <li> "Resource.recognition" - resource has no recognition
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - GUID
func (p *NoteStoreClient) GetResourceRecognition(authenticationToken string, guid types.GUID) (r []byte, err error) {
	if err = p.sendGetResourceRecognition(authenticationToken, guid); err != nil {
		return
	}
	return p.recvGetResourceRecognition()
}

func (p *NoteStoreClient) sendGetResourceRecognition(authenticationToken string, guid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getResourceRecognition", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetResourceRecognitionArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetResourceRecognition() (value []byte, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getResourceRecognition" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getResourceRecognition failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getResourceRecognition failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error137 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error138 error
		error138, err = error137.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error138
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getResourceRecognition failed: invalid message type")
		return
	}
	result := NoteStoreGetResourceRecognitionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// If the Resource with the provided GUID has an alternate data representation
// (indicated via the Resource.alternateData field), then this request can
// be used to retrieve the binary contents of that alternate data file.
// If the caller asks about a resource that has no alternate data form, this
// will throw EDAMNotFoundException.
//
// @param guid
//    The GUID of the resource whose recognition data should be retrieved.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Resource.guid" - not found, by GUID
//   </li>
//   <li> "Resource.alternateData" - resource has no recognition
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - GUID
func (p *NoteStoreClient) GetResourceAlternateData(authenticationToken string, guid types.GUID) (r []byte, err error) {
	if err = p.sendGetResourceAlternateData(authenticationToken, guid); err != nil {
		return
	}
	return p.recvGetResourceAlternateData()
}

func (p *NoteStoreClient) sendGetResourceAlternateData(authenticationToken string, guid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getResourceAlternateData", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetResourceAlternateDataArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetResourceAlternateData() (value []byte, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getResourceAlternateData" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getResourceAlternateData failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getResourceAlternateData failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error139 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error140 error
		error140, err = error139.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error140
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getResourceAlternateData failed: invalid message type")
		return
	}
	result := NoteStoreGetResourceAlternateDataResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Returns the set of attributes for the Resource with the provided GUID.
// If the Resource is found in a public notebook, the authenticationToken
// will be ignored (so it could be an empty string).
//
// @param guid
//   The GUID of the resource whose attributes should be retrieved.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Resource.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Resource" - private resource, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Resource.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - GUID
func (p *NoteStoreClient) GetResourceAttributes(authenticationToken string, guid types.GUID) (r *types.ResourceAttributes, err error) {
	if err = p.sendGetResourceAttributes(authenticationToken, guid); err != nil {
		return
	}
	return p.recvGetResourceAttributes()
}

func (p *NoteStoreClient) sendGetResourceAttributes(authenticationToken string, guid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getResourceAttributes", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetResourceAttributesArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetResourceAttributes() (value *types.ResourceAttributes, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getResourceAttributes" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getResourceAttributes failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getResourceAttributes failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error141 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error142 error
		error142, err = error141.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error142
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getResourceAttributes failed: invalid message type")
		return
	}
	result := NoteStoreGetResourceAttributesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// <p>
// Looks for a user account with the provided userId on this NoteStore
// shard and determines whether that account contains a public notebook
// with the given URI.  If the account is not found, or no public notebook
// exists with this URI, this will throw an EDAMNotFoundException,
// otherwise this will return the information for that Notebook.
// </p>
// <p>
// If a notebook is visible on the web with a full URL like
// http://www.evernote.com/pub/sethdemo/api
// Then 'sethdemo' is the username that can be used to look up the userId,
// and 'api' is the publicUri.
// </p>
//
// @param userId
//    The numeric identifier for the user who owns the public notebook.
//    To find this value based on a username string, you can invoke
//    UserStore.getPublicUserInfo
//
// @param publicUri
//    The uri string for the public notebook, from Notebook.publishing.uri.
//
// @throws EDAMNotFoundException <ul>
//   <li>"Publishing.uri" - not found, by URI</li>
// </ul>
//
// @throws EDAMSystemException <ul>
//   <li> TAKEN_DOWN "PublicNotebook" - The specified public notebook is
//     taken down (for all requesters).</li>
//   <li> TAKEN_DOWN "Country" - The specified public notebook is taken
//     down for the requester because of an IP-based country lookup.</li>
// </ul>
//
// Parameters:
//  - UserId
//  - PublicUri
func (p *NoteStoreClient) GetPublicNotebook(userId types.UserID, publicUri string) (r *types.Notebook, err error) {
	if err = p.sendGetPublicNotebook(userId, publicUri); err != nil {
		return
	}
	return p.recvGetPublicNotebook()
}

func (p *NoteStoreClient) sendGetPublicNotebook(userId types.UserID, publicUri string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getPublicNotebook", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetPublicNotebookArgs{
		UserId:    userId,
		PublicUri: publicUri,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetPublicNotebook() (value *types.Notebook, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getPublicNotebook" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getPublicNotebook failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getPublicNotebook failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error143 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error144 error
		error144, err = error143.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error144
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getPublicNotebook failed: invalid message type")
		return
	}
	result := NoteStoreGetPublicNotebookResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

// Used to construct a shared notebook object. The constructed notebook will
// contain a "share key" which serve as a unique identifer and access token
// for a user to access the notebook of the shared notebook owner.
//
// @param sharedNotebook
//   A shared notebook object populated with the email address of the share
//   recipient, the notebook guid and the access permissions. All other
//   attributes of the shared object are ignored. The SharedNotebook.allowPreview
//   field must be explicitly set with either a true or false value.
//
// @return
//   The fully populated SharedNotebook object including the server assigned
//   share id and shareKey which can both be used to uniquely identify the
//   SharedNotebook.
//
// @throws EDAMUserException <ul>
//   <li>BAD_DATA_FORMAT "SharedNotebook.email" - if the email was not valid</li>
//   <li>BAD_DATA_FORMAT "requireLogin" - if the SharedNotebook.allowPreview field was
//       not set, and the SharedNotebook.requireLogin was also not set or was set to
//       false.</li>
//   <li>PERMISSION_DENIED "SharedNotebook.recipientSettings" - if
//       recipientSettings is set in the sharedNotebook.  Only the recipient
//       can set these values via the setSharedNotebookRecipientSettings
//       method.
//   </li>
//   </ul>
// @throws EDAMNotFoundException <ul>
//   <li>Notebook.guid - if the notebookGuid is not a valid GUID for the user.
//   </li>
//   </ul>
//
// Parameters:
//  - AuthenticationToken
//  - SharedNotebook
func (p *NoteStoreClient) CreateSharedNotebook(authenticationToken string, sharedNotebook *types.SharedNotebook) (r *types.SharedNotebook, err error) {
	if err = p.sendCreateSharedNotebook(authenticationToken, sharedNotebook); err != nil {
		return
	}
	return p.recvCreateSharedNotebook()
}

func (p *NoteStoreClient) sendCreateSharedNotebook(authenticationToken string, sharedNotebook *types.SharedNotebook) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createSharedNotebook", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreCreateSharedNotebookArgs{
		AuthenticationToken: authenticationToken,
		SharedNotebook:      sharedNotebook,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvCreateSharedNotebook() (value *types.SharedNotebook, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createSharedNotebook" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createSharedNotebook failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createSharedNotebook failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error145 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error146 error
		error146, err = error145.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error146
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createSharedNotebook failed: invalid message type")
		return
	}
	result := NoteStoreCreateSharedNotebookResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// Update a SharedNotebook object.
//
// @param authenticationToken
//   Must be an authentication token from the owner or a shared notebook
//   authentication token or business authentication token with sufficient
//   permissions to change invitations for a notebook.
//
// @param sharedNotebook
//  The SharedNotebook object containing the requested changes.
//  The "id" of the shared notebook must be set to allow the service
//  to identify the SharedNotebook to be updated. In addition, you MUST set
//  the email, permission, and allowPreview fields to the desired values.
//  All other fields will be ignored if set.
//
// @return
//  The Update Serial Number for this change within the account.
//
// @throws EDAMUserException <ul>
//   <li>UNSUPPORTED_OPERATION "updateSharedNotebook" - if this service instance does not support shared notebooks.</li>
//   <li>BAD_DATA_FORMAT "SharedNotebook.email" - if the email was not valid.</li>
//   <li>DATA_REQUIRED "SharedNotebook.id" - if the id field was not set.</li>
//   <li>DATA_REQUIRED "SharedNotebook.privilege" - if the privilege field was not set.</li>
//   <li>DATA_REQUIRED "SharedNotebook.allowPreview" - if the allowPreview field was not set.</li>
//   </ul>
// @throws EDAMNotFoundException <ul>
//   <li>SharedNotebook.id - if no shared notebook with the specified ID was found.
//   </ul>
//
// Parameters:
//  - AuthenticationToken
//  - SharedNotebook
func (p *NoteStoreClient) UpdateSharedNotebook(authenticationToken string, sharedNotebook *types.SharedNotebook) (r int32, err error) {
	if err = p.sendUpdateSharedNotebook(authenticationToken, sharedNotebook); err != nil {
		return
	}
	return p.recvUpdateSharedNotebook()
}

func (p *NoteStoreClient) sendUpdateSharedNotebook(authenticationToken string, sharedNotebook *types.SharedNotebook) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateSharedNotebook", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreUpdateSharedNotebookArgs{
		AuthenticationToken: authenticationToken,
		SharedNotebook:      sharedNotebook,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvUpdateSharedNotebook() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateSharedNotebook" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateSharedNotebook failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateSharedNotebook failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error147 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error148 error
		error148, err = error147.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error148
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateSharedNotebook failed: invalid message type")
		return
	}
	result := NoteStoreUpdateSharedNotebookResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// Set values for the recipient settings associated with a shared notebook.  Having
// update rights to the shared notebook record itself has no effect on this call;
// only the recipient of the shared notebook can can the recipient settings.
//
// If you do <i>not</i> wish to, or cannot, change one of the reminderNotifyEmail or
// reminderNotifyInApp fields, you must leave that field unset in recipientSettings.
// This method will skip that field for updates and leave the existing state as
// it is.
//
// @return The update sequence number of the account to which the shared notebook
//   belongs, which is the account from which we are sharing a notebook.
//
// @throws EDAMNotFoundException "sharedNotebookId" - Thrown if the service does not
//   have a shared notebook record for the sharedNotebookId on the given shard.  If you
//   receive this exception, it is probable that the shared notebook record has
//   been revoked or expired, or that you accessed the wrong shard.
//
// @throws EDAMUserException <ul>
//   <li>PEMISSION_DENIED "authenticationToken" - If you do not have permission to set
//       the recipient settings for the shared notebook.  Only the recipient has
//       permission to do this.
//   <li>DATA_CONFLICT "recipientSettings.reminderNotifyEmail" - Setting whether
//       or not you want to receive reminder e-mail notifications is possible on
//       a business notebook in the business to which the user belongs.  All
//       others can safely unset the reminderNotifyEmail field from the
//       recipientSettings parameter.
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - SharedNotebookId
//  - RecipientSettings
func (p *NoteStoreClient) SetSharedNotebookRecipientSettings(authenticationToken string, sharedNotebookId int64, recipientSettings *types.SharedNotebookRecipientSettings) (r int32, err error) {
	if err = p.sendSetSharedNotebookRecipientSettings(authenticationToken, sharedNotebookId, recipientSettings); err != nil {
		return
	}
	return p.recvSetSharedNotebookRecipientSettings()
}

func (p *NoteStoreClient) sendSetSharedNotebookRecipientSettings(authenticationToken string, sharedNotebookId int64, recipientSettings *types.SharedNotebookRecipientSettings) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setSharedNotebookRecipientSettings", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreSetSharedNotebookRecipientSettingsArgs{
		AuthenticationToken: authenticationToken,
		SharedNotebookId:    sharedNotebookId,
		RecipientSettings:   recipientSettings,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvSetSharedNotebookRecipientSettings() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "setSharedNotebookRecipientSettings" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setSharedNotebookRecipientSettings failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setSharedNotebookRecipientSettings failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error149 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error150 error
		error150, err = error149.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error150
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setSharedNotebookRecipientSettings failed: invalid message type")
		return
	}
	result := NoteStoreSetSharedNotebookRecipientSettingsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// Send a reminder message to some or all of the email addresses that a notebook has been
// shared with. The message includes the current link to view the notebook.
// @param authenticationToken
//   The auth token of the user with permissions to share the notebook
// @param notebookGuid
//   The guid of the shared notebook
// @param messageText
//  User provided text to include in the email
// @param recipients
//  The email addresses of the recipients. If this list is empty then all of the
//  users that the notebook has been shared with are emailed.
//  If an email address doesn't correspond to share invite members then that address
//  is ignored.
// @return
//  The number of messages sent
// @throws EDAMUserException <ul>
//   <li> LIMIT_REACHED "(recipients)" -
//     The email can't be sent because this would exceed the user's daily
//     email limit.
//   </li>
//   <li> PERMISSION_DENIED "Notebook.guid" - The user doesn't have permission to
//     send a message for the specified notebook.
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Notebook.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - NotebookGuid
//  - MessageText
//  - Recipients
func (p *NoteStoreClient) SendMessageToSharedNotebookMembers(authenticationToken string, notebookGuid types.GUID, messageText string, recipients []string) (r int32, err error) {
	if err = p.sendSendMessageToSharedNotebookMembers(authenticationToken, notebookGuid, messageText, recipients); err != nil {
		return
	}
	return p.recvSendMessageToSharedNotebookMembers()
}

func (p *NoteStoreClient) sendSendMessageToSharedNotebookMembers(authenticationToken string, notebookGuid types.GUID, messageText string, recipients []string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sendMessageToSharedNotebookMembers", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreSendMessageToSharedNotebookMembersArgs{
		AuthenticationToken: authenticationToken,
		NotebookGuid:        notebookGuid,
		MessageText:         messageText,
		Recipients:          recipients,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvSendMessageToSharedNotebookMembers() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sendMessageToSharedNotebookMembers" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "sendMessageToSharedNotebookMembers failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sendMessageToSharedNotebookMembers failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error151 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error152 error
		error152, err = error151.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error152
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sendMessageToSharedNotebookMembers failed: invalid message type")
		return
	}
	result := NoteStoreSendMessageToSharedNotebookMembersResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// Lists the collection of shared notebooks for all notebooks in the
// users account.
//
// @return
//  The list of all SharedNotebooks for the user
//
// Parameters:
//  - AuthenticationToken
func (p *NoteStoreClient) ListSharedNotebooks(authenticationToken string) (r []*types.SharedNotebook, err error) {
	if err = p.sendListSharedNotebooks(authenticationToken); err != nil {
		return
	}
	return p.recvListSharedNotebooks()
}

func (p *NoteStoreClient) sendListSharedNotebooks(authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listSharedNotebooks", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreListSharedNotebooksArgs{
		AuthenticationToken: authenticationToken,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvListSharedNotebooks() (value []*types.SharedNotebook, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "listSharedNotebooks" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listSharedNotebooks failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listSharedNotebooks failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error153 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error154 error
		error154, err = error153.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error154
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listSharedNotebooks failed: invalid message type")
		return
	}
	result := NoteStoreListSharedNotebooksResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// Expunges the SharedNotebooks in the user's account using the
// SharedNotebook.id as the identifier.
// <p/>
// NOTE: This function is generally not available to third party applications.
// Calls will result in an EDAMUserException with the error code
// PERMISSION_DENIED.
//
// @param
//   sharedNotebookIds - a list of ShardNotebook.id longs identifying the
//       objects to delete permanently.
//
// @return
//   The account's update sequence number.
//
// Parameters:
//  - AuthenticationToken
//  - SharedNotebookIds
func (p *NoteStoreClient) ExpungeSharedNotebooks(authenticationToken string, sharedNotebookIds []int64) (r int32, err error) {
	if err = p.sendExpungeSharedNotebooks(authenticationToken, sharedNotebookIds); err != nil {
		return
	}
	return p.recvExpungeSharedNotebooks()
}

func (p *NoteStoreClient) sendExpungeSharedNotebooks(authenticationToken string, sharedNotebookIds []int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("expungeSharedNotebooks", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreExpungeSharedNotebooksArgs{
		AuthenticationToken: authenticationToken,
		SharedNotebookIds:   sharedNotebookIds,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvExpungeSharedNotebooks() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "expungeSharedNotebooks" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "expungeSharedNotebooks failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "expungeSharedNotebooks failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error155 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error156 error
		error156, err = error155.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error156
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "expungeSharedNotebooks failed: invalid message type")
		return
	}
	result := NoteStoreExpungeSharedNotebooksResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// Asks the service to make a linked notebook with the provided name, username
// of the owner and identifiers provided. A linked notebook can be either a
// link to a public notebook or to a private shared notebook.
//
// @param linkedNotebook
//   The desired fields for the linked notebook must be provided on this
//   object.  The name of the linked notebook must be set. Either a username
//   uri or a shard id and share key must be provided otherwise a
//   EDAMUserException is thrown.
//
// @return
//   The newly created LinkedNotebook.  The server-side id will be
//   saved in this object's 'id' field.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "LinkedNotebook.name" - invalid length or pattern
//   </li>
//   <li> BAD_DATA_FORMAT "LinkedNotebook.username" - bad username format
//   </li>
//   <li> BAD_DATA_FORMAT "LinkedNotebook.uri" -
//     if public notebook set but bad uri
//   </li>
//   <li> BAD_DATA_FORMAT "LinkedNotebook.shareKey" -
//     if private notebook set but bad shareKey
//   </li>
//   <li> DATA_REQUIRED "LinkedNotebook.shardId" -
//     if private notebook but shard id not provided
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - LinkedNotebook
func (p *NoteStoreClient) CreateLinkedNotebook(authenticationToken string, linkedNotebook *types.LinkedNotebook) (r *types.LinkedNotebook, err error) {
	if err = p.sendCreateLinkedNotebook(authenticationToken, linkedNotebook); err != nil {
		return
	}
	return p.recvCreateLinkedNotebook()
}

func (p *NoteStoreClient) sendCreateLinkedNotebook(authenticationToken string, linkedNotebook *types.LinkedNotebook) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createLinkedNotebook", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreCreateLinkedNotebookArgs{
		AuthenticationToken: authenticationToken,
		LinkedNotebook:      linkedNotebook,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvCreateLinkedNotebook() (value *types.LinkedNotebook, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createLinkedNotebook" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createLinkedNotebook failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createLinkedNotebook failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error157 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error158 error
		error158, err = error157.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error158
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createLinkedNotebook failed: invalid message type")
		return
	}
	result := NoteStoreCreateLinkedNotebookResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// @param linkedNotebook
//   Updates the name of a linked notebook.
//
// @return
//   The Update Sequence Number for this change within the account.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "LinkedNotebook.name" - invalid length or pattern
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - LinkedNotebook
func (p *NoteStoreClient) UpdateLinkedNotebook(authenticationToken string, linkedNotebook *types.LinkedNotebook) (r int32, err error) {
	if err = p.sendUpdateLinkedNotebook(authenticationToken, linkedNotebook); err != nil {
		return
	}
	return p.recvUpdateLinkedNotebook()
}

func (p *NoteStoreClient) sendUpdateLinkedNotebook(authenticationToken string, linkedNotebook *types.LinkedNotebook) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateLinkedNotebook", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreUpdateLinkedNotebookArgs{
		AuthenticationToken: authenticationToken,
		LinkedNotebook:      linkedNotebook,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvUpdateLinkedNotebook() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateLinkedNotebook" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateLinkedNotebook failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateLinkedNotebook failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error159 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error160 error
		error160, err = error159.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error160
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateLinkedNotebook failed: invalid message type")
		return
	}
	result := NoteStoreUpdateLinkedNotebookResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// Returns a list of linked notebooks
//
// Parameters:
//  - AuthenticationToken
func (p *NoteStoreClient) ListLinkedNotebooks(authenticationToken string) (r []*types.LinkedNotebook, err error) {
	if err = p.sendListLinkedNotebooks(authenticationToken); err != nil {
		return
	}
	return p.recvListLinkedNotebooks()
}

func (p *NoteStoreClient) sendListLinkedNotebooks(authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listLinkedNotebooks", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreListLinkedNotebooksArgs{
		AuthenticationToken: authenticationToken,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvListLinkedNotebooks() (value []*types.LinkedNotebook, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "listLinkedNotebooks" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listLinkedNotebooks failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listLinkedNotebooks failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error161 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error162 error
		error162, err = error161.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error162
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listLinkedNotebooks failed: invalid message type")
		return
	}
	result := NoteStoreListLinkedNotebooksResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// Permanently expunges the linked notebook from the account.
// <p/>
// NOTE: This function is generally not available to third party applications.
// Calls will result in an EDAMUserException with the error code
// PERMISSION_DENIED.
//
// @param guid
//   The LinkedNotebook.guid field of the LinkedNotebook to permanently remove
//   from the account.
//
// Parameters:
//  - AuthenticationToken
//  - GUID
func (p *NoteStoreClient) ExpungeLinkedNotebook(authenticationToken string, guid types.GUID) (r int32, err error) {
	if err = p.sendExpungeLinkedNotebook(authenticationToken, guid); err != nil {
		return
	}
	return p.recvExpungeLinkedNotebook()
}

func (p *NoteStoreClient) sendExpungeLinkedNotebook(authenticationToken string, guid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("expungeLinkedNotebook", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreExpungeLinkedNotebookArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvExpungeLinkedNotebook() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "expungeLinkedNotebook" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "expungeLinkedNotebook failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "expungeLinkedNotebook failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error163 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error164 error
		error164, err = error163.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error164
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "expungeLinkedNotebook failed: invalid message type")
		return
	}
	result := NoteStoreExpungeLinkedNotebookResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// Asks the service to produce an authentication token that can be used to
// access the contents of a shared notebook from someone else's account.
// This authenticationToken can be used with the various other NoteStore
// calls to find and retrieve notes, and if the permissions in the shared
// notebook are sufficient, to make changes to the contents of the notebook.
//
// @param shareKey
//   The 'shareKey' identifier from the SharedNotebook that was granted to
//   some recipient.  This string internally encodes the notebook identifier
//   and a security signature.
//
// @param authenticationToken
//   If a non-empty string is provided, this is the full user-based
//   authentication token that identifies the user who is currently logged in
//   and trying to access the shared notebook.  This may be required if the
//   notebook was created with 'requireLogin'.
//   If this string is empty, the service will attempt to authenticate to the
//   shared notebook without any logged in user.
//
// @throws EDAMSystemException <ul>
//   <li> BAD_DATA_FORMAT "shareKey" - invalid shareKey string
//   </li>
//   <li> INVALID_AUTH "shareKey" - bad signature on shareKey string
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "SharedNotebook.id" - the shared notebook no longer exists
//   </li>
// </ul>
//
// @throws EDAMUserException <ul>
//   <li> DATA_REQUIRED "authenticationToken" - the share requires login, and
//          no valid authentication token was provided.
//   </li>
//   <li> PERMISSION_DENIED "SharedNotebook.username" - share requires login,
//          and another username has already been bound to this notebook.
//   </li>
// </ul>
//
// Parameters:
//  - ShareKey
//  - AuthenticationToken
func (p *NoteStoreClient) AuthenticateToSharedNotebook(shareKey string, authenticationToken string) (r *userstore.AuthenticationResult_, err error) {
	if err = p.sendAuthenticateToSharedNotebook(shareKey, authenticationToken); err != nil {
		return
	}
	return p.recvAuthenticateToSharedNotebook()
}

func (p *NoteStoreClient) sendAuthenticateToSharedNotebook(shareKey string, authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("authenticateToSharedNotebook", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreAuthenticateToSharedNotebookArgs{
		ShareKey:            shareKey,
		AuthenticationToken: authenticationToken,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvAuthenticateToSharedNotebook() (value *userstore.AuthenticationResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "authenticateToSharedNotebook" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "authenticateToSharedNotebook failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "authenticateToSharedNotebook failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error165 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error166 error
		error166, err = error165.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error166
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "authenticateToSharedNotebook failed: invalid message type")
		return
	}
	result := NoteStoreAuthenticateToSharedNotebookResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// This function is used to retrieve extended information about a shared
// notebook by a guest who has already authenticated to access that notebook.
// This requires an 'authenticationToken' parameter which should be the
// resut of a call to authenticateToSharedNotebook(...).
// I.e. this is the token that gives access to the particular shared notebook
// in someone else's account -- it's not the authenticationToken for the
// owner of the notebook itself.
//
// @param authenticationToken
//   Should be the authentication token retrieved from the reply of
//   authenticateToSharedNotebook(), proving access to a particular shared
//   notebook.
//
// @throws EDAMUserException <ul>
//   <li> PERMISSION_DENIED "authenticationToken" -
//          authentication token doesn't correspond to a valid shared notebook
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "SharedNotebook.id" - the shared notebook no longer exists
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
func (p *NoteStoreClient) GetSharedNotebookByAuth(authenticationToken string) (r *types.SharedNotebook, err error) {
	if err = p.sendGetSharedNotebookByAuth(authenticationToken); err != nil {
		return
	}
	return p.recvGetSharedNotebookByAuth()
}

func (p *NoteStoreClient) sendGetSharedNotebookByAuth(authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSharedNotebookByAuth", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreGetSharedNotebookByAuthArgs{
		AuthenticationToken: authenticationToken,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvGetSharedNotebookByAuth() (value *types.SharedNotebook, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getSharedNotebookByAuth" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSharedNotebookByAuth failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSharedNotebookByAuth failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error167 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error168 error
		error168, err = error167.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error168
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSharedNotebookByAuth failed: invalid message type")
		return
	}
	result := NoteStoreGetSharedNotebookByAuthResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// Attempts to send a single note to one or more email recipients.
// <p/>
// NOTE: This function is generally not available to third party applications.
// Calls will result in an EDAMUserException with the error code
// PERMISSION_DENIED.
//
// @param authenticationToken
//    The note will be sent as the user logged in via this token, using that
//    user's registered email address.  If the authenticated user doesn't
//    have permission to read that note, the emailing will fail.
//
// @param parameters
//    The note must be specified either by GUID (in which case it will be
//    sent using the existing data in the service), or else the full Note
//    must be passed to this call.  This also specifies the additional
//    email fields that will be used in the email.
//
// @throws EDAMUserException <ul>
//   <li> LIMIT_REACHED "NoteEmailParameters.toAddresses" -
//     The email can't be sent because this would exceed the user's daily
//     email limit.
//   </li>
//   <li> BAD_DATA_FORMAT "(email address)" -
//     email address malformed
//   </li>
//   <li> DATA_REQUIRED "NoteEmailParameters.toAddresses" -
//     if there are no To: or Cc: addresses provided.
//   </li>
//   <li> DATA_REQUIRED "Note.title" -
//     if the caller provides a Note parameter with no title
//   </li>
//   <li> DATA_REQUIRED "Note.content" -
//     if the caller provides a Note parameter with no content
//   </li>
//   <li> ENML_VALIDATION "*" - note content doesn't validate against DTD
//   </li>
//   <li> DATA_REQUIRED "NoteEmailParameters.note" -
//     if no guid or note provided
//   </li>
//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Parameters
func (p *NoteStoreClient) EmailNote(authenticationToken string, parameters *NoteEmailParameters) (err error) {
	if err = p.sendEmailNote(authenticationToken, parameters); err != nil {
		return
	}
	return p.recvEmailNote()
}

func (p *NoteStoreClient) sendEmailNote(authenticationToken string, parameters *NoteEmailParameters) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("emailNote", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreEmailNoteArgs{
		AuthenticationToken: authenticationToken,
		Parameters:          parameters,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvEmailNote() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "emailNote" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "emailNote failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "emailNote failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error169 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error170 error
		error170, err = error169.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error170
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "emailNote failed: invalid message type")
		return
	}
	result := NoteStoreEmailNoteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	return
}

// If this note is not already shared (via its own direct URL), then this
// will start sharing that note.
// This will return the secret "Note Key" for this note that
// can currently be used in conjunction with the Note's GUID to gain direct
// read-only access to the Note.
// If the note is already shared, then this won't make any changes to the
// note, and the existing "Note Key" will be returned.  The only way to change
// the Note Key for an existing note is to stopSharingNote first, and then
// call this function.
//
// @param guid
//   The GUID of the note to be shared.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - GUID
func (p *NoteStoreClient) ShareNote(authenticationToken string, guid types.GUID) (r string, err error) {
	if err = p.sendShareNote(authenticationToken, guid); err != nil {
		return
	}
	return p.recvShareNote()
}

func (p *NoteStoreClient) sendShareNote(authenticationToken string, guid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("shareNote", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreShareNoteArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvShareNote() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "shareNote" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "shareNote failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "shareNote failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error171 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error172 error
		error172, err = error171.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error172
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "shareNote failed: invalid message type")
		return
	}
	result := NoteStoreShareNoteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// If this note is not already shared then this will stop sharing that note
// and invalidate its "Note Key", so any existing URLs to access that Note
// will stop working.
// If the Note is not shared, then this function will do nothing.
//
// @param guid
//   The GUID of the note to be un-shared.
//
// @throws EDAMUserException <ul>
//   <li> BAD_DATA_FORMAT "Note.guid" - if the parameter is missing
//   </li>
//   <li> PERMISSION_DENIED "Note" - private note, user doesn't own
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "Note.guid" - not found, by GUID
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - GUID
func (p *NoteStoreClient) StopSharingNote(authenticationToken string, guid types.GUID) (err error) {
	if err = p.sendStopSharingNote(authenticationToken, guid); err != nil {
		return
	}
	return p.recvStopSharingNote()
}

func (p *NoteStoreClient) sendStopSharingNote(authenticationToken string, guid types.GUID) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("stopSharingNote", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreStopSharingNoteArgs{
		AuthenticationToken: authenticationToken,
		GUID:                guid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvStopSharingNote() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "stopSharingNote" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "stopSharingNote failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "stopSharingNote failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error173 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error174 error
		error174, err = error173.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error174
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "stopSharingNote failed: invalid message type")
		return
	}
	result := NoteStoreStopSharingNoteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	return
}

// Asks the service to produce an authentication token that can be used to
// access the contents of a single Note which was individually shared
// from someone's account.
// This authenticationToken can be used with the various other NoteStore
// calls to find and retrieve the Note and its directly-referenced children.
//
// @param guid
//   The GUID identifying this Note on this shard.
//
// @param noteKey
//   The 'noteKey' identifier from the Note that was originally created via
//   a call to shareNote() and then given to a recipient to access.
//
// @param authenticationToken
//   An optional authenticationToken that identifies the user accessing the
//   shared note. This parameter may be required to access some shared notes.
//
// @throws EDAMUserException <ul>
//   <li> PERMISSION_DENIED "Note" - the Note with that GUID is either not
//     shared, or the noteKey doesn't match the current key for this note
//   </li>
//   <li> PERMISSION_DENIED "authenticationToken" - an authentication token is
//     required to access this Note, but either no authentication token or a
//     "non-owner" authentication token was provided.
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li> "guid" - the note with that GUID is not found
//   </li>
// </ul>
//
// @throws EDAMSystemException <ul>
//   <li> TAKEN_DOWN "Note" - The specified shared note is taken down (for
//     all requesters).
//   </li>
//   <li> TAKEN_DOWN "Country" - The specified shared note is taken down
//     for the requester because of an IP-based country lookup.
//   </ul>
// </ul>
//
// Parameters:
//  - GUID
//  - NoteKey
//  - AuthenticationToken
func (p *NoteStoreClient) AuthenticateToSharedNote(guid string, noteKey string, authenticationToken string) (r *userstore.AuthenticationResult_, err error) {
	if err = p.sendAuthenticateToSharedNote(guid, noteKey, authenticationToken); err != nil {
		return
	}
	return p.recvAuthenticateToSharedNote()
}

func (p *NoteStoreClient) sendAuthenticateToSharedNote(guid string, noteKey string, authenticationToken string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("authenticateToSharedNote", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreAuthenticateToSharedNoteArgs{
		GUID:                guid,
		NoteKey:             noteKey,
		AuthenticationToken: authenticationToken,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvAuthenticateToSharedNote() (value *userstore.AuthenticationResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "authenticateToSharedNote" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "authenticateToSharedNote failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "authenticateToSharedNote failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error175 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error176 error
		error176, err = error175.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error176
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "authenticateToSharedNote failed: invalid message type")
		return
	}
	result := NoteStoreAuthenticateToSharedNoteResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	}
	value = result.GetSuccess()
	return
}

// Identify related entities on the service, such as notes,
// notebooks, and tags related to notes or content.
//
// @param query
//   The information about which we are finding related entities.
//
// @param resultSpec
//   Allows the client to indicate the type and quantity of
//   information to be returned, allowing a saving of time and
//   bandwidth.
//
// @return
//   The result of the query, with information considered
//   to likely be relevantly related to the information
//   described by the query.
//
// @throws EDAMUserException <ul>
//   <li>BAD_DATA_FORMAT "RelatedQuery.plainText" - If you provided a
//     a zero-length plain text value.
//   </li>
//   <li>BAD_DATA_FORMAT "RelatedQuery.noteGuid" - If you provided an
//     invalid Note GUID, that is, one that does not match the constraints
//     defined by EDAM_GUID_LEN_MIN, EDAM_GUID_LEN_MAX, EDAM_GUID_REGEX.
//   </li>
//   <li> BAD_DATA_FORMAT "NoteFilter.notebookGuid" - if malformed
//   </li>
//   <li> BAD_DATA_FORMAT "NoteFilter.tagGuids" - if any are malformed
//   </li>
//   <li> BAD_DATA_FORMAT "NoteFilter.words" - if search string too long
//   </li>
//   <li>PERMISSION_DENIED "Note" - If the caller does not have access to
//     the note identified by RelatedQuery.noteGuid.
//   </li>
//   <li>DATA_REQUIRED "RelatedResultSpec" - If you did not not set any values
//     in the result spec.
//   </li>
// </ul>
//
// @throws EDAMNotFoundException <ul>
//   <li>"RelatedQuery.noteGuid" - the note with that GUID is not
//     found, if that field has been set in the query.
//   </li>
// </ul>
//
// Parameters:
//  - AuthenticationToken
//  - Query
//  - ResultSpec
func (p *NoteStoreClient) FindRelated(authenticationToken string, query *RelatedQuery, resultSpec *RelatedResultSpec) (r *RelatedResult_, err error) {
	if err = p.sendFindRelated(authenticationToken, query, resultSpec); err != nil {
		return
	}
	return p.recvFindRelated()
}

func (p *NoteStoreClient) sendFindRelated(authenticationToken string, query *RelatedQuery, resultSpec *RelatedResultSpec) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("findRelated", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NoteStoreFindRelatedArgs{
		AuthenticationToken: authenticationToken,
		Query:               query,
		ResultSpec:          resultSpec,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *NoteStoreClient) recvFindRelated() (value *RelatedResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "findRelated" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "findRelated failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "findRelated failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error177 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error178 error
		error178, err = error177.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error178
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "findRelated failed: invalid message type")
		return
	}
	result := NoteStoreFindRelatedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.NotFoundException != nil {
		err = result.NotFoundException
		return
	}
	value = result.GetSuccess()
	return
}

type NoteStoreProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      NoteStore
}

func (p *NoteStoreProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *NoteStoreProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *NoteStoreProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewNoteStoreProcessor(handler NoteStore) *NoteStoreProcessor {

	self179 := &NoteStoreProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self179.processorMap["getSyncState"] = &noteStoreProcessorGetSyncState{handler: handler}
	self179.processorMap["getSyncStateWithMetrics"] = &noteStoreProcessorGetSyncStateWithMetrics{handler: handler}
	self179.processorMap["getSyncChunk"] = &noteStoreProcessorGetSyncChunk{handler: handler}
	self179.processorMap["getFilteredSyncChunk"] = &noteStoreProcessorGetFilteredSyncChunk{handler: handler}
	self179.processorMap["getLinkedNotebookSyncState"] = &noteStoreProcessorGetLinkedNotebookSyncState{handler: handler}
	self179.processorMap["getLinkedNotebookSyncChunk"] = &noteStoreProcessorGetLinkedNotebookSyncChunk{handler: handler}
	self179.processorMap["listNotebooks"] = &noteStoreProcessorListNotebooks{handler: handler}
	self179.processorMap["getNotebook"] = &noteStoreProcessorGetNotebook{handler: handler}
	self179.processorMap["getDefaultNotebook"] = &noteStoreProcessorGetDefaultNotebook{handler: handler}
	self179.processorMap["createNotebook"] = &noteStoreProcessorCreateNotebook{handler: handler}
	self179.processorMap["updateNotebook"] = &noteStoreProcessorUpdateNotebook{handler: handler}
	self179.processorMap["expungeNotebook"] = &noteStoreProcessorExpungeNotebook{handler: handler}
	self179.processorMap["listTags"] = &noteStoreProcessorListTags{handler: handler}
	self179.processorMap["listTagsByNotebook"] = &noteStoreProcessorListTagsByNotebook{handler: handler}
	self179.processorMap["getTag"] = &noteStoreProcessorGetTag{handler: handler}
	self179.processorMap["createTag"] = &noteStoreProcessorCreateTag{handler: handler}
	self179.processorMap["updateTag"] = &noteStoreProcessorUpdateTag{handler: handler}
	self179.processorMap["untagAll"] = &noteStoreProcessorUntagAll{handler: handler}
	self179.processorMap["expungeTag"] = &noteStoreProcessorExpungeTag{handler: handler}
	self179.processorMap["listSearches"] = &noteStoreProcessorListSearches{handler: handler}
	self179.processorMap["getSearch"] = &noteStoreProcessorGetSearch{handler: handler}
	self179.processorMap["createSearch"] = &noteStoreProcessorCreateSearch{handler: handler}
	self179.processorMap["updateSearch"] = &noteStoreProcessorUpdateSearch{handler: handler}
	self179.processorMap["expungeSearch"] = &noteStoreProcessorExpungeSearch{handler: handler}
	self179.processorMap["findNotes"] = &noteStoreProcessorFindNotes{handler: handler}
	self179.processorMap["findNoteOffset"] = &noteStoreProcessorFindNoteOffset{handler: handler}
	self179.processorMap["findNotesMetadata"] = &noteStoreProcessorFindNotesMetadata{handler: handler}
	self179.processorMap["findNoteCounts"] = &noteStoreProcessorFindNoteCounts{handler: handler}
	self179.processorMap["getNote"] = &noteStoreProcessorGetNote{handler: handler}
	self179.processorMap["getNoteApplicationData"] = &noteStoreProcessorGetNoteApplicationData{handler: handler}
	self179.processorMap["getNoteApplicationDataEntry"] = &noteStoreProcessorGetNoteApplicationDataEntry{handler: handler}
	self179.processorMap["setNoteApplicationDataEntry"] = &noteStoreProcessorSetNoteApplicationDataEntry{handler: handler}
	self179.processorMap["unsetNoteApplicationDataEntry"] = &noteStoreProcessorUnsetNoteApplicationDataEntry{handler: handler}
	self179.processorMap["getNoteContent"] = &noteStoreProcessorGetNoteContent{handler: handler}
	self179.processorMap["getNoteSearchText"] = &noteStoreProcessorGetNoteSearchText{handler: handler}
	self179.processorMap["getResourceSearchText"] = &noteStoreProcessorGetResourceSearchText{handler: handler}
	self179.processorMap["getNoteTagNames"] = &noteStoreProcessorGetNoteTagNames{handler: handler}
	self179.processorMap["createNote"] = &noteStoreProcessorCreateNote{handler: handler}
	self179.processorMap["updateNote"] = &noteStoreProcessorUpdateNote{handler: handler}
	self179.processorMap["deleteNote"] = &noteStoreProcessorDeleteNote{handler: handler}
	self179.processorMap["expungeNote"] = &noteStoreProcessorExpungeNote{handler: handler}
	self179.processorMap["expungeNotes"] = &noteStoreProcessorExpungeNotes{handler: handler}
	self179.processorMap["expungeInactiveNotes"] = &noteStoreProcessorExpungeInactiveNotes{handler: handler}
	self179.processorMap["copyNote"] = &noteStoreProcessorCopyNote{handler: handler}
	self179.processorMap["listNoteVersions"] = &noteStoreProcessorListNoteVersions{handler: handler}
	self179.processorMap["getNoteVersion"] = &noteStoreProcessorGetNoteVersion{handler: handler}
	self179.processorMap["getResource"] = &noteStoreProcessorGetResource{handler: handler}
	self179.processorMap["getResourceApplicationData"] = &noteStoreProcessorGetResourceApplicationData{handler: handler}
	self179.processorMap["getResourceApplicationDataEntry"] = &noteStoreProcessorGetResourceApplicationDataEntry{handler: handler}
	self179.processorMap["setResourceApplicationDataEntry"] = &noteStoreProcessorSetResourceApplicationDataEntry{handler: handler}
	self179.processorMap["unsetResourceApplicationDataEntry"] = &noteStoreProcessorUnsetResourceApplicationDataEntry{handler: handler}
	self179.processorMap["updateResource"] = &noteStoreProcessorUpdateResource{handler: handler}
	self179.processorMap["getResourceData"] = &noteStoreProcessorGetResourceData{handler: handler}
	self179.processorMap["getResourceByHash"] = &noteStoreProcessorGetResourceByHash{handler: handler}
	self179.processorMap["getResourceRecognition"] = &noteStoreProcessorGetResourceRecognition{handler: handler}
	self179.processorMap["getResourceAlternateData"] = &noteStoreProcessorGetResourceAlternateData{handler: handler}
	self179.processorMap["getResourceAttributes"] = &noteStoreProcessorGetResourceAttributes{handler: handler}
	self179.processorMap["getPublicNotebook"] = &noteStoreProcessorGetPublicNotebook{handler: handler}
	self179.processorMap["createSharedNotebook"] = &noteStoreProcessorCreateSharedNotebook{handler: handler}
	self179.processorMap["updateSharedNotebook"] = &noteStoreProcessorUpdateSharedNotebook{handler: handler}
	self179.processorMap["setSharedNotebookRecipientSettings"] = &noteStoreProcessorSetSharedNotebookRecipientSettings{handler: handler}
	self179.processorMap["sendMessageToSharedNotebookMembers"] = &noteStoreProcessorSendMessageToSharedNotebookMembers{handler: handler}
	self179.processorMap["listSharedNotebooks"] = &noteStoreProcessorListSharedNotebooks{handler: handler}
	self179.processorMap["expungeSharedNotebooks"] = &noteStoreProcessorExpungeSharedNotebooks{handler: handler}
	self179.processorMap["createLinkedNotebook"] = &noteStoreProcessorCreateLinkedNotebook{handler: handler}
	self179.processorMap["updateLinkedNotebook"] = &noteStoreProcessorUpdateLinkedNotebook{handler: handler}
	self179.processorMap["listLinkedNotebooks"] = &noteStoreProcessorListLinkedNotebooks{handler: handler}
	self179.processorMap["expungeLinkedNotebook"] = &noteStoreProcessorExpungeLinkedNotebook{handler: handler}
	self179.processorMap["authenticateToSharedNotebook"] = &noteStoreProcessorAuthenticateToSharedNotebook{handler: handler}
	self179.processorMap["getSharedNotebookByAuth"] = &noteStoreProcessorGetSharedNotebookByAuth{handler: handler}
	self179.processorMap["emailNote"] = &noteStoreProcessorEmailNote{handler: handler}
	self179.processorMap["shareNote"] = &noteStoreProcessorShareNote{handler: handler}
	self179.processorMap["stopSharingNote"] = &noteStoreProcessorStopSharingNote{handler: handler}
	self179.processorMap["authenticateToSharedNote"] = &noteStoreProcessorAuthenticateToSharedNote{handler: handler}
	self179.processorMap["findRelated"] = &noteStoreProcessorFindRelated{handler: handler}
	return self179
}

func (p *NoteStoreProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x180 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x180.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x180

}

type noteStoreProcessorGetSyncState struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetSyncState) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetSyncStateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSyncState", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetSyncStateResult{}
	var retval *SyncState
	var err2 error
	if retval, err2 = p.handler.GetSyncState(args.AuthenticationToken); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSyncState: "+err2.Error())
			oprot.WriteMessageBegin("getSyncState", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSyncState", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetSyncStateWithMetrics struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetSyncStateWithMetrics) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetSyncStateWithMetricsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSyncStateWithMetrics", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetSyncStateWithMetricsResult{}
	var retval *SyncState
	var err2 error
	if retval, err2 = p.handler.GetSyncStateWithMetrics(args.AuthenticationToken, args.ClientMetrics); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSyncStateWithMetrics: "+err2.Error())
			oprot.WriteMessageBegin("getSyncStateWithMetrics", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSyncStateWithMetrics", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetSyncChunk struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetSyncChunk) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetSyncChunkArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSyncChunk", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetSyncChunkResult{}
	var retval *SyncChunk
	var err2 error
	if retval, err2 = p.handler.GetSyncChunk(args.AuthenticationToken, args.AfterUSN, args.MaxEntries, args.FullSyncOnly); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSyncChunk: "+err2.Error())
			oprot.WriteMessageBegin("getSyncChunk", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSyncChunk", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetFilteredSyncChunk struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetFilteredSyncChunk) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetFilteredSyncChunkArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getFilteredSyncChunk", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetFilteredSyncChunkResult{}
	var retval *SyncChunk
	var err2 error
	if retval, err2 = p.handler.GetFilteredSyncChunk(args.AuthenticationToken, args.AfterUSN, args.MaxEntries, args.Filter); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getFilteredSyncChunk: "+err2.Error())
			oprot.WriteMessageBegin("getFilteredSyncChunk", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getFilteredSyncChunk", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetLinkedNotebookSyncState struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetLinkedNotebookSyncState) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetLinkedNotebookSyncStateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getLinkedNotebookSyncState", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetLinkedNotebookSyncStateResult{}
	var retval *SyncState
	var err2 error
	if retval, err2 = p.handler.GetLinkedNotebookSyncState(args.AuthenticationToken, args.LinkedNotebook); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLinkedNotebookSyncState: "+err2.Error())
			oprot.WriteMessageBegin("getLinkedNotebookSyncState", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getLinkedNotebookSyncState", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetLinkedNotebookSyncChunk struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetLinkedNotebookSyncChunk) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetLinkedNotebookSyncChunkArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getLinkedNotebookSyncChunk", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetLinkedNotebookSyncChunkResult{}
	var retval *SyncChunk
	var err2 error
	if retval, err2 = p.handler.GetLinkedNotebookSyncChunk(args.AuthenticationToken, args.LinkedNotebook, args.AfterUSN, args.MaxEntries, args.FullSyncOnly); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLinkedNotebookSyncChunk: "+err2.Error())
			oprot.WriteMessageBegin("getLinkedNotebookSyncChunk", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getLinkedNotebookSyncChunk", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorListNotebooks struct {
	handler NoteStore
}

func (p *noteStoreProcessorListNotebooks) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreListNotebooksArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listNotebooks", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreListNotebooksResult{}
	var retval []*types.Notebook
	var err2 error
	if retval, err2 = p.handler.ListNotebooks(args.AuthenticationToken); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listNotebooks: "+err2.Error())
			oprot.WriteMessageBegin("listNotebooks", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listNotebooks", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetNotebookArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetNotebookResult{}
	var retval *types.Notebook
	var err2 error
	if retval, err2 = p.handler.GetNotebook(args.AuthenticationToken, args.GUID); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNotebook: "+err2.Error())
			oprot.WriteMessageBegin("getNotebook", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetDefaultNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetDefaultNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetDefaultNotebookArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getDefaultNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetDefaultNotebookResult{}
	var retval *types.Notebook
	var err2 error
	if retval, err2 = p.handler.GetDefaultNotebook(args.AuthenticationToken); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDefaultNotebook: "+err2.Error())
			oprot.WriteMessageBegin("getDefaultNotebook", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getDefaultNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorCreateNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorCreateNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreCreateNotebookArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreCreateNotebookResult{}
	var retval *types.Notebook
	var err2 error
	if retval, err2 = p.handler.CreateNotebook(args.AuthenticationToken, args.Notebook); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createNotebook: "+err2.Error())
			oprot.WriteMessageBegin("createNotebook", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorUpdateNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorUpdateNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreUpdateNotebookArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreUpdateNotebookResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.UpdateNotebook(args.AuthenticationToken, args.Notebook); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateNotebook: "+err2.Error())
			oprot.WriteMessageBegin("updateNotebook", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("updateNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorExpungeNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorExpungeNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreExpungeNotebookArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("expungeNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreExpungeNotebookResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.ExpungeNotebook(args.AuthenticationToken, args.GUID); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing expungeNotebook: "+err2.Error())
			oprot.WriteMessageBegin("expungeNotebook", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("expungeNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorListTags struct {
	handler NoteStore
}

func (p *noteStoreProcessorListTags) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreListTagsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listTags", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreListTagsResult{}
	var retval []*types.Tag
	var err2 error
	if retval, err2 = p.handler.ListTags(args.AuthenticationToken); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTags: "+err2.Error())
			oprot.WriteMessageBegin("listTags", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listTags", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorListTagsByNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorListTagsByNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreListTagsByNotebookArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listTagsByNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreListTagsByNotebookResult{}
	var retval []*types.Tag
	var err2 error
	if retval, err2 = p.handler.ListTagsByNotebook(args.AuthenticationToken, args.NotebookGuid); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTagsByNotebook: "+err2.Error())
			oprot.WriteMessageBegin("listTagsByNotebook", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listTagsByNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetTag struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetTag) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetTagArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTag", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetTagResult{}
	var retval *types.Tag
	var err2 error
	if retval, err2 = p.handler.GetTag(args.AuthenticationToken, args.GUID); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTag: "+err2.Error())
			oprot.WriteMessageBegin("getTag", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getTag", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorCreateTag struct {
	handler NoteStore
}

func (p *noteStoreProcessorCreateTag) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreCreateTagArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createTag", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreCreateTagResult{}
	var retval *types.Tag
	var err2 error
	if retval, err2 = p.handler.CreateTag(args.AuthenticationToken, args.Tag); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createTag: "+err2.Error())
			oprot.WriteMessageBegin("createTag", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createTag", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorUpdateTag struct {
	handler NoteStore
}

func (p *noteStoreProcessorUpdateTag) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreUpdateTagArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateTag", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreUpdateTagResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.UpdateTag(args.AuthenticationToken, args.Tag); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateTag: "+err2.Error())
			oprot.WriteMessageBegin("updateTag", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("updateTag", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorUntagAll struct {
	handler NoteStore
}

func (p *noteStoreProcessorUntagAll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreUntagAllArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("untagAll", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreUntagAllResult{}
	var err2 error
	if err2 = p.handler.UntagAll(args.AuthenticationToken, args.GUID); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing untagAll: "+err2.Error())
			oprot.WriteMessageBegin("untagAll", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("untagAll", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorExpungeTag struct {
	handler NoteStore
}

func (p *noteStoreProcessorExpungeTag) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreExpungeTagArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("expungeTag", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreExpungeTagResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.ExpungeTag(args.AuthenticationToken, args.GUID); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing expungeTag: "+err2.Error())
			oprot.WriteMessageBegin("expungeTag", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("expungeTag", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorListSearches struct {
	handler NoteStore
}

func (p *noteStoreProcessorListSearches) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreListSearchesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listSearches", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreListSearchesResult{}
	var retval []*types.SavedSearch
	var err2 error
	if retval, err2 = p.handler.ListSearches(args.AuthenticationToken); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listSearches: "+err2.Error())
			oprot.WriteMessageBegin("listSearches", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listSearches", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetSearch struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetSearch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetSearchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSearch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetSearchResult{}
	var retval *types.SavedSearch
	var err2 error
	if retval, err2 = p.handler.GetSearch(args.AuthenticationToken, args.GUID); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSearch: "+err2.Error())
			oprot.WriteMessageBegin("getSearch", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSearch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorCreateSearch struct {
	handler NoteStore
}

func (p *noteStoreProcessorCreateSearch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreCreateSearchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createSearch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreCreateSearchResult{}
	var retval *types.SavedSearch
	var err2 error
	if retval, err2 = p.handler.CreateSearch(args.AuthenticationToken, args.Search); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createSearch: "+err2.Error())
			oprot.WriteMessageBegin("createSearch", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createSearch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorUpdateSearch struct {
	handler NoteStore
}

func (p *noteStoreProcessorUpdateSearch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreUpdateSearchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateSearch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreUpdateSearchResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.UpdateSearch(args.AuthenticationToken, args.Search); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSearch: "+err2.Error())
			oprot.WriteMessageBegin("updateSearch", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("updateSearch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorExpungeSearch struct {
	handler NoteStore
}

func (p *noteStoreProcessorExpungeSearch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreExpungeSearchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("expungeSearch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreExpungeSearchResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.ExpungeSearch(args.AuthenticationToken, args.GUID); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing expungeSearch: "+err2.Error())
			oprot.WriteMessageBegin("expungeSearch", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("expungeSearch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorFindNotes struct {
	handler NoteStore
}

func (p *noteStoreProcessorFindNotes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreFindNotesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findNotes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreFindNotesResult{}
	var retval *NoteList
	var err2 error
	if retval, err2 = p.handler.FindNotes(args.AuthenticationToken, args.Filter, args.Offset, args.MaxNotes); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findNotes: "+err2.Error())
			oprot.WriteMessageBegin("findNotes", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findNotes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorFindNoteOffset struct {
	handler NoteStore
}

func (p *noteStoreProcessorFindNoteOffset) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreFindNoteOffsetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findNoteOffset", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreFindNoteOffsetResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.FindNoteOffset(args.AuthenticationToken, args.Filter, args.GUID); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findNoteOffset: "+err2.Error())
			oprot.WriteMessageBegin("findNoteOffset", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("findNoteOffset", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorFindNotesMetadata struct {
	handler NoteStore
}

func (p *noteStoreProcessorFindNotesMetadata) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreFindNotesMetadataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findNotesMetadata", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreFindNotesMetadataResult{}
	var retval *NotesMetadataList
	var err2 error
	if retval, err2 = p.handler.FindNotesMetadata(args.AuthenticationToken, args.Filter, args.Offset, args.MaxNotes, args.ResultSpec); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findNotesMetadata: "+err2.Error())
			oprot.WriteMessageBegin("findNotesMetadata", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findNotesMetadata", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorFindNoteCounts struct {
	handler NoteStore
}

func (p *noteStoreProcessorFindNoteCounts) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreFindNoteCountsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findNoteCounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreFindNoteCountsResult{}
	var retval *NoteCollectionCounts
	var err2 error
	if retval, err2 = p.handler.FindNoteCounts(args.AuthenticationToken, args.Filter, args.WithTrash); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findNoteCounts: "+err2.Error())
			oprot.WriteMessageBegin("findNoteCounts", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findNoteCounts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetNote struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetNote) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetNoteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetNoteResult{}
	var retval *types.Note
	var err2 error
	if retval, err2 = p.handler.GetNote(args.AuthenticationToken, args.GUID, args.WithContent, args.WithResourcesData, args.WithResourcesRecognition, args.WithResourcesAlternateData); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNote: "+err2.Error())
			oprot.WriteMessageBegin("getNote", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getNote", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetNoteApplicationData struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetNoteApplicationData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetNoteApplicationDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getNoteApplicationData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetNoteApplicationDataResult{}
	var retval *types.LazyMap
	var err2 error
	if retval, err2 = p.handler.GetNoteApplicationData(args.AuthenticationToken, args.GUID); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNoteApplicationData: "+err2.Error())
			oprot.WriteMessageBegin("getNoteApplicationData", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getNoteApplicationData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetNoteApplicationDataEntry struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetNoteApplicationDataEntry) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetNoteApplicationDataEntryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getNoteApplicationDataEntry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetNoteApplicationDataEntryResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetNoteApplicationDataEntry(args.AuthenticationToken, args.GUID, args.Key); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNoteApplicationDataEntry: "+err2.Error())
			oprot.WriteMessageBegin("getNoteApplicationDataEntry", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getNoteApplicationDataEntry", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorSetNoteApplicationDataEntry struct {
	handler NoteStore
}

func (p *noteStoreProcessorSetNoteApplicationDataEntry) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreSetNoteApplicationDataEntryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setNoteApplicationDataEntry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreSetNoteApplicationDataEntryResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.SetNoteApplicationDataEntry(args.AuthenticationToken, args.GUID, args.Key, args.Value); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setNoteApplicationDataEntry: "+err2.Error())
			oprot.WriteMessageBegin("setNoteApplicationDataEntry", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("setNoteApplicationDataEntry", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorUnsetNoteApplicationDataEntry struct {
	handler NoteStore
}

func (p *noteStoreProcessorUnsetNoteApplicationDataEntry) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreUnsetNoteApplicationDataEntryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unsetNoteApplicationDataEntry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreUnsetNoteApplicationDataEntryResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.UnsetNoteApplicationDataEntry(args.AuthenticationToken, args.GUID, args.Key); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unsetNoteApplicationDataEntry: "+err2.Error())
			oprot.WriteMessageBegin("unsetNoteApplicationDataEntry", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("unsetNoteApplicationDataEntry", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetNoteContent struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetNoteContent) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetNoteContentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getNoteContent", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetNoteContentResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetNoteContent(args.AuthenticationToken, args.GUID); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNoteContent: "+err2.Error())
			oprot.WriteMessageBegin("getNoteContent", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getNoteContent", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetNoteSearchText struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetNoteSearchText) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetNoteSearchTextArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getNoteSearchText", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetNoteSearchTextResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetNoteSearchText(args.AuthenticationToken, args.GUID, args.NoteOnly, args.TokenizeForIndexing); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNoteSearchText: "+err2.Error())
			oprot.WriteMessageBegin("getNoteSearchText", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getNoteSearchText", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetResourceSearchText struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetResourceSearchText) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetResourceSearchTextArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getResourceSearchText", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetResourceSearchTextResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetResourceSearchText(args.AuthenticationToken, args.GUID); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getResourceSearchText: "+err2.Error())
			oprot.WriteMessageBegin("getResourceSearchText", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getResourceSearchText", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetNoteTagNames struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetNoteTagNames) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetNoteTagNamesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getNoteTagNames", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetNoteTagNamesResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetNoteTagNames(args.AuthenticationToken, args.GUID); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNoteTagNames: "+err2.Error())
			oprot.WriteMessageBegin("getNoteTagNames", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getNoteTagNames", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorCreateNote struct {
	handler NoteStore
}

func (p *noteStoreProcessorCreateNote) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreCreateNoteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreCreateNoteResult{}
	var retval *types.Note
	var err2 error
	if retval, err2 = p.handler.CreateNote(args.AuthenticationToken, args.Note); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createNote: "+err2.Error())
			oprot.WriteMessageBegin("createNote", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createNote", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorUpdateNote struct {
	handler NoteStore
}

func (p *noteStoreProcessorUpdateNote) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreUpdateNoteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreUpdateNoteResult{}
	var retval *types.Note
	var err2 error
	if retval, err2 = p.handler.UpdateNote(args.AuthenticationToken, args.Note); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateNote: "+err2.Error())
			oprot.WriteMessageBegin("updateNote", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updateNote", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorDeleteNote struct {
	handler NoteStore
}

func (p *noteStoreProcessorDeleteNote) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreDeleteNoteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreDeleteNoteResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.DeleteNote(args.AuthenticationToken, args.GUID); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteNote: "+err2.Error())
			oprot.WriteMessageBegin("deleteNote", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("deleteNote", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorExpungeNote struct {
	handler NoteStore
}

func (p *noteStoreProcessorExpungeNote) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreExpungeNoteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("expungeNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreExpungeNoteResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.ExpungeNote(args.AuthenticationToken, args.GUID); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing expungeNote: "+err2.Error())
			oprot.WriteMessageBegin("expungeNote", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("expungeNote", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorExpungeNotes struct {
	handler NoteStore
}

func (p *noteStoreProcessorExpungeNotes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreExpungeNotesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("expungeNotes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreExpungeNotesResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.ExpungeNotes(args.AuthenticationToken, args.NoteGuids); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing expungeNotes: "+err2.Error())
			oprot.WriteMessageBegin("expungeNotes", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("expungeNotes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorExpungeInactiveNotes struct {
	handler NoteStore
}

func (p *noteStoreProcessorExpungeInactiveNotes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreExpungeInactiveNotesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("expungeInactiveNotes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreExpungeInactiveNotesResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.ExpungeInactiveNotes(args.AuthenticationToken); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing expungeInactiveNotes: "+err2.Error())
			oprot.WriteMessageBegin("expungeInactiveNotes", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("expungeInactiveNotes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorCopyNote struct {
	handler NoteStore
}

func (p *noteStoreProcessorCopyNote) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreCopyNoteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("copyNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreCopyNoteResult{}
	var retval *types.Note
	var err2 error
	if retval, err2 = p.handler.CopyNote(args.AuthenticationToken, args.NoteGuid, args.ToNotebookGuid); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing copyNote: "+err2.Error())
			oprot.WriteMessageBegin("copyNote", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("copyNote", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorListNoteVersions struct {
	handler NoteStore
}

func (p *noteStoreProcessorListNoteVersions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreListNoteVersionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listNoteVersions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreListNoteVersionsResult{}
	var retval []*NoteVersionId
	var err2 error
	if retval, err2 = p.handler.ListNoteVersions(args.AuthenticationToken, args.NoteGuid); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listNoteVersions: "+err2.Error())
			oprot.WriteMessageBegin("listNoteVersions", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listNoteVersions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetNoteVersion struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetNoteVersion) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetNoteVersionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getNoteVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetNoteVersionResult{}
	var retval *types.Note
	var err2 error
	if retval, err2 = p.handler.GetNoteVersion(args.AuthenticationToken, args.NoteGuid, args.UpdateSequenceNum, args.WithResourcesData, args.WithResourcesRecognition, args.WithResourcesAlternateData); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNoteVersion: "+err2.Error())
			oprot.WriteMessageBegin("getNoteVersion", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getNoteVersion", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetResource struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetResource) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetResourceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getResource", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetResourceResult{}
	var retval *types.Resource
	var err2 error
	if retval, err2 = p.handler.GetResource(args.AuthenticationToken, args.GUID, args.WithData, args.WithRecognition, args.WithAttributes, args.WithAlternateData); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getResource: "+err2.Error())
			oprot.WriteMessageBegin("getResource", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getResource", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetResourceApplicationData struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetResourceApplicationData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetResourceApplicationDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getResourceApplicationData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetResourceApplicationDataResult{}
	var retval *types.LazyMap
	var err2 error
	if retval, err2 = p.handler.GetResourceApplicationData(args.AuthenticationToken, args.GUID); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getResourceApplicationData: "+err2.Error())
			oprot.WriteMessageBegin("getResourceApplicationData", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getResourceApplicationData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetResourceApplicationDataEntry struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetResourceApplicationDataEntry) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetResourceApplicationDataEntryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getResourceApplicationDataEntry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetResourceApplicationDataEntryResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetResourceApplicationDataEntry(args.AuthenticationToken, args.GUID, args.Key); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getResourceApplicationDataEntry: "+err2.Error())
			oprot.WriteMessageBegin("getResourceApplicationDataEntry", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getResourceApplicationDataEntry", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorSetResourceApplicationDataEntry struct {
	handler NoteStore
}

func (p *noteStoreProcessorSetResourceApplicationDataEntry) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreSetResourceApplicationDataEntryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setResourceApplicationDataEntry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreSetResourceApplicationDataEntryResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.SetResourceApplicationDataEntry(args.AuthenticationToken, args.GUID, args.Key, args.Value); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setResourceApplicationDataEntry: "+err2.Error())
			oprot.WriteMessageBegin("setResourceApplicationDataEntry", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("setResourceApplicationDataEntry", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorUnsetResourceApplicationDataEntry struct {
	handler NoteStore
}

func (p *noteStoreProcessorUnsetResourceApplicationDataEntry) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreUnsetResourceApplicationDataEntryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unsetResourceApplicationDataEntry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreUnsetResourceApplicationDataEntryResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.UnsetResourceApplicationDataEntry(args.AuthenticationToken, args.GUID, args.Key); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unsetResourceApplicationDataEntry: "+err2.Error())
			oprot.WriteMessageBegin("unsetResourceApplicationDataEntry", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("unsetResourceApplicationDataEntry", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorUpdateResource struct {
	handler NoteStore
}

func (p *noteStoreProcessorUpdateResource) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreUpdateResourceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateResource", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreUpdateResourceResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.UpdateResource(args.AuthenticationToken, args.Resource); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateResource: "+err2.Error())
			oprot.WriteMessageBegin("updateResource", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("updateResource", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetResourceData struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetResourceData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetResourceDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getResourceData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetResourceDataResult{}
	var retval []byte
	var err2 error
	if retval, err2 = p.handler.GetResourceData(args.AuthenticationToken, args.GUID); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getResourceData: "+err2.Error())
			oprot.WriteMessageBegin("getResourceData", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getResourceData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetResourceByHash struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetResourceByHash) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetResourceByHashArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getResourceByHash", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetResourceByHashResult{}
	var retval *types.Resource
	var err2 error
	if retval, err2 = p.handler.GetResourceByHash(args.AuthenticationToken, args.NoteGuid, args.ContentHash, args.WithData, args.WithRecognition, args.WithAlternateData); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getResourceByHash: "+err2.Error())
			oprot.WriteMessageBegin("getResourceByHash", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getResourceByHash", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetResourceRecognition struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetResourceRecognition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetResourceRecognitionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getResourceRecognition", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetResourceRecognitionResult{}
	var retval []byte
	var err2 error
	if retval, err2 = p.handler.GetResourceRecognition(args.AuthenticationToken, args.GUID); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getResourceRecognition: "+err2.Error())
			oprot.WriteMessageBegin("getResourceRecognition", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getResourceRecognition", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetResourceAlternateData struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetResourceAlternateData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetResourceAlternateDataArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getResourceAlternateData", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetResourceAlternateDataResult{}
	var retval []byte
	var err2 error
	if retval, err2 = p.handler.GetResourceAlternateData(args.AuthenticationToken, args.GUID); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getResourceAlternateData: "+err2.Error())
			oprot.WriteMessageBegin("getResourceAlternateData", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getResourceAlternateData", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetResourceAttributes struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetResourceAttributes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetResourceAttributesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getResourceAttributes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetResourceAttributesResult{}
	var retval *types.ResourceAttributes
	var err2 error
	if retval, err2 = p.handler.GetResourceAttributes(args.AuthenticationToken, args.GUID); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getResourceAttributes: "+err2.Error())
			oprot.WriteMessageBegin("getResourceAttributes", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getResourceAttributes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetPublicNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetPublicNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetPublicNotebookArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getPublicNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetPublicNotebookResult{}
	var retval *types.Notebook
	var err2 error
	if retval, err2 = p.handler.GetPublicNotebook(args.UserId, args.PublicUri); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPublicNotebook: "+err2.Error())
			oprot.WriteMessageBegin("getPublicNotebook", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getPublicNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorCreateSharedNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorCreateSharedNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreCreateSharedNotebookArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createSharedNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreCreateSharedNotebookResult{}
	var retval *types.SharedNotebook
	var err2 error
	if retval, err2 = p.handler.CreateSharedNotebook(args.AuthenticationToken, args.SharedNotebook); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createSharedNotebook: "+err2.Error())
			oprot.WriteMessageBegin("createSharedNotebook", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createSharedNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorUpdateSharedNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorUpdateSharedNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreUpdateSharedNotebookArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateSharedNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreUpdateSharedNotebookResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.UpdateSharedNotebook(args.AuthenticationToken, args.SharedNotebook); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSharedNotebook: "+err2.Error())
			oprot.WriteMessageBegin("updateSharedNotebook", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("updateSharedNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorSetSharedNotebookRecipientSettings struct {
	handler NoteStore
}

func (p *noteStoreProcessorSetSharedNotebookRecipientSettings) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreSetSharedNotebookRecipientSettingsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setSharedNotebookRecipientSettings", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreSetSharedNotebookRecipientSettingsResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.SetSharedNotebookRecipientSettings(args.AuthenticationToken, args.SharedNotebookId, args.RecipientSettings); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setSharedNotebookRecipientSettings: "+err2.Error())
			oprot.WriteMessageBegin("setSharedNotebookRecipientSettings", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("setSharedNotebookRecipientSettings", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorSendMessageToSharedNotebookMembers struct {
	handler NoteStore
}

func (p *noteStoreProcessorSendMessageToSharedNotebookMembers) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreSendMessageToSharedNotebookMembersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendMessageToSharedNotebookMembers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreSendMessageToSharedNotebookMembersResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.SendMessageToSharedNotebookMembers(args.AuthenticationToken, args.NotebookGuid, args.MessageText, args.Recipients); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendMessageToSharedNotebookMembers: "+err2.Error())
			oprot.WriteMessageBegin("sendMessageToSharedNotebookMembers", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("sendMessageToSharedNotebookMembers", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorListSharedNotebooks struct {
	handler NoteStore
}

func (p *noteStoreProcessorListSharedNotebooks) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreListSharedNotebooksArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listSharedNotebooks", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreListSharedNotebooksResult{}
	var retval []*types.SharedNotebook
	var err2 error
	if retval, err2 = p.handler.ListSharedNotebooks(args.AuthenticationToken); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listSharedNotebooks: "+err2.Error())
			oprot.WriteMessageBegin("listSharedNotebooks", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listSharedNotebooks", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorExpungeSharedNotebooks struct {
	handler NoteStore
}

func (p *noteStoreProcessorExpungeSharedNotebooks) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreExpungeSharedNotebooksArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("expungeSharedNotebooks", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreExpungeSharedNotebooksResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.ExpungeSharedNotebooks(args.AuthenticationToken, args.SharedNotebookIds); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing expungeSharedNotebooks: "+err2.Error())
			oprot.WriteMessageBegin("expungeSharedNotebooks", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("expungeSharedNotebooks", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorCreateLinkedNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorCreateLinkedNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreCreateLinkedNotebookArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createLinkedNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreCreateLinkedNotebookResult{}
	var retval *types.LinkedNotebook
	var err2 error
	if retval, err2 = p.handler.CreateLinkedNotebook(args.AuthenticationToken, args.LinkedNotebook); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createLinkedNotebook: "+err2.Error())
			oprot.WriteMessageBegin("createLinkedNotebook", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("createLinkedNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorUpdateLinkedNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorUpdateLinkedNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreUpdateLinkedNotebookArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateLinkedNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreUpdateLinkedNotebookResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.UpdateLinkedNotebook(args.AuthenticationToken, args.LinkedNotebook); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateLinkedNotebook: "+err2.Error())
			oprot.WriteMessageBegin("updateLinkedNotebook", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("updateLinkedNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorListLinkedNotebooks struct {
	handler NoteStore
}

func (p *noteStoreProcessorListLinkedNotebooks) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreListLinkedNotebooksArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listLinkedNotebooks", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreListLinkedNotebooksResult{}
	var retval []*types.LinkedNotebook
	var err2 error
	if retval, err2 = p.handler.ListLinkedNotebooks(args.AuthenticationToken); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listLinkedNotebooks: "+err2.Error())
			oprot.WriteMessageBegin("listLinkedNotebooks", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listLinkedNotebooks", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorExpungeLinkedNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorExpungeLinkedNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreExpungeLinkedNotebookArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("expungeLinkedNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreExpungeLinkedNotebookResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.ExpungeLinkedNotebook(args.AuthenticationToken, args.GUID); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing expungeLinkedNotebook: "+err2.Error())
			oprot.WriteMessageBegin("expungeLinkedNotebook", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("expungeLinkedNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorAuthenticateToSharedNotebook struct {
	handler NoteStore
}

func (p *noteStoreProcessorAuthenticateToSharedNotebook) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreAuthenticateToSharedNotebookArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("authenticateToSharedNotebook", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreAuthenticateToSharedNotebookResult{}
	var retval *userstore.AuthenticationResult_
	var err2 error
	if retval, err2 = p.handler.AuthenticateToSharedNotebook(args.ShareKey, args.AuthenticationToken); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing authenticateToSharedNotebook: "+err2.Error())
			oprot.WriteMessageBegin("authenticateToSharedNotebook", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("authenticateToSharedNotebook", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorGetSharedNotebookByAuth struct {
	handler NoteStore
}

func (p *noteStoreProcessorGetSharedNotebookByAuth) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreGetSharedNotebookByAuthArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSharedNotebookByAuth", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreGetSharedNotebookByAuthResult{}
	var retval *types.SharedNotebook
	var err2 error
	if retval, err2 = p.handler.GetSharedNotebookByAuth(args.AuthenticationToken); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSharedNotebookByAuth: "+err2.Error())
			oprot.WriteMessageBegin("getSharedNotebookByAuth", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSharedNotebookByAuth", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorEmailNote struct {
	handler NoteStore
}

func (p *noteStoreProcessorEmailNote) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreEmailNoteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("emailNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreEmailNoteResult{}
	var err2 error
	if err2 = p.handler.EmailNote(args.AuthenticationToken, args.Parameters); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing emailNote: "+err2.Error())
			oprot.WriteMessageBegin("emailNote", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("emailNote", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorShareNote struct {
	handler NoteStore
}

func (p *noteStoreProcessorShareNote) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreShareNoteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("shareNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreShareNoteResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.ShareNote(args.AuthenticationToken, args.GUID); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing shareNote: "+err2.Error())
			oprot.WriteMessageBegin("shareNote", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("shareNote", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorStopSharingNote struct {
	handler NoteStore
}

func (p *noteStoreProcessorStopSharingNote) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreStopSharingNoteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("stopSharingNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreStopSharingNoteResult{}
	var err2 error
	if err2 = p.handler.StopSharingNote(args.AuthenticationToken, args.GUID); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing stopSharingNote: "+err2.Error())
			oprot.WriteMessageBegin("stopSharingNote", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("stopSharingNote", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorAuthenticateToSharedNote struct {
	handler NoteStore
}

func (p *noteStoreProcessorAuthenticateToSharedNote) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreAuthenticateToSharedNoteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("authenticateToSharedNote", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreAuthenticateToSharedNoteResult{}
	var retval *userstore.AuthenticationResult_
	var err2 error
	if retval, err2 = p.handler.AuthenticateToSharedNote(args.GUID, args.NoteKey, args.AuthenticationToken); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing authenticateToSharedNote: "+err2.Error())
			oprot.WriteMessageBegin("authenticateToSharedNote", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("authenticateToSharedNote", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type noteStoreProcessorFindRelated struct {
	handler NoteStore
}

func (p *noteStoreProcessorFindRelated) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NoteStoreFindRelatedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("findRelated", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NoteStoreFindRelatedResult{}
	var retval *RelatedResult_
	var err2 error
	if retval, err2 = p.handler.FindRelated(args.AuthenticationToken, args.Query, args.ResultSpec); err2 != nil {
		switch v := err2.(type) {
		case *errors.EDAMUserException:
			result.UserException = v
		case *errors.EDAMSystemException:
			result.SystemException = v
		case *errors.EDAMNotFoundException:
			result.NotFoundException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findRelated: "+err2.Error())
			oprot.WriteMessageBegin("findRelated", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("findRelated", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - AuthenticationToken
type NoteStoreGetSyncStateArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1" json:"authenticationToken"`
}

func NewNoteStoreGetSyncStateArgs() *NoteStoreGetSyncStateArgs {
	return &NoteStoreGetSyncStateArgs{}
}

func (p *NoteStoreGetSyncStateArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}
func (p *NoteStoreGetSyncStateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetSyncStateArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetSyncStateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSyncState_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetSyncStateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetSyncStateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetSyncStateArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
type NoteStoreGetSyncStateResult struct {
	Success         *SyncState                  `thrift:"success,0" json:"success,omitempty"`
	UserException   *errors.EDAMUserException   `thrift:"userException,1" json:"userException,omitempty"`
	SystemException *errors.EDAMSystemException `thrift:"systemException,2" json:"systemException,omitempty"`
}

func NewNoteStoreGetSyncStateResult() *NoteStoreGetSyncStateResult {
	return &NoteStoreGetSyncStateResult{}
}

var NoteStoreGetSyncStateResult_Success_DEFAULT *SyncState

func (p *NoteStoreGetSyncStateResult) GetSuccess() *SyncState {
	if !p.IsSetSuccess() {
		return NoteStoreGetSyncStateResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreGetSyncStateResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetSyncStateResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetSyncStateResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetSyncStateResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetSyncStateResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetSyncStateResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreGetSyncStateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetSyncStateResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetSyncStateResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetSyncStateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetSyncStateResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &SyncState{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreGetSyncStateResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetSyncStateResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetSyncStateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSyncState_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetSyncStateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetSyncStateResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetSyncStateResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetSyncStateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetSyncStateResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - ClientMetrics
type NoteStoreGetSyncStateWithMetricsArgs struct {
	AuthenticationToken string              `thrift:"authenticationToken,1" json:"authenticationToken"`
	ClientMetrics       *ClientUsageMetrics `thrift:"clientMetrics,2" json:"clientMetrics"`
}

func NewNoteStoreGetSyncStateWithMetricsArgs() *NoteStoreGetSyncStateWithMetricsArgs {
	return &NoteStoreGetSyncStateWithMetricsArgs{}
}

func (p *NoteStoreGetSyncStateWithMetricsArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

var NoteStoreGetSyncStateWithMetricsArgs_ClientMetrics_DEFAULT *ClientUsageMetrics

func (p *NoteStoreGetSyncStateWithMetricsArgs) GetClientMetrics() *ClientUsageMetrics {
	if !p.IsSetClientMetrics() {
		return NoteStoreGetSyncStateWithMetricsArgs_ClientMetrics_DEFAULT
	}
	return p.ClientMetrics
}
func (p *NoteStoreGetSyncStateWithMetricsArgs) IsSetClientMetrics() bool {
	return p.ClientMetrics != nil
}

func (p *NoteStoreGetSyncStateWithMetricsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetSyncStateWithMetricsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetSyncStateWithMetricsArgs) readField2(iprot thrift.TProtocol) error {
	p.ClientMetrics = &ClientUsageMetrics{}
	if err := p.ClientMetrics.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ClientMetrics), err)
	}
	return nil
}

func (p *NoteStoreGetSyncStateWithMetricsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSyncStateWithMetrics_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetSyncStateWithMetricsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetSyncStateWithMetricsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clientMetrics", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clientMetrics: ", p), err)
	}
	if err := p.ClientMetrics.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ClientMetrics), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clientMetrics: ", p), err)
	}
	return err
}

func (p *NoteStoreGetSyncStateWithMetricsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetSyncStateWithMetricsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
type NoteStoreGetSyncStateWithMetricsResult struct {
	Success         *SyncState                  `thrift:"success,0" json:"success,omitempty"`
	UserException   *errors.EDAMUserException   `thrift:"userException,1" json:"userException,omitempty"`
	SystemException *errors.EDAMSystemException `thrift:"systemException,2" json:"systemException,omitempty"`
}

func NewNoteStoreGetSyncStateWithMetricsResult() *NoteStoreGetSyncStateWithMetricsResult {
	return &NoteStoreGetSyncStateWithMetricsResult{}
}

var NoteStoreGetSyncStateWithMetricsResult_Success_DEFAULT *SyncState

func (p *NoteStoreGetSyncStateWithMetricsResult) GetSuccess() *SyncState {
	if !p.IsSetSuccess() {
		return NoteStoreGetSyncStateWithMetricsResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreGetSyncStateWithMetricsResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetSyncStateWithMetricsResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetSyncStateWithMetricsResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetSyncStateWithMetricsResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetSyncStateWithMetricsResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetSyncStateWithMetricsResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreGetSyncStateWithMetricsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetSyncStateWithMetricsResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetSyncStateWithMetricsResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetSyncStateWithMetricsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetSyncStateWithMetricsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &SyncState{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreGetSyncStateWithMetricsResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetSyncStateWithMetricsResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetSyncStateWithMetricsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSyncStateWithMetrics_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetSyncStateWithMetricsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetSyncStateWithMetricsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetSyncStateWithMetricsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetSyncStateWithMetricsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetSyncStateWithMetricsResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - AfterUSN
//  - MaxEntries
//  - FullSyncOnly
type NoteStoreGetSyncChunkArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1" json:"authenticationToken"`
	AfterUSN            int32  `thrift:"afterUSN,2" json:"afterUSN"`
	MaxEntries          int32  `thrift:"maxEntries,3" json:"maxEntries"`
	FullSyncOnly        bool   `thrift:"fullSyncOnly,4" json:"fullSyncOnly"`
}

func NewNoteStoreGetSyncChunkArgs() *NoteStoreGetSyncChunkArgs {
	return &NoteStoreGetSyncChunkArgs{}
}

func (p *NoteStoreGetSyncChunkArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreGetSyncChunkArgs) GetAfterUSN() int32 {
	return p.AfterUSN
}

func (p *NoteStoreGetSyncChunkArgs) GetMaxEntries() int32 {
	return p.MaxEntries
}

func (p *NoteStoreGetSyncChunkArgs) GetFullSyncOnly() bool {
	return p.FullSyncOnly
}
func (p *NoteStoreGetSyncChunkArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetSyncChunkArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetSyncChunkArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AfterUSN = v
	}
	return nil
}

func (p *NoteStoreGetSyncChunkArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MaxEntries = v
	}
	return nil
}

func (p *NoteStoreGetSyncChunkArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.FullSyncOnly = v
	}
	return nil
}

func (p *NoteStoreGetSyncChunkArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSyncChunk_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetSyncChunkArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetSyncChunkArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("afterUSN", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:afterUSN: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AfterUSN)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.afterUSN (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:afterUSN: ", p), err)
	}
	return err
}

func (p *NoteStoreGetSyncChunkArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxEntries", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxEntries: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MaxEntries)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxEntries (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxEntries: ", p), err)
	}
	return err
}

func (p *NoteStoreGetSyncChunkArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fullSyncOnly", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:fullSyncOnly: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.FullSyncOnly)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fullSyncOnly (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:fullSyncOnly: ", p), err)
	}
	return err
}

func (p *NoteStoreGetSyncChunkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetSyncChunkArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
type NoteStoreGetSyncChunkResult struct {
	Success         *SyncChunk                  `thrift:"success,0" json:"success,omitempty"`
	UserException   *errors.EDAMUserException   `thrift:"userException,1" json:"userException,omitempty"`
	SystemException *errors.EDAMSystemException `thrift:"systemException,2" json:"systemException,omitempty"`
}

func NewNoteStoreGetSyncChunkResult() *NoteStoreGetSyncChunkResult {
	return &NoteStoreGetSyncChunkResult{}
}

var NoteStoreGetSyncChunkResult_Success_DEFAULT *SyncChunk

func (p *NoteStoreGetSyncChunkResult) GetSuccess() *SyncChunk {
	if !p.IsSetSuccess() {
		return NoteStoreGetSyncChunkResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreGetSyncChunkResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetSyncChunkResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetSyncChunkResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetSyncChunkResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetSyncChunkResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetSyncChunkResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreGetSyncChunkResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetSyncChunkResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetSyncChunkResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetSyncChunkResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetSyncChunkResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &SyncChunk{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreGetSyncChunkResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetSyncChunkResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetSyncChunkResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSyncChunk_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetSyncChunkResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetSyncChunkResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetSyncChunkResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetSyncChunkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetSyncChunkResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - AfterUSN
//  - MaxEntries
//  - Filter
type NoteStoreGetFilteredSyncChunkArgs struct {
	AuthenticationToken string           `thrift:"authenticationToken,1" json:"authenticationToken"`
	AfterUSN            int32            `thrift:"afterUSN,2" json:"afterUSN"`
	MaxEntries          int32            `thrift:"maxEntries,3" json:"maxEntries"`
	Filter              *SyncChunkFilter `thrift:"filter,4" json:"filter"`
}

func NewNoteStoreGetFilteredSyncChunkArgs() *NoteStoreGetFilteredSyncChunkArgs {
	return &NoteStoreGetFilteredSyncChunkArgs{}
}

func (p *NoteStoreGetFilteredSyncChunkArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreGetFilteredSyncChunkArgs) GetAfterUSN() int32 {
	return p.AfterUSN
}

func (p *NoteStoreGetFilteredSyncChunkArgs) GetMaxEntries() int32 {
	return p.MaxEntries
}

var NoteStoreGetFilteredSyncChunkArgs_Filter_DEFAULT *SyncChunkFilter

func (p *NoteStoreGetFilteredSyncChunkArgs) GetFilter() *SyncChunkFilter {
	if !p.IsSetFilter() {
		return NoteStoreGetFilteredSyncChunkArgs_Filter_DEFAULT
	}
	return p.Filter
}
func (p *NoteStoreGetFilteredSyncChunkArgs) IsSetFilter() bool {
	return p.Filter != nil
}

func (p *NoteStoreGetFilteredSyncChunkArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetFilteredSyncChunkArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetFilteredSyncChunkArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AfterUSN = v
	}
	return nil
}

func (p *NoteStoreGetFilteredSyncChunkArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MaxEntries = v
	}
	return nil
}

func (p *NoteStoreGetFilteredSyncChunkArgs) readField4(iprot thrift.TProtocol) error {
	p.Filter = &SyncChunkFilter{}
	if err := p.Filter.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Filter), err)
	}
	return nil
}

func (p *NoteStoreGetFilteredSyncChunkArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getFilteredSyncChunk_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetFilteredSyncChunkArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetFilteredSyncChunkArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("afterUSN", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:afterUSN: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AfterUSN)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.afterUSN (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:afterUSN: ", p), err)
	}
	return err
}

func (p *NoteStoreGetFilteredSyncChunkArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxEntries", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxEntries: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MaxEntries)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxEntries (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxEntries: ", p), err)
	}
	return err
}

func (p *NoteStoreGetFilteredSyncChunkArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("filter", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:filter: ", p), err)
	}
	if err := p.Filter.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Filter), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:filter: ", p), err)
	}
	return err
}

func (p *NoteStoreGetFilteredSyncChunkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetFilteredSyncChunkArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
type NoteStoreGetFilteredSyncChunkResult struct {
	Success         *SyncChunk                  `thrift:"success,0" json:"success,omitempty"`
	UserException   *errors.EDAMUserException   `thrift:"userException,1" json:"userException,omitempty"`
	SystemException *errors.EDAMSystemException `thrift:"systemException,2" json:"systemException,omitempty"`
}

func NewNoteStoreGetFilteredSyncChunkResult() *NoteStoreGetFilteredSyncChunkResult {
	return &NoteStoreGetFilteredSyncChunkResult{}
}

var NoteStoreGetFilteredSyncChunkResult_Success_DEFAULT *SyncChunk

func (p *NoteStoreGetFilteredSyncChunkResult) GetSuccess() *SyncChunk {
	if !p.IsSetSuccess() {
		return NoteStoreGetFilteredSyncChunkResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreGetFilteredSyncChunkResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetFilteredSyncChunkResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetFilteredSyncChunkResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetFilteredSyncChunkResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetFilteredSyncChunkResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetFilteredSyncChunkResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreGetFilteredSyncChunkResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetFilteredSyncChunkResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetFilteredSyncChunkResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetFilteredSyncChunkResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetFilteredSyncChunkResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &SyncChunk{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreGetFilteredSyncChunkResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetFilteredSyncChunkResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetFilteredSyncChunkResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getFilteredSyncChunk_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetFilteredSyncChunkResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetFilteredSyncChunkResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetFilteredSyncChunkResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetFilteredSyncChunkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetFilteredSyncChunkResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - LinkedNotebook
type NoteStoreGetLinkedNotebookSyncStateArgs struct {
	AuthenticationToken string                `thrift:"authenticationToken,1" json:"authenticationToken"`
	LinkedNotebook      *types.LinkedNotebook `thrift:"linkedNotebook,2" json:"linkedNotebook"`
}

func NewNoteStoreGetLinkedNotebookSyncStateArgs() *NoteStoreGetLinkedNotebookSyncStateArgs {
	return &NoteStoreGetLinkedNotebookSyncStateArgs{}
}

func (p *NoteStoreGetLinkedNotebookSyncStateArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

var NoteStoreGetLinkedNotebookSyncStateArgs_LinkedNotebook_DEFAULT *types.LinkedNotebook

func (p *NoteStoreGetLinkedNotebookSyncStateArgs) GetLinkedNotebook() *types.LinkedNotebook {
	if !p.IsSetLinkedNotebook() {
		return NoteStoreGetLinkedNotebookSyncStateArgs_LinkedNotebook_DEFAULT
	}
	return p.LinkedNotebook
}
func (p *NoteStoreGetLinkedNotebookSyncStateArgs) IsSetLinkedNotebook() bool {
	return p.LinkedNotebook != nil
}

func (p *NoteStoreGetLinkedNotebookSyncStateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetLinkedNotebookSyncStateArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetLinkedNotebookSyncStateArgs) readField2(iprot thrift.TProtocol) error {
	p.LinkedNotebook = &types.LinkedNotebook{}
	if err := p.LinkedNotebook.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LinkedNotebook), err)
	}
	return nil
}

func (p *NoteStoreGetLinkedNotebookSyncStateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLinkedNotebookSyncState_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetLinkedNotebookSyncStateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetLinkedNotebookSyncStateArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("linkedNotebook", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:linkedNotebook: ", p), err)
	}
	if err := p.LinkedNotebook.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LinkedNotebook), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:linkedNotebook: ", p), err)
	}
	return err
}

func (p *NoteStoreGetLinkedNotebookSyncStateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetLinkedNotebookSyncStateArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreGetLinkedNotebookSyncStateResult struct {
	Success           *SyncState                    `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreGetLinkedNotebookSyncStateResult() *NoteStoreGetLinkedNotebookSyncStateResult {
	return &NoteStoreGetLinkedNotebookSyncStateResult{}
}

var NoteStoreGetLinkedNotebookSyncStateResult_Success_DEFAULT *SyncState

func (p *NoteStoreGetLinkedNotebookSyncStateResult) GetSuccess() *SyncState {
	if !p.IsSetSuccess() {
		return NoteStoreGetLinkedNotebookSyncStateResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreGetLinkedNotebookSyncStateResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetLinkedNotebookSyncStateResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetLinkedNotebookSyncStateResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetLinkedNotebookSyncStateResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetLinkedNotebookSyncStateResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetLinkedNotebookSyncStateResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreGetLinkedNotebookSyncStateResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreGetLinkedNotebookSyncStateResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreGetLinkedNotebookSyncStateResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreGetLinkedNotebookSyncStateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetLinkedNotebookSyncStateResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetLinkedNotebookSyncStateResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetLinkedNotebookSyncStateResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreGetLinkedNotebookSyncStateResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetLinkedNotebookSyncStateResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &SyncState{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreGetLinkedNotebookSyncStateResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetLinkedNotebookSyncStateResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetLinkedNotebookSyncStateResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreGetLinkedNotebookSyncStateResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLinkedNotebookSyncState_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetLinkedNotebookSyncStateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetLinkedNotebookSyncStateResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetLinkedNotebookSyncStateResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetLinkedNotebookSyncStateResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetLinkedNotebookSyncStateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetLinkedNotebookSyncStateResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - LinkedNotebook
//  - AfterUSN
//  - MaxEntries
//  - FullSyncOnly
type NoteStoreGetLinkedNotebookSyncChunkArgs struct {
	AuthenticationToken string                `thrift:"authenticationToken,1" json:"authenticationToken"`
	LinkedNotebook      *types.LinkedNotebook `thrift:"linkedNotebook,2" json:"linkedNotebook"`
	AfterUSN            int32                 `thrift:"afterUSN,3" json:"afterUSN"`
	MaxEntries          int32                 `thrift:"maxEntries,4" json:"maxEntries"`
	FullSyncOnly        bool                  `thrift:"fullSyncOnly,5" json:"fullSyncOnly"`
}

func NewNoteStoreGetLinkedNotebookSyncChunkArgs() *NoteStoreGetLinkedNotebookSyncChunkArgs {
	return &NoteStoreGetLinkedNotebookSyncChunkArgs{}
}

func (p *NoteStoreGetLinkedNotebookSyncChunkArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

var NoteStoreGetLinkedNotebookSyncChunkArgs_LinkedNotebook_DEFAULT *types.LinkedNotebook

func (p *NoteStoreGetLinkedNotebookSyncChunkArgs) GetLinkedNotebook() *types.LinkedNotebook {
	if !p.IsSetLinkedNotebook() {
		return NoteStoreGetLinkedNotebookSyncChunkArgs_LinkedNotebook_DEFAULT
	}
	return p.LinkedNotebook
}

func (p *NoteStoreGetLinkedNotebookSyncChunkArgs) GetAfterUSN() int32 {
	return p.AfterUSN
}

func (p *NoteStoreGetLinkedNotebookSyncChunkArgs) GetMaxEntries() int32 {
	return p.MaxEntries
}

func (p *NoteStoreGetLinkedNotebookSyncChunkArgs) GetFullSyncOnly() bool {
	return p.FullSyncOnly
}
func (p *NoteStoreGetLinkedNotebookSyncChunkArgs) IsSetLinkedNotebook() bool {
	return p.LinkedNotebook != nil
}

func (p *NoteStoreGetLinkedNotebookSyncChunkArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetLinkedNotebookSyncChunkArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetLinkedNotebookSyncChunkArgs) readField2(iprot thrift.TProtocol) error {
	p.LinkedNotebook = &types.LinkedNotebook{}
	if err := p.LinkedNotebook.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LinkedNotebook), err)
	}
	return nil
}

func (p *NoteStoreGetLinkedNotebookSyncChunkArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AfterUSN = v
	}
	return nil
}

func (p *NoteStoreGetLinkedNotebookSyncChunkArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MaxEntries = v
	}
	return nil
}

func (p *NoteStoreGetLinkedNotebookSyncChunkArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.FullSyncOnly = v
	}
	return nil
}

func (p *NoteStoreGetLinkedNotebookSyncChunkArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLinkedNotebookSyncChunk_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetLinkedNotebookSyncChunkArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetLinkedNotebookSyncChunkArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("linkedNotebook", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:linkedNotebook: ", p), err)
	}
	if err := p.LinkedNotebook.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LinkedNotebook), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:linkedNotebook: ", p), err)
	}
	return err
}

func (p *NoteStoreGetLinkedNotebookSyncChunkArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("afterUSN", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:afterUSN: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AfterUSN)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.afterUSN (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:afterUSN: ", p), err)
	}
	return err
}

func (p *NoteStoreGetLinkedNotebookSyncChunkArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxEntries", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:maxEntries: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MaxEntries)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxEntries (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:maxEntries: ", p), err)
	}
	return err
}

func (p *NoteStoreGetLinkedNotebookSyncChunkArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fullSyncOnly", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fullSyncOnly: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.FullSyncOnly)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fullSyncOnly (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fullSyncOnly: ", p), err)
	}
	return err
}

func (p *NoteStoreGetLinkedNotebookSyncChunkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetLinkedNotebookSyncChunkArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreGetLinkedNotebookSyncChunkResult struct {
	Success           *SyncChunk                    `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreGetLinkedNotebookSyncChunkResult() *NoteStoreGetLinkedNotebookSyncChunkResult {
	return &NoteStoreGetLinkedNotebookSyncChunkResult{}
}

var NoteStoreGetLinkedNotebookSyncChunkResult_Success_DEFAULT *SyncChunk

func (p *NoteStoreGetLinkedNotebookSyncChunkResult) GetSuccess() *SyncChunk {
	if !p.IsSetSuccess() {
		return NoteStoreGetLinkedNotebookSyncChunkResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreGetLinkedNotebookSyncChunkResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetLinkedNotebookSyncChunkResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetLinkedNotebookSyncChunkResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetLinkedNotebookSyncChunkResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetLinkedNotebookSyncChunkResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetLinkedNotebookSyncChunkResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreGetLinkedNotebookSyncChunkResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreGetLinkedNotebookSyncChunkResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreGetLinkedNotebookSyncChunkResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreGetLinkedNotebookSyncChunkResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetLinkedNotebookSyncChunkResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetLinkedNotebookSyncChunkResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetLinkedNotebookSyncChunkResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreGetLinkedNotebookSyncChunkResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetLinkedNotebookSyncChunkResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &SyncChunk{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreGetLinkedNotebookSyncChunkResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetLinkedNotebookSyncChunkResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetLinkedNotebookSyncChunkResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreGetLinkedNotebookSyncChunkResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLinkedNotebookSyncChunk_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetLinkedNotebookSyncChunkResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetLinkedNotebookSyncChunkResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetLinkedNotebookSyncChunkResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetLinkedNotebookSyncChunkResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetLinkedNotebookSyncChunkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetLinkedNotebookSyncChunkResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
type NoteStoreListNotebooksArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1" json:"authenticationToken"`
}

func NewNoteStoreListNotebooksArgs() *NoteStoreListNotebooksArgs {
	return &NoteStoreListNotebooksArgs{}
}

func (p *NoteStoreListNotebooksArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}
func (p *NoteStoreListNotebooksArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreListNotebooksArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreListNotebooksArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listNotebooks_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreListNotebooksArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreListNotebooksArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreListNotebooksArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
type NoteStoreListNotebooksResult struct {
	Success         []*types.Notebook           `thrift:"success,0" json:"success,omitempty"`
	UserException   *errors.EDAMUserException   `thrift:"userException,1" json:"userException,omitempty"`
	SystemException *errors.EDAMSystemException `thrift:"systemException,2" json:"systemException,omitempty"`
}

func NewNoteStoreListNotebooksResult() *NoteStoreListNotebooksResult {
	return &NoteStoreListNotebooksResult{}
}

var NoteStoreListNotebooksResult_Success_DEFAULT []*types.Notebook

func (p *NoteStoreListNotebooksResult) GetSuccess() []*types.Notebook {
	return p.Success
}

var NoteStoreListNotebooksResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreListNotebooksResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreListNotebooksResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreListNotebooksResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreListNotebooksResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreListNotebooksResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreListNotebooksResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreListNotebooksResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreListNotebooksResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreListNotebooksResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreListNotebooksResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*types.Notebook, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem181 := &types.Notebook{}
		if err := _elem181.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem181), err)
		}
		p.Success = append(p.Success, _elem181)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NoteStoreListNotebooksResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreListNotebooksResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreListNotebooksResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listNotebooks_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreListNotebooksResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListNotebooksResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListNotebooksResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListNotebooksResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreListNotebooksResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
type NoteStoreGetNotebookArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
}

func NewNoteStoreGetNotebookArgs() *NoteStoreGetNotebookArgs {
	return &NoteStoreGetNotebookArgs{}
}

func (p *NoteStoreGetNotebookArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreGetNotebookArgs) GetGUID() types.GUID {
	return p.GUID
}
func (p *NoteStoreGetNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetNotebookArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreGetNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNotebook_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNotebookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetNotebookArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreGetNotebookResult struct {
	Success           *types.Notebook               `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreGetNotebookResult() *NoteStoreGetNotebookResult {
	return &NoteStoreGetNotebookResult{}
}

var NoteStoreGetNotebookResult_Success_DEFAULT *types.Notebook

func (p *NoteStoreGetNotebookResult) GetSuccess() *types.Notebook {
	if !p.IsSetSuccess() {
		return NoteStoreGetNotebookResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreGetNotebookResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetNotebookResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetNotebookResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetNotebookResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetNotebookResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetNotebookResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreGetNotebookResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreGetNotebookResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreGetNotebookResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreGetNotebookResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetNotebookResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetNotebookResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetNotebookResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreGetNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetNotebookResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &types.Notebook{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreGetNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetNotebookResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreGetNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNotebook_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNotebookResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetNotebookResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
type NoteStoreGetDefaultNotebookArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1" json:"authenticationToken"`
}

func NewNoteStoreGetDefaultNotebookArgs() *NoteStoreGetDefaultNotebookArgs {
	return &NoteStoreGetDefaultNotebookArgs{}
}

func (p *NoteStoreGetDefaultNotebookArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}
func (p *NoteStoreGetDefaultNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetDefaultNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetDefaultNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDefaultNotebook_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetDefaultNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetDefaultNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetDefaultNotebookArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
type NoteStoreGetDefaultNotebookResult struct {
	Success         *types.Notebook             `thrift:"success,0" json:"success,omitempty"`
	UserException   *errors.EDAMUserException   `thrift:"userException,1" json:"userException,omitempty"`
	SystemException *errors.EDAMSystemException `thrift:"systemException,2" json:"systemException,omitempty"`
}

func NewNoteStoreGetDefaultNotebookResult() *NoteStoreGetDefaultNotebookResult {
	return &NoteStoreGetDefaultNotebookResult{}
}

var NoteStoreGetDefaultNotebookResult_Success_DEFAULT *types.Notebook

func (p *NoteStoreGetDefaultNotebookResult) GetSuccess() *types.Notebook {
	if !p.IsSetSuccess() {
		return NoteStoreGetDefaultNotebookResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreGetDefaultNotebookResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetDefaultNotebookResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetDefaultNotebookResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetDefaultNotebookResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetDefaultNotebookResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetDefaultNotebookResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreGetDefaultNotebookResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetDefaultNotebookResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetDefaultNotebookResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetDefaultNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetDefaultNotebookResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &types.Notebook{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreGetDefaultNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetDefaultNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetDefaultNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDefaultNotebook_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetDefaultNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetDefaultNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetDefaultNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetDefaultNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetDefaultNotebookResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - Notebook
type NoteStoreCreateNotebookArgs struct {
	AuthenticationToken string          `thrift:"authenticationToken,1" json:"authenticationToken"`
	Notebook            *types.Notebook `thrift:"notebook,2" json:"notebook"`
}

func NewNoteStoreCreateNotebookArgs() *NoteStoreCreateNotebookArgs {
	return &NoteStoreCreateNotebookArgs{}
}

func (p *NoteStoreCreateNotebookArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

var NoteStoreCreateNotebookArgs_Notebook_DEFAULT *types.Notebook

func (p *NoteStoreCreateNotebookArgs) GetNotebook() *types.Notebook {
	if !p.IsSetNotebook() {
		return NoteStoreCreateNotebookArgs_Notebook_DEFAULT
	}
	return p.Notebook
}
func (p *NoteStoreCreateNotebookArgs) IsSetNotebook() bool {
	return p.Notebook != nil
}

func (p *NoteStoreCreateNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreCreateNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreCreateNotebookArgs) readField2(iprot thrift.TProtocol) error {
	p.Notebook = &types.Notebook{}
	if err := p.Notebook.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Notebook), err)
	}
	return nil
}

func (p *NoteStoreCreateNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createNotebook_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreCreateNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreCreateNotebookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notebook", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notebook: ", p), err)
	}
	if err := p.Notebook.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Notebook), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notebook: ", p), err)
	}
	return err
}

func (p *NoteStoreCreateNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreCreateNotebookArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
type NoteStoreCreateNotebookResult struct {
	Success         *types.Notebook             `thrift:"success,0" json:"success,omitempty"`
	UserException   *errors.EDAMUserException   `thrift:"userException,1" json:"userException,omitempty"`
	SystemException *errors.EDAMSystemException `thrift:"systemException,2" json:"systemException,omitempty"`
}

func NewNoteStoreCreateNotebookResult() *NoteStoreCreateNotebookResult {
	return &NoteStoreCreateNotebookResult{}
}

var NoteStoreCreateNotebookResult_Success_DEFAULT *types.Notebook

func (p *NoteStoreCreateNotebookResult) GetSuccess() *types.Notebook {
	if !p.IsSetSuccess() {
		return NoteStoreCreateNotebookResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreCreateNotebookResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreCreateNotebookResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreCreateNotebookResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreCreateNotebookResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreCreateNotebookResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreCreateNotebookResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreCreateNotebookResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreCreateNotebookResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreCreateNotebookResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreCreateNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreCreateNotebookResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &types.Notebook{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreCreateNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreCreateNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreCreateNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createNotebook_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreCreateNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCreateNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCreateNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCreateNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreCreateNotebookResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - Notebook
type NoteStoreUpdateNotebookArgs struct {
	AuthenticationToken string          `thrift:"authenticationToken,1" json:"authenticationToken"`
	Notebook            *types.Notebook `thrift:"notebook,2" json:"notebook"`
}

func NewNoteStoreUpdateNotebookArgs() *NoteStoreUpdateNotebookArgs {
	return &NoteStoreUpdateNotebookArgs{}
}

func (p *NoteStoreUpdateNotebookArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

var NoteStoreUpdateNotebookArgs_Notebook_DEFAULT *types.Notebook

func (p *NoteStoreUpdateNotebookArgs) GetNotebook() *types.Notebook {
	if !p.IsSetNotebook() {
		return NoteStoreUpdateNotebookArgs_Notebook_DEFAULT
	}
	return p.Notebook
}
func (p *NoteStoreUpdateNotebookArgs) IsSetNotebook() bool {
	return p.Notebook != nil
}

func (p *NoteStoreUpdateNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreUpdateNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreUpdateNotebookArgs) readField2(iprot thrift.TProtocol) error {
	p.Notebook = &types.Notebook{}
	if err := p.Notebook.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Notebook), err)
	}
	return nil
}

func (p *NoteStoreUpdateNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateNotebook_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreUpdateNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreUpdateNotebookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notebook", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notebook: ", p), err)
	}
	if err := p.Notebook.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Notebook), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notebook: ", p), err)
	}
	return err
}

func (p *NoteStoreUpdateNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreUpdateNotebookArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreUpdateNotebookResult struct {
	Success           *int32                        `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreUpdateNotebookResult() *NoteStoreUpdateNotebookResult {
	return &NoteStoreUpdateNotebookResult{}
}

var NoteStoreUpdateNotebookResult_Success_DEFAULT int32

func (p *NoteStoreUpdateNotebookResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return NoteStoreUpdateNotebookResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreUpdateNotebookResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreUpdateNotebookResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreUpdateNotebookResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreUpdateNotebookResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreUpdateNotebookResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreUpdateNotebookResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreUpdateNotebookResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreUpdateNotebookResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreUpdateNotebookResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreUpdateNotebookResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreUpdateNotebookResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreUpdateNotebookResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreUpdateNotebookResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreUpdateNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreUpdateNotebookResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreUpdateNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreUpdateNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreUpdateNotebookResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreUpdateNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateNotebook_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreUpdateNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateNotebookResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreUpdateNotebookResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
type NoteStoreExpungeNotebookArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
}

func NewNoteStoreExpungeNotebookArgs() *NoteStoreExpungeNotebookArgs {
	return &NoteStoreExpungeNotebookArgs{}
}

func (p *NoteStoreExpungeNotebookArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreExpungeNotebookArgs) GetGUID() types.GUID {
	return p.GUID
}
func (p *NoteStoreExpungeNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreExpungeNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreExpungeNotebookArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreExpungeNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeNotebook_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreExpungeNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreExpungeNotebookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreExpungeNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreExpungeNotebookArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreExpungeNotebookResult struct {
	Success           *int32                        `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreExpungeNotebookResult() *NoteStoreExpungeNotebookResult {
	return &NoteStoreExpungeNotebookResult{}
}

var NoteStoreExpungeNotebookResult_Success_DEFAULT int32

func (p *NoteStoreExpungeNotebookResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return NoteStoreExpungeNotebookResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreExpungeNotebookResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreExpungeNotebookResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreExpungeNotebookResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreExpungeNotebookResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreExpungeNotebookResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreExpungeNotebookResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreExpungeNotebookResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreExpungeNotebookResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreExpungeNotebookResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreExpungeNotebookResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreExpungeNotebookResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreExpungeNotebookResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreExpungeNotebookResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreExpungeNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreExpungeNotebookResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreExpungeNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreExpungeNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreExpungeNotebookResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreExpungeNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeNotebook_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreExpungeNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeNotebookResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreExpungeNotebookResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
type NoteStoreListTagsArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1" json:"authenticationToken"`
}

func NewNoteStoreListTagsArgs() *NoteStoreListTagsArgs {
	return &NoteStoreListTagsArgs{}
}

func (p *NoteStoreListTagsArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}
func (p *NoteStoreListTagsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreListTagsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreListTagsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listTags_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreListTagsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreListTagsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreListTagsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
type NoteStoreListTagsResult struct {
	Success         []*types.Tag                `thrift:"success,0" json:"success,omitempty"`
	UserException   *errors.EDAMUserException   `thrift:"userException,1" json:"userException,omitempty"`
	SystemException *errors.EDAMSystemException `thrift:"systemException,2" json:"systemException,omitempty"`
}

func NewNoteStoreListTagsResult() *NoteStoreListTagsResult {
	return &NoteStoreListTagsResult{}
}

var NoteStoreListTagsResult_Success_DEFAULT []*types.Tag

func (p *NoteStoreListTagsResult) GetSuccess() []*types.Tag {
	return p.Success
}

var NoteStoreListTagsResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreListTagsResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreListTagsResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreListTagsResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreListTagsResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreListTagsResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreListTagsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreListTagsResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreListTagsResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreListTagsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreListTagsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*types.Tag, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem182 := &types.Tag{}
		if err := _elem182.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem182), err)
		}
		p.Success = append(p.Success, _elem182)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NoteStoreListTagsResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreListTagsResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreListTagsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listTags_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreListTagsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListTagsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListTagsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListTagsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreListTagsResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - NotebookGuid
type NoteStoreListTagsByNotebookArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	NotebookGuid        types.GUID `thrift:"notebookGuid,2" json:"notebookGuid"`
}

func NewNoteStoreListTagsByNotebookArgs() *NoteStoreListTagsByNotebookArgs {
	return &NoteStoreListTagsByNotebookArgs{}
}

func (p *NoteStoreListTagsByNotebookArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreListTagsByNotebookArgs) GetNotebookGuid() types.GUID {
	return p.NotebookGuid
}
func (p *NoteStoreListTagsByNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreListTagsByNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreListTagsByNotebookArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.NotebookGuid = temp
	}
	return nil
}

func (p *NoteStoreListTagsByNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listTagsByNotebook_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreListTagsByNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreListTagsByNotebookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notebookGuid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notebookGuid: ", p), err)
	}
	if err := oprot.WriteString(string(p.NotebookGuid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notebookGuid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notebookGuid: ", p), err)
	}
	return err
}

func (p *NoteStoreListTagsByNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreListTagsByNotebookArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreListTagsByNotebookResult struct {
	Success           []*types.Tag                  `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreListTagsByNotebookResult() *NoteStoreListTagsByNotebookResult {
	return &NoteStoreListTagsByNotebookResult{}
}

var NoteStoreListTagsByNotebookResult_Success_DEFAULT []*types.Tag

func (p *NoteStoreListTagsByNotebookResult) GetSuccess() []*types.Tag {
	return p.Success
}

var NoteStoreListTagsByNotebookResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreListTagsByNotebookResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreListTagsByNotebookResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreListTagsByNotebookResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreListTagsByNotebookResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreListTagsByNotebookResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreListTagsByNotebookResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreListTagsByNotebookResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreListTagsByNotebookResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreListTagsByNotebookResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreListTagsByNotebookResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreListTagsByNotebookResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreListTagsByNotebookResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreListTagsByNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreListTagsByNotebookResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*types.Tag, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem183 := &types.Tag{}
		if err := _elem183.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem183), err)
		}
		p.Success = append(p.Success, _elem183)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NoteStoreListTagsByNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreListTagsByNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreListTagsByNotebookResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreListTagsByNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listTagsByNotebook_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreListTagsByNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListTagsByNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListTagsByNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListTagsByNotebookResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListTagsByNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreListTagsByNotebookResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
type NoteStoreGetTagArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
}

func NewNoteStoreGetTagArgs() *NoteStoreGetTagArgs {
	return &NoteStoreGetTagArgs{}
}

func (p *NoteStoreGetTagArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreGetTagArgs) GetGUID() types.GUID {
	return p.GUID
}
func (p *NoteStoreGetTagArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetTagArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetTagArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreGetTagArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTag_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetTagArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetTagArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreGetTagArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreGetTagResult struct {
	Success           *types.Tag                    `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreGetTagResult() *NoteStoreGetTagResult {
	return &NoteStoreGetTagResult{}
}

var NoteStoreGetTagResult_Success_DEFAULT *types.Tag

func (p *NoteStoreGetTagResult) GetSuccess() *types.Tag {
	if !p.IsSetSuccess() {
		return NoteStoreGetTagResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreGetTagResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetTagResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetTagResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetTagResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetTagResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetTagResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreGetTagResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreGetTagResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreGetTagResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreGetTagResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetTagResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetTagResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetTagResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreGetTagResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetTagResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &types.Tag{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreGetTagResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetTagResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetTagResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreGetTagResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTag_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetTagResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetTagResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetTagResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetTagResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetTagResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetTagResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - Tag
type NoteStoreCreateTagArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	Tag                 *types.Tag `thrift:"tag,2" json:"tag"`
}

func NewNoteStoreCreateTagArgs() *NoteStoreCreateTagArgs {
	return &NoteStoreCreateTagArgs{}
}

func (p *NoteStoreCreateTagArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

var NoteStoreCreateTagArgs_Tag_DEFAULT *types.Tag

func (p *NoteStoreCreateTagArgs) GetTag() *types.Tag {
	if !p.IsSetTag() {
		return NoteStoreCreateTagArgs_Tag_DEFAULT
	}
	return p.Tag
}
func (p *NoteStoreCreateTagArgs) IsSetTag() bool {
	return p.Tag != nil
}

func (p *NoteStoreCreateTagArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreCreateTagArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreCreateTagArgs) readField2(iprot thrift.TProtocol) error {
	p.Tag = &types.Tag{}
	if err := p.Tag.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tag), err)
	}
	return nil
}

func (p *NoteStoreCreateTagArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createTag_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreCreateTagArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreCreateTagArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tag", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag: ", p), err)
	}
	if err := p.Tag.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tag), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag: ", p), err)
	}
	return err
}

func (p *NoteStoreCreateTagArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreCreateTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreCreateTagResult struct {
	Success           *types.Tag                    `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreCreateTagResult() *NoteStoreCreateTagResult {
	return &NoteStoreCreateTagResult{}
}

var NoteStoreCreateTagResult_Success_DEFAULT *types.Tag

func (p *NoteStoreCreateTagResult) GetSuccess() *types.Tag {
	if !p.IsSetSuccess() {
		return NoteStoreCreateTagResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreCreateTagResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreCreateTagResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreCreateTagResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreCreateTagResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreCreateTagResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreCreateTagResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreCreateTagResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreCreateTagResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreCreateTagResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreCreateTagResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreCreateTagResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreCreateTagResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreCreateTagResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreCreateTagResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreCreateTagResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &types.Tag{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreCreateTagResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreCreateTagResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreCreateTagResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreCreateTagResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createTag_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreCreateTagResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCreateTagResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCreateTagResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCreateTagResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCreateTagResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreCreateTagResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - Tag
type NoteStoreUpdateTagArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	Tag                 *types.Tag `thrift:"tag,2" json:"tag"`
}

func NewNoteStoreUpdateTagArgs() *NoteStoreUpdateTagArgs {
	return &NoteStoreUpdateTagArgs{}
}

func (p *NoteStoreUpdateTagArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

var NoteStoreUpdateTagArgs_Tag_DEFAULT *types.Tag

func (p *NoteStoreUpdateTagArgs) GetTag() *types.Tag {
	if !p.IsSetTag() {
		return NoteStoreUpdateTagArgs_Tag_DEFAULT
	}
	return p.Tag
}
func (p *NoteStoreUpdateTagArgs) IsSetTag() bool {
	return p.Tag != nil
}

func (p *NoteStoreUpdateTagArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreUpdateTagArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreUpdateTagArgs) readField2(iprot thrift.TProtocol) error {
	p.Tag = &types.Tag{}
	if err := p.Tag.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Tag), err)
	}
	return nil
}

func (p *NoteStoreUpdateTagArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateTag_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreUpdateTagArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreUpdateTagArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tag", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tag: ", p), err)
	}
	if err := p.Tag.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Tag), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tag: ", p), err)
	}
	return err
}

func (p *NoteStoreUpdateTagArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreUpdateTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreUpdateTagResult struct {
	Success           *int32                        `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreUpdateTagResult() *NoteStoreUpdateTagResult {
	return &NoteStoreUpdateTagResult{}
}

var NoteStoreUpdateTagResult_Success_DEFAULT int32

func (p *NoteStoreUpdateTagResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return NoteStoreUpdateTagResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreUpdateTagResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreUpdateTagResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreUpdateTagResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreUpdateTagResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreUpdateTagResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreUpdateTagResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreUpdateTagResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreUpdateTagResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreUpdateTagResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreUpdateTagResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreUpdateTagResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreUpdateTagResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreUpdateTagResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreUpdateTagResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreUpdateTagResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreUpdateTagResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreUpdateTagResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreUpdateTagResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreUpdateTagResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateTag_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreUpdateTagResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateTagResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateTagResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateTagResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateTagResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreUpdateTagResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
type NoteStoreUntagAllArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
}

func NewNoteStoreUntagAllArgs() *NoteStoreUntagAllArgs {
	return &NoteStoreUntagAllArgs{}
}

func (p *NoteStoreUntagAllArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreUntagAllArgs) GetGUID() types.GUID {
	return p.GUID
}
func (p *NoteStoreUntagAllArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreUntagAllArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreUntagAllArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreUntagAllArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("untagAll_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreUntagAllArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreUntagAllArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreUntagAllArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreUntagAllArgs(%+v)", *p)
}

// Attributes:
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreUntagAllResult struct {
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreUntagAllResult() *NoteStoreUntagAllResult {
	return &NoteStoreUntagAllResult{}
}

var NoteStoreUntagAllResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreUntagAllResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreUntagAllResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreUntagAllResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreUntagAllResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreUntagAllResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreUntagAllResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreUntagAllResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreUntagAllResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreUntagAllResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreUntagAllResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreUntagAllResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreUntagAllResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreUntagAllResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreUntagAllResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreUntagAllResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreUntagAllResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("untagAll_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreUntagAllResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUntagAllResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUntagAllResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUntagAllResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreUntagAllResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
type NoteStoreExpungeTagArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
}

func NewNoteStoreExpungeTagArgs() *NoteStoreExpungeTagArgs {
	return &NoteStoreExpungeTagArgs{}
}

func (p *NoteStoreExpungeTagArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreExpungeTagArgs) GetGUID() types.GUID {
	return p.GUID
}
func (p *NoteStoreExpungeTagArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreExpungeTagArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreExpungeTagArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreExpungeTagArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeTag_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreExpungeTagArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreExpungeTagArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreExpungeTagArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreExpungeTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreExpungeTagResult struct {
	Success           *int32                        `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreExpungeTagResult() *NoteStoreExpungeTagResult {
	return &NoteStoreExpungeTagResult{}
}

var NoteStoreExpungeTagResult_Success_DEFAULT int32

func (p *NoteStoreExpungeTagResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return NoteStoreExpungeTagResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreExpungeTagResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreExpungeTagResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreExpungeTagResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreExpungeTagResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreExpungeTagResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreExpungeTagResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreExpungeTagResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreExpungeTagResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreExpungeTagResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreExpungeTagResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreExpungeTagResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreExpungeTagResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreExpungeTagResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreExpungeTagResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreExpungeTagResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreExpungeTagResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreExpungeTagResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreExpungeTagResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreExpungeTagResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeTag_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreExpungeTagResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeTagResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeTagResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeTagResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeTagResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreExpungeTagResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
type NoteStoreListSearchesArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1" json:"authenticationToken"`
}

func NewNoteStoreListSearchesArgs() *NoteStoreListSearchesArgs {
	return &NoteStoreListSearchesArgs{}
}

func (p *NoteStoreListSearchesArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}
func (p *NoteStoreListSearchesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreListSearchesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreListSearchesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listSearches_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreListSearchesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreListSearchesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreListSearchesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
type NoteStoreListSearchesResult struct {
	Success         []*types.SavedSearch        `thrift:"success,0" json:"success,omitempty"`
	UserException   *errors.EDAMUserException   `thrift:"userException,1" json:"userException,omitempty"`
	SystemException *errors.EDAMSystemException `thrift:"systemException,2" json:"systemException,omitempty"`
}

func NewNoteStoreListSearchesResult() *NoteStoreListSearchesResult {
	return &NoteStoreListSearchesResult{}
}

var NoteStoreListSearchesResult_Success_DEFAULT []*types.SavedSearch

func (p *NoteStoreListSearchesResult) GetSuccess() []*types.SavedSearch {
	return p.Success
}

var NoteStoreListSearchesResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreListSearchesResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreListSearchesResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreListSearchesResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreListSearchesResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreListSearchesResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreListSearchesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreListSearchesResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreListSearchesResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreListSearchesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreListSearchesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*types.SavedSearch, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem184 := &types.SavedSearch{}
		if err := _elem184.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem184), err)
		}
		p.Success = append(p.Success, _elem184)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NoteStoreListSearchesResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreListSearchesResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreListSearchesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listSearches_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreListSearchesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListSearchesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListSearchesResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListSearchesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreListSearchesResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
type NoteStoreGetSearchArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
}

func NewNoteStoreGetSearchArgs() *NoteStoreGetSearchArgs {
	return &NoteStoreGetSearchArgs{}
}

func (p *NoteStoreGetSearchArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreGetSearchArgs) GetGUID() types.GUID {
	return p.GUID
}
func (p *NoteStoreGetSearchArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetSearchArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetSearchArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreGetSearchArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSearch_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetSearchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetSearchArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreGetSearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetSearchArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreGetSearchResult struct {
	Success           *types.SavedSearch            `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreGetSearchResult() *NoteStoreGetSearchResult {
	return &NoteStoreGetSearchResult{}
}

var NoteStoreGetSearchResult_Success_DEFAULT *types.SavedSearch

func (p *NoteStoreGetSearchResult) GetSuccess() *types.SavedSearch {
	if !p.IsSetSuccess() {
		return NoteStoreGetSearchResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreGetSearchResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetSearchResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetSearchResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetSearchResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetSearchResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetSearchResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreGetSearchResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreGetSearchResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreGetSearchResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreGetSearchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetSearchResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetSearchResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetSearchResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreGetSearchResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetSearchResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &types.SavedSearch{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreGetSearchResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetSearchResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetSearchResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreGetSearchResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSearch_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetSearchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetSearchResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetSearchResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetSearchResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetSearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetSearchResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - Search
type NoteStoreCreateSearchArgs struct {
	AuthenticationToken string             `thrift:"authenticationToken,1" json:"authenticationToken"`
	Search              *types.SavedSearch `thrift:"search,2" json:"search"`
}

func NewNoteStoreCreateSearchArgs() *NoteStoreCreateSearchArgs {
	return &NoteStoreCreateSearchArgs{}
}

func (p *NoteStoreCreateSearchArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

var NoteStoreCreateSearchArgs_Search_DEFAULT *types.SavedSearch

func (p *NoteStoreCreateSearchArgs) GetSearch() *types.SavedSearch {
	if !p.IsSetSearch() {
		return NoteStoreCreateSearchArgs_Search_DEFAULT
	}
	return p.Search
}
func (p *NoteStoreCreateSearchArgs) IsSetSearch() bool {
	return p.Search != nil
}

func (p *NoteStoreCreateSearchArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreCreateSearchArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreCreateSearchArgs) readField2(iprot thrift.TProtocol) error {
	p.Search = &types.SavedSearch{}
	if err := p.Search.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Search), err)
	}
	return nil
}

func (p *NoteStoreCreateSearchArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createSearch_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreCreateSearchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreCreateSearchArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("search", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:search: ", p), err)
	}
	if err := p.Search.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Search), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:search: ", p), err)
	}
	return err
}

func (p *NoteStoreCreateSearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreCreateSearchArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
type NoteStoreCreateSearchResult struct {
	Success         *types.SavedSearch          `thrift:"success,0" json:"success,omitempty"`
	UserException   *errors.EDAMUserException   `thrift:"userException,1" json:"userException,omitempty"`
	SystemException *errors.EDAMSystemException `thrift:"systemException,2" json:"systemException,omitempty"`
}

func NewNoteStoreCreateSearchResult() *NoteStoreCreateSearchResult {
	return &NoteStoreCreateSearchResult{}
}

var NoteStoreCreateSearchResult_Success_DEFAULT *types.SavedSearch

func (p *NoteStoreCreateSearchResult) GetSuccess() *types.SavedSearch {
	if !p.IsSetSuccess() {
		return NoteStoreCreateSearchResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreCreateSearchResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreCreateSearchResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreCreateSearchResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreCreateSearchResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreCreateSearchResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreCreateSearchResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreCreateSearchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreCreateSearchResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreCreateSearchResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreCreateSearchResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreCreateSearchResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &types.SavedSearch{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreCreateSearchResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreCreateSearchResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreCreateSearchResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createSearch_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreCreateSearchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCreateSearchResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCreateSearchResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCreateSearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreCreateSearchResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - Search
type NoteStoreUpdateSearchArgs struct {
	AuthenticationToken string             `thrift:"authenticationToken,1" json:"authenticationToken"`
	Search              *types.SavedSearch `thrift:"search,2" json:"search"`
}

func NewNoteStoreUpdateSearchArgs() *NoteStoreUpdateSearchArgs {
	return &NoteStoreUpdateSearchArgs{}
}

func (p *NoteStoreUpdateSearchArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

var NoteStoreUpdateSearchArgs_Search_DEFAULT *types.SavedSearch

func (p *NoteStoreUpdateSearchArgs) GetSearch() *types.SavedSearch {
	if !p.IsSetSearch() {
		return NoteStoreUpdateSearchArgs_Search_DEFAULT
	}
	return p.Search
}
func (p *NoteStoreUpdateSearchArgs) IsSetSearch() bool {
	return p.Search != nil
}

func (p *NoteStoreUpdateSearchArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreUpdateSearchArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreUpdateSearchArgs) readField2(iprot thrift.TProtocol) error {
	p.Search = &types.SavedSearch{}
	if err := p.Search.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Search), err)
	}
	return nil
}

func (p *NoteStoreUpdateSearchArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSearch_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreUpdateSearchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreUpdateSearchArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("search", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:search: ", p), err)
	}
	if err := p.Search.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Search), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:search: ", p), err)
	}
	return err
}

func (p *NoteStoreUpdateSearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreUpdateSearchArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreUpdateSearchResult struct {
	Success           *int32                        `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreUpdateSearchResult() *NoteStoreUpdateSearchResult {
	return &NoteStoreUpdateSearchResult{}
}

var NoteStoreUpdateSearchResult_Success_DEFAULT int32

func (p *NoteStoreUpdateSearchResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return NoteStoreUpdateSearchResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreUpdateSearchResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreUpdateSearchResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreUpdateSearchResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreUpdateSearchResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreUpdateSearchResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreUpdateSearchResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreUpdateSearchResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreUpdateSearchResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreUpdateSearchResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreUpdateSearchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreUpdateSearchResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreUpdateSearchResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreUpdateSearchResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreUpdateSearchResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreUpdateSearchResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreUpdateSearchResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreUpdateSearchResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreUpdateSearchResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreUpdateSearchResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSearch_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreUpdateSearchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateSearchResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateSearchResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateSearchResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateSearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreUpdateSearchResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
type NoteStoreExpungeSearchArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
}

func NewNoteStoreExpungeSearchArgs() *NoteStoreExpungeSearchArgs {
	return &NoteStoreExpungeSearchArgs{}
}

func (p *NoteStoreExpungeSearchArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreExpungeSearchArgs) GetGUID() types.GUID {
	return p.GUID
}
func (p *NoteStoreExpungeSearchArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreExpungeSearchArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreExpungeSearchArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreExpungeSearchArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeSearch_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreExpungeSearchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreExpungeSearchArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreExpungeSearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreExpungeSearchArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreExpungeSearchResult struct {
	Success           *int32                        `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreExpungeSearchResult() *NoteStoreExpungeSearchResult {
	return &NoteStoreExpungeSearchResult{}
}

var NoteStoreExpungeSearchResult_Success_DEFAULT int32

func (p *NoteStoreExpungeSearchResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return NoteStoreExpungeSearchResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreExpungeSearchResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreExpungeSearchResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreExpungeSearchResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreExpungeSearchResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreExpungeSearchResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreExpungeSearchResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreExpungeSearchResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreExpungeSearchResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreExpungeSearchResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreExpungeSearchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreExpungeSearchResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreExpungeSearchResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreExpungeSearchResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreExpungeSearchResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreExpungeSearchResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreExpungeSearchResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreExpungeSearchResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreExpungeSearchResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreExpungeSearchResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeSearch_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreExpungeSearchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeSearchResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeSearchResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeSearchResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeSearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreExpungeSearchResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - Filter
//  - Offset
//  - MaxNotes
type NoteStoreFindNotesArgs struct {
	AuthenticationToken string      `thrift:"authenticationToken,1" json:"authenticationToken"`
	Filter              *NoteFilter `thrift:"filter,2" json:"filter"`
	Offset              int32       `thrift:"offset,3" json:"offset"`
	MaxNotes            int32       `thrift:"maxNotes,4" json:"maxNotes"`
}

func NewNoteStoreFindNotesArgs() *NoteStoreFindNotesArgs {
	return &NoteStoreFindNotesArgs{}
}

func (p *NoteStoreFindNotesArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

var NoteStoreFindNotesArgs_Filter_DEFAULT *NoteFilter

func (p *NoteStoreFindNotesArgs) GetFilter() *NoteFilter {
	if !p.IsSetFilter() {
		return NoteStoreFindNotesArgs_Filter_DEFAULT
	}
	return p.Filter
}

func (p *NoteStoreFindNotesArgs) GetOffset() int32 {
	return p.Offset
}

func (p *NoteStoreFindNotesArgs) GetMaxNotes() int32 {
	return p.MaxNotes
}
func (p *NoteStoreFindNotesArgs) IsSetFilter() bool {
	return p.Filter != nil
}

func (p *NoteStoreFindNotesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreFindNotesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreFindNotesArgs) readField2(iprot thrift.TProtocol) error {
	p.Filter = &NoteFilter{}
	if err := p.Filter.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Filter), err)
	}
	return nil
}

func (p *NoteStoreFindNotesArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Offset = v
	}
	return nil
}

func (p *NoteStoreFindNotesArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MaxNotes = v
	}
	return nil
}

func (p *NoteStoreFindNotesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findNotes_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreFindNotesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreFindNotesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("filter", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:filter: ", p), err)
	}
	if err := p.Filter.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Filter), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:filter: ", p), err)
	}
	return err
}

func (p *NoteStoreFindNotesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("offset", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:offset: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Offset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.offset (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:offset: ", p), err)
	}
	return err
}

func (p *NoteStoreFindNotesArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxNotes", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:maxNotes: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MaxNotes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxNotes (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:maxNotes: ", p), err)
	}
	return err
}

func (p *NoteStoreFindNotesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreFindNotesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreFindNotesResult struct {
	Success           *NoteList                     `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreFindNotesResult() *NoteStoreFindNotesResult {
	return &NoteStoreFindNotesResult{}
}

var NoteStoreFindNotesResult_Success_DEFAULT *NoteList

func (p *NoteStoreFindNotesResult) GetSuccess() *NoteList {
	if !p.IsSetSuccess() {
		return NoteStoreFindNotesResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreFindNotesResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreFindNotesResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreFindNotesResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreFindNotesResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreFindNotesResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreFindNotesResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreFindNotesResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreFindNotesResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreFindNotesResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreFindNotesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreFindNotesResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreFindNotesResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreFindNotesResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreFindNotesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreFindNotesResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &NoteList{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreFindNotesResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreFindNotesResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreFindNotesResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreFindNotesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findNotes_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreFindNotesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreFindNotesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreFindNotesResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreFindNotesResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreFindNotesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreFindNotesResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - Filter
//  - GUID
type NoteStoreFindNoteOffsetArgs struct {
	AuthenticationToken string      `thrift:"authenticationToken,1" json:"authenticationToken"`
	Filter              *NoteFilter `thrift:"filter,2" json:"filter"`
	GUID                types.GUID  `thrift:"guid,3" json:"guid"`
}

func NewNoteStoreFindNoteOffsetArgs() *NoteStoreFindNoteOffsetArgs {
	return &NoteStoreFindNoteOffsetArgs{}
}

func (p *NoteStoreFindNoteOffsetArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

var NoteStoreFindNoteOffsetArgs_Filter_DEFAULT *NoteFilter

func (p *NoteStoreFindNoteOffsetArgs) GetFilter() *NoteFilter {
	if !p.IsSetFilter() {
		return NoteStoreFindNoteOffsetArgs_Filter_DEFAULT
	}
	return p.Filter
}

func (p *NoteStoreFindNoteOffsetArgs) GetGUID() types.GUID {
	return p.GUID
}
func (p *NoteStoreFindNoteOffsetArgs) IsSetFilter() bool {
	return p.Filter != nil
}

func (p *NoteStoreFindNoteOffsetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreFindNoteOffsetArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreFindNoteOffsetArgs) readField2(iprot thrift.TProtocol) error {
	p.Filter = &NoteFilter{}
	if err := p.Filter.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Filter), err)
	}
	return nil
}

func (p *NoteStoreFindNoteOffsetArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreFindNoteOffsetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findNoteOffset_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreFindNoteOffsetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreFindNoteOffsetArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("filter", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:filter: ", p), err)
	}
	if err := p.Filter.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Filter), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:filter: ", p), err)
	}
	return err
}

func (p *NoteStoreFindNoteOffsetArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreFindNoteOffsetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreFindNoteOffsetArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreFindNoteOffsetResult struct {
	Success           *int32                        `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreFindNoteOffsetResult() *NoteStoreFindNoteOffsetResult {
	return &NoteStoreFindNoteOffsetResult{}
}

var NoteStoreFindNoteOffsetResult_Success_DEFAULT int32

func (p *NoteStoreFindNoteOffsetResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return NoteStoreFindNoteOffsetResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreFindNoteOffsetResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreFindNoteOffsetResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreFindNoteOffsetResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreFindNoteOffsetResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreFindNoteOffsetResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreFindNoteOffsetResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreFindNoteOffsetResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreFindNoteOffsetResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreFindNoteOffsetResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreFindNoteOffsetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreFindNoteOffsetResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreFindNoteOffsetResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreFindNoteOffsetResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreFindNoteOffsetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreFindNoteOffsetResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreFindNoteOffsetResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreFindNoteOffsetResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreFindNoteOffsetResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreFindNoteOffsetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findNoteOffset_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreFindNoteOffsetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreFindNoteOffsetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreFindNoteOffsetResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreFindNoteOffsetResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreFindNoteOffsetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreFindNoteOffsetResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - Filter
//  - Offset
//  - MaxNotes
//  - ResultSpec
type NoteStoreFindNotesMetadataArgs struct {
	AuthenticationToken string                   `thrift:"authenticationToken,1" json:"authenticationToken"`
	Filter              *NoteFilter              `thrift:"filter,2" json:"filter"`
	Offset              int32                    `thrift:"offset,3" json:"offset"`
	MaxNotes            int32                    `thrift:"maxNotes,4" json:"maxNotes"`
	ResultSpec          *NotesMetadataResultSpec `thrift:"resultSpec,5" json:"resultSpec"`
}

func NewNoteStoreFindNotesMetadataArgs() *NoteStoreFindNotesMetadataArgs {
	return &NoteStoreFindNotesMetadataArgs{}
}

func (p *NoteStoreFindNotesMetadataArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

var NoteStoreFindNotesMetadataArgs_Filter_DEFAULT *NoteFilter

func (p *NoteStoreFindNotesMetadataArgs) GetFilter() *NoteFilter {
	if !p.IsSetFilter() {
		return NoteStoreFindNotesMetadataArgs_Filter_DEFAULT
	}
	return p.Filter
}

func (p *NoteStoreFindNotesMetadataArgs) GetOffset() int32 {
	return p.Offset
}

func (p *NoteStoreFindNotesMetadataArgs) GetMaxNotes() int32 {
	return p.MaxNotes
}

var NoteStoreFindNotesMetadataArgs_ResultSpec_DEFAULT *NotesMetadataResultSpec

func (p *NoteStoreFindNotesMetadataArgs) GetResultSpec() *NotesMetadataResultSpec {
	if !p.IsSetResultSpec() {
		return NoteStoreFindNotesMetadataArgs_ResultSpec_DEFAULT
	}
	return p.ResultSpec
}
func (p *NoteStoreFindNotesMetadataArgs) IsSetFilter() bool {
	return p.Filter != nil
}

func (p *NoteStoreFindNotesMetadataArgs) IsSetResultSpec() bool {
	return p.ResultSpec != nil
}

func (p *NoteStoreFindNotesMetadataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreFindNotesMetadataArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreFindNotesMetadataArgs) readField2(iprot thrift.TProtocol) error {
	p.Filter = &NoteFilter{}
	if err := p.Filter.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Filter), err)
	}
	return nil
}

func (p *NoteStoreFindNotesMetadataArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Offset = v
	}
	return nil
}

func (p *NoteStoreFindNotesMetadataArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MaxNotes = v
	}
	return nil
}

func (p *NoteStoreFindNotesMetadataArgs) readField5(iprot thrift.TProtocol) error {
	p.ResultSpec = &NotesMetadataResultSpec{}
	if err := p.ResultSpec.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ResultSpec), err)
	}
	return nil
}

func (p *NoteStoreFindNotesMetadataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findNotesMetadata_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreFindNotesMetadataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreFindNotesMetadataArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("filter", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:filter: ", p), err)
	}
	if err := p.Filter.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Filter), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:filter: ", p), err)
	}
	return err
}

func (p *NoteStoreFindNotesMetadataArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("offset", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:offset: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Offset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.offset (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:offset: ", p), err)
	}
	return err
}

func (p *NoteStoreFindNotesMetadataArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxNotes", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:maxNotes: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MaxNotes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxNotes (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:maxNotes: ", p), err)
	}
	return err
}

func (p *NoteStoreFindNotesMetadataArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resultSpec", thrift.STRUCT, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:resultSpec: ", p), err)
	}
	if err := p.ResultSpec.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ResultSpec), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:resultSpec: ", p), err)
	}
	return err
}

func (p *NoteStoreFindNotesMetadataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreFindNotesMetadataArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreFindNotesMetadataResult struct {
	Success           *NotesMetadataList            `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreFindNotesMetadataResult() *NoteStoreFindNotesMetadataResult {
	return &NoteStoreFindNotesMetadataResult{}
}

var NoteStoreFindNotesMetadataResult_Success_DEFAULT *NotesMetadataList

func (p *NoteStoreFindNotesMetadataResult) GetSuccess() *NotesMetadataList {
	if !p.IsSetSuccess() {
		return NoteStoreFindNotesMetadataResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreFindNotesMetadataResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreFindNotesMetadataResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreFindNotesMetadataResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreFindNotesMetadataResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreFindNotesMetadataResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreFindNotesMetadataResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreFindNotesMetadataResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreFindNotesMetadataResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreFindNotesMetadataResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreFindNotesMetadataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreFindNotesMetadataResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreFindNotesMetadataResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreFindNotesMetadataResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreFindNotesMetadataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreFindNotesMetadataResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &NotesMetadataList{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreFindNotesMetadataResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreFindNotesMetadataResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreFindNotesMetadataResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreFindNotesMetadataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findNotesMetadata_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreFindNotesMetadataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreFindNotesMetadataResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreFindNotesMetadataResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreFindNotesMetadataResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreFindNotesMetadataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreFindNotesMetadataResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - Filter
//  - WithTrash
type NoteStoreFindNoteCountsArgs struct {
	AuthenticationToken string      `thrift:"authenticationToken,1" json:"authenticationToken"`
	Filter              *NoteFilter `thrift:"filter,2" json:"filter"`
	WithTrash           bool        `thrift:"withTrash,3" json:"withTrash"`
}

func NewNoteStoreFindNoteCountsArgs() *NoteStoreFindNoteCountsArgs {
	return &NoteStoreFindNoteCountsArgs{}
}

func (p *NoteStoreFindNoteCountsArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

var NoteStoreFindNoteCountsArgs_Filter_DEFAULT *NoteFilter

func (p *NoteStoreFindNoteCountsArgs) GetFilter() *NoteFilter {
	if !p.IsSetFilter() {
		return NoteStoreFindNoteCountsArgs_Filter_DEFAULT
	}
	return p.Filter
}

func (p *NoteStoreFindNoteCountsArgs) GetWithTrash() bool {
	return p.WithTrash
}
func (p *NoteStoreFindNoteCountsArgs) IsSetFilter() bool {
	return p.Filter != nil
}

func (p *NoteStoreFindNoteCountsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreFindNoteCountsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreFindNoteCountsArgs) readField2(iprot thrift.TProtocol) error {
	p.Filter = &NoteFilter{}
	if err := p.Filter.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Filter), err)
	}
	return nil
}

func (p *NoteStoreFindNoteCountsArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.WithTrash = v
	}
	return nil
}

func (p *NoteStoreFindNoteCountsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findNoteCounts_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreFindNoteCountsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreFindNoteCountsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("filter", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:filter: ", p), err)
	}
	if err := p.Filter.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Filter), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:filter: ", p), err)
	}
	return err
}

func (p *NoteStoreFindNoteCountsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withTrash", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:withTrash: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.WithTrash)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.withTrash (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:withTrash: ", p), err)
	}
	return err
}

func (p *NoteStoreFindNoteCountsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreFindNoteCountsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreFindNoteCountsResult struct {
	Success           *NoteCollectionCounts         `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreFindNoteCountsResult() *NoteStoreFindNoteCountsResult {
	return &NoteStoreFindNoteCountsResult{}
}

var NoteStoreFindNoteCountsResult_Success_DEFAULT *NoteCollectionCounts

func (p *NoteStoreFindNoteCountsResult) GetSuccess() *NoteCollectionCounts {
	if !p.IsSetSuccess() {
		return NoteStoreFindNoteCountsResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreFindNoteCountsResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreFindNoteCountsResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreFindNoteCountsResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreFindNoteCountsResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreFindNoteCountsResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreFindNoteCountsResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreFindNoteCountsResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreFindNoteCountsResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreFindNoteCountsResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreFindNoteCountsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreFindNoteCountsResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreFindNoteCountsResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreFindNoteCountsResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreFindNoteCountsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreFindNoteCountsResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &NoteCollectionCounts{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreFindNoteCountsResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreFindNoteCountsResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreFindNoteCountsResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreFindNoteCountsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findNoteCounts_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreFindNoteCountsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreFindNoteCountsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreFindNoteCountsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreFindNoteCountsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreFindNoteCountsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreFindNoteCountsResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
//  - WithContent
//  - WithResourcesData
//  - WithResourcesRecognition
//  - WithResourcesAlternateData
type NoteStoreGetNoteArgs struct {
	AuthenticationToken        string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                       types.GUID `thrift:"guid,2" json:"guid"`
	WithContent                bool       `thrift:"withContent,3" json:"withContent"`
	WithResourcesData          bool       `thrift:"withResourcesData,4" json:"withResourcesData"`
	WithResourcesRecognition   bool       `thrift:"withResourcesRecognition,5" json:"withResourcesRecognition"`
	WithResourcesAlternateData bool       `thrift:"withResourcesAlternateData,6" json:"withResourcesAlternateData"`
}

func NewNoteStoreGetNoteArgs() *NoteStoreGetNoteArgs {
	return &NoteStoreGetNoteArgs{}
}

func (p *NoteStoreGetNoteArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreGetNoteArgs) GetGUID() types.GUID {
	return p.GUID
}

func (p *NoteStoreGetNoteArgs) GetWithContent() bool {
	return p.WithContent
}

func (p *NoteStoreGetNoteArgs) GetWithResourcesData() bool {
	return p.WithResourcesData
}

func (p *NoteStoreGetNoteArgs) GetWithResourcesRecognition() bool {
	return p.WithResourcesRecognition
}

func (p *NoteStoreGetNoteArgs) GetWithResourcesAlternateData() bool {
	return p.WithResourcesAlternateData
}
func (p *NoteStoreGetNoteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetNoteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetNoteArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreGetNoteArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.WithContent = v
	}
	return nil
}

func (p *NoteStoreGetNoteArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.WithResourcesData = v
	}
	return nil
}

func (p *NoteStoreGetNoteArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.WithResourcesRecognition = v
	}
	return nil
}

func (p *NoteStoreGetNoteArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.WithResourcesAlternateData = v
	}
	return nil
}

func (p *NoteStoreGetNoteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNote_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetNoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withContent", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:withContent: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.WithContent)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.withContent (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:withContent: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withResourcesData", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:withResourcesData: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.WithResourcesData)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.withResourcesData (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:withResourcesData: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withResourcesRecognition", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:withResourcesRecognition: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.WithResourcesRecognition)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.withResourcesRecognition (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:withResourcesRecognition: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withResourcesAlternateData", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:withResourcesAlternateData: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.WithResourcesAlternateData)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.withResourcesAlternateData (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:withResourcesAlternateData: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetNoteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreGetNoteResult struct {
	Success           *types.Note                   `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreGetNoteResult() *NoteStoreGetNoteResult {
	return &NoteStoreGetNoteResult{}
}

var NoteStoreGetNoteResult_Success_DEFAULT *types.Note

func (p *NoteStoreGetNoteResult) GetSuccess() *types.Note {
	if !p.IsSetSuccess() {
		return NoteStoreGetNoteResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreGetNoteResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetNoteResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetNoteResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetNoteResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetNoteResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetNoteResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreGetNoteResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreGetNoteResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreGetNoteResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreGetNoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetNoteResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetNoteResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetNoteResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreGetNoteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetNoteResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &types.Note{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreGetNoteResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetNoteResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetNoteResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreGetNoteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNote_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetNoteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetNoteResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
type NoteStoreGetNoteApplicationDataArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
}

func NewNoteStoreGetNoteApplicationDataArgs() *NoteStoreGetNoteApplicationDataArgs {
	return &NoteStoreGetNoteApplicationDataArgs{}
}

func (p *NoteStoreGetNoteApplicationDataArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreGetNoteApplicationDataArgs) GetGUID() types.GUID {
	return p.GUID
}
func (p *NoteStoreGetNoteApplicationDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetNoteApplicationDataArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetNoteApplicationDataArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreGetNoteApplicationDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNoteApplicationData_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetNoteApplicationDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteApplicationDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteApplicationDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetNoteApplicationDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreGetNoteApplicationDataResult struct {
	Success           *types.LazyMap                `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreGetNoteApplicationDataResult() *NoteStoreGetNoteApplicationDataResult {
	return &NoteStoreGetNoteApplicationDataResult{}
}

var NoteStoreGetNoteApplicationDataResult_Success_DEFAULT *types.LazyMap

func (p *NoteStoreGetNoteApplicationDataResult) GetSuccess() *types.LazyMap {
	if !p.IsSetSuccess() {
		return NoteStoreGetNoteApplicationDataResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreGetNoteApplicationDataResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetNoteApplicationDataResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetNoteApplicationDataResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetNoteApplicationDataResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetNoteApplicationDataResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetNoteApplicationDataResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreGetNoteApplicationDataResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreGetNoteApplicationDataResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreGetNoteApplicationDataResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreGetNoteApplicationDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetNoteApplicationDataResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetNoteApplicationDataResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetNoteApplicationDataResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreGetNoteApplicationDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetNoteApplicationDataResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &types.LazyMap{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreGetNoteApplicationDataResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetNoteApplicationDataResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetNoteApplicationDataResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreGetNoteApplicationDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNoteApplicationData_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetNoteApplicationDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteApplicationDataResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteApplicationDataResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteApplicationDataResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteApplicationDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetNoteApplicationDataResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
//  - Key
type NoteStoreGetNoteApplicationDataEntryArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
	Key                 string     `thrift:"key,3" json:"key"`
}

func NewNoteStoreGetNoteApplicationDataEntryArgs() *NoteStoreGetNoteApplicationDataEntryArgs {
	return &NoteStoreGetNoteApplicationDataEntryArgs{}
}

func (p *NoteStoreGetNoteApplicationDataEntryArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreGetNoteApplicationDataEntryArgs) GetGUID() types.GUID {
	return p.GUID
}

func (p *NoteStoreGetNoteApplicationDataEntryArgs) GetKey() string {
	return p.Key
}
func (p *NoteStoreGetNoteApplicationDataEntryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetNoteApplicationDataEntryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetNoteApplicationDataEntryArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreGetNoteApplicationDataEntryArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *NoteStoreGetNoteApplicationDataEntryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNoteApplicationDataEntry_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetNoteApplicationDataEntryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteApplicationDataEntryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteApplicationDataEntryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:key: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteApplicationDataEntryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetNoteApplicationDataEntryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreGetNoteApplicationDataEntryResult struct {
	Success           *string                       `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreGetNoteApplicationDataEntryResult() *NoteStoreGetNoteApplicationDataEntryResult {
	return &NoteStoreGetNoteApplicationDataEntryResult{}
}

var NoteStoreGetNoteApplicationDataEntryResult_Success_DEFAULT string

func (p *NoteStoreGetNoteApplicationDataEntryResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return NoteStoreGetNoteApplicationDataEntryResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreGetNoteApplicationDataEntryResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetNoteApplicationDataEntryResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetNoteApplicationDataEntryResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetNoteApplicationDataEntryResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetNoteApplicationDataEntryResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetNoteApplicationDataEntryResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreGetNoteApplicationDataEntryResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreGetNoteApplicationDataEntryResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreGetNoteApplicationDataEntryResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreGetNoteApplicationDataEntryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetNoteApplicationDataEntryResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetNoteApplicationDataEntryResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetNoteApplicationDataEntryResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreGetNoteApplicationDataEntryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetNoteApplicationDataEntryResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreGetNoteApplicationDataEntryResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetNoteApplicationDataEntryResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetNoteApplicationDataEntryResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreGetNoteApplicationDataEntryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNoteApplicationDataEntry_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetNoteApplicationDataEntryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteApplicationDataEntryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteApplicationDataEntryResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteApplicationDataEntryResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteApplicationDataEntryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetNoteApplicationDataEntryResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
//  - Key
//  - Value
type NoteStoreSetNoteApplicationDataEntryArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
	Key                 string     `thrift:"key,3" json:"key"`
	Value               string     `thrift:"value,4" json:"value"`
}

func NewNoteStoreSetNoteApplicationDataEntryArgs() *NoteStoreSetNoteApplicationDataEntryArgs {
	return &NoteStoreSetNoteApplicationDataEntryArgs{}
}

func (p *NoteStoreSetNoteApplicationDataEntryArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreSetNoteApplicationDataEntryArgs) GetGUID() types.GUID {
	return p.GUID
}

func (p *NoteStoreSetNoteApplicationDataEntryArgs) GetKey() string {
	return p.Key
}

func (p *NoteStoreSetNoteApplicationDataEntryArgs) GetValue() string {
	return p.Value
}
func (p *NoteStoreSetNoteApplicationDataEntryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreSetNoteApplicationDataEntryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreSetNoteApplicationDataEntryArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreSetNoteApplicationDataEntryArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *NoteStoreSetNoteApplicationDataEntryArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *NoteStoreSetNoteApplicationDataEntryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setNoteApplicationDataEntry_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreSetNoteApplicationDataEntryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreSetNoteApplicationDataEntryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreSetNoteApplicationDataEntryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:key: ", p), err)
	}
	return err
}

func (p *NoteStoreSetNoteApplicationDataEntryArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:value: ", p), err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:value: ", p), err)
	}
	return err
}

func (p *NoteStoreSetNoteApplicationDataEntryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreSetNoteApplicationDataEntryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreSetNoteApplicationDataEntryResult struct {
	Success           *int32                        `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreSetNoteApplicationDataEntryResult() *NoteStoreSetNoteApplicationDataEntryResult {
	return &NoteStoreSetNoteApplicationDataEntryResult{}
}

var NoteStoreSetNoteApplicationDataEntryResult_Success_DEFAULT int32

func (p *NoteStoreSetNoteApplicationDataEntryResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return NoteStoreSetNoteApplicationDataEntryResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreSetNoteApplicationDataEntryResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreSetNoteApplicationDataEntryResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreSetNoteApplicationDataEntryResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreSetNoteApplicationDataEntryResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreSetNoteApplicationDataEntryResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreSetNoteApplicationDataEntryResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreSetNoteApplicationDataEntryResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreSetNoteApplicationDataEntryResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreSetNoteApplicationDataEntryResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreSetNoteApplicationDataEntryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreSetNoteApplicationDataEntryResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreSetNoteApplicationDataEntryResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreSetNoteApplicationDataEntryResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreSetNoteApplicationDataEntryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreSetNoteApplicationDataEntryResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreSetNoteApplicationDataEntryResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreSetNoteApplicationDataEntryResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreSetNoteApplicationDataEntryResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreSetNoteApplicationDataEntryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setNoteApplicationDataEntry_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreSetNoteApplicationDataEntryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreSetNoteApplicationDataEntryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreSetNoteApplicationDataEntryResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreSetNoteApplicationDataEntryResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreSetNoteApplicationDataEntryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreSetNoteApplicationDataEntryResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
//  - Key
type NoteStoreUnsetNoteApplicationDataEntryArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
	Key                 string     `thrift:"key,3" json:"key"`
}

func NewNoteStoreUnsetNoteApplicationDataEntryArgs() *NoteStoreUnsetNoteApplicationDataEntryArgs {
	return &NoteStoreUnsetNoteApplicationDataEntryArgs{}
}

func (p *NoteStoreUnsetNoteApplicationDataEntryArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreUnsetNoteApplicationDataEntryArgs) GetGUID() types.GUID {
	return p.GUID
}

func (p *NoteStoreUnsetNoteApplicationDataEntryArgs) GetKey() string {
	return p.Key
}
func (p *NoteStoreUnsetNoteApplicationDataEntryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreUnsetNoteApplicationDataEntryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreUnsetNoteApplicationDataEntryArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreUnsetNoteApplicationDataEntryArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *NoteStoreUnsetNoteApplicationDataEntryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unsetNoteApplicationDataEntry_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreUnsetNoteApplicationDataEntryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreUnsetNoteApplicationDataEntryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreUnsetNoteApplicationDataEntryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:key: ", p), err)
	}
	return err
}

func (p *NoteStoreUnsetNoteApplicationDataEntryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreUnsetNoteApplicationDataEntryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreUnsetNoteApplicationDataEntryResult struct {
	Success           *int32                        `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreUnsetNoteApplicationDataEntryResult() *NoteStoreUnsetNoteApplicationDataEntryResult {
	return &NoteStoreUnsetNoteApplicationDataEntryResult{}
}

var NoteStoreUnsetNoteApplicationDataEntryResult_Success_DEFAULT int32

func (p *NoteStoreUnsetNoteApplicationDataEntryResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return NoteStoreUnsetNoteApplicationDataEntryResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreUnsetNoteApplicationDataEntryResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreUnsetNoteApplicationDataEntryResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreUnsetNoteApplicationDataEntryResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreUnsetNoteApplicationDataEntryResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreUnsetNoteApplicationDataEntryResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreUnsetNoteApplicationDataEntryResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreUnsetNoteApplicationDataEntryResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreUnsetNoteApplicationDataEntryResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreUnsetNoteApplicationDataEntryResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreUnsetNoteApplicationDataEntryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreUnsetNoteApplicationDataEntryResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreUnsetNoteApplicationDataEntryResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreUnsetNoteApplicationDataEntryResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreUnsetNoteApplicationDataEntryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreUnsetNoteApplicationDataEntryResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreUnsetNoteApplicationDataEntryResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreUnsetNoteApplicationDataEntryResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreUnsetNoteApplicationDataEntryResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreUnsetNoteApplicationDataEntryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unsetNoteApplicationDataEntry_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreUnsetNoteApplicationDataEntryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUnsetNoteApplicationDataEntryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUnsetNoteApplicationDataEntryResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUnsetNoteApplicationDataEntryResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUnsetNoteApplicationDataEntryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreUnsetNoteApplicationDataEntryResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
type NoteStoreGetNoteContentArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
}

func NewNoteStoreGetNoteContentArgs() *NoteStoreGetNoteContentArgs {
	return &NoteStoreGetNoteContentArgs{}
}

func (p *NoteStoreGetNoteContentArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreGetNoteContentArgs) GetGUID() types.GUID {
	return p.GUID
}
func (p *NoteStoreGetNoteContentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetNoteContentArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetNoteContentArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreGetNoteContentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNoteContent_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetNoteContentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteContentArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteContentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetNoteContentArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreGetNoteContentResult struct {
	Success           *string                       `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreGetNoteContentResult() *NoteStoreGetNoteContentResult {
	return &NoteStoreGetNoteContentResult{}
}

var NoteStoreGetNoteContentResult_Success_DEFAULT string

func (p *NoteStoreGetNoteContentResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return NoteStoreGetNoteContentResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreGetNoteContentResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetNoteContentResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetNoteContentResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetNoteContentResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetNoteContentResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetNoteContentResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreGetNoteContentResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreGetNoteContentResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreGetNoteContentResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreGetNoteContentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetNoteContentResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetNoteContentResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetNoteContentResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreGetNoteContentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetNoteContentResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreGetNoteContentResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetNoteContentResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetNoteContentResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreGetNoteContentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNoteContent_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetNoteContentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteContentResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteContentResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteContentResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteContentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetNoteContentResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
//  - NoteOnly
//  - TokenizeForIndexing
type NoteStoreGetNoteSearchTextArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
	NoteOnly            bool       `thrift:"noteOnly,3" json:"noteOnly"`
	TokenizeForIndexing bool       `thrift:"tokenizeForIndexing,4" json:"tokenizeForIndexing"`
}

func NewNoteStoreGetNoteSearchTextArgs() *NoteStoreGetNoteSearchTextArgs {
	return &NoteStoreGetNoteSearchTextArgs{}
}

func (p *NoteStoreGetNoteSearchTextArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreGetNoteSearchTextArgs) GetGUID() types.GUID {
	return p.GUID
}

func (p *NoteStoreGetNoteSearchTextArgs) GetNoteOnly() bool {
	return p.NoteOnly
}

func (p *NoteStoreGetNoteSearchTextArgs) GetTokenizeForIndexing() bool {
	return p.TokenizeForIndexing
}
func (p *NoteStoreGetNoteSearchTextArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetNoteSearchTextArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetNoteSearchTextArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreGetNoteSearchTextArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NoteOnly = v
	}
	return nil
}

func (p *NoteStoreGetNoteSearchTextArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TokenizeForIndexing = v
	}
	return nil
}

func (p *NoteStoreGetNoteSearchTextArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNoteSearchText_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetNoteSearchTextArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteSearchTextArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteSearchTextArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("noteOnly", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:noteOnly: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NoteOnly)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.noteOnly (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:noteOnly: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteSearchTextArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tokenizeForIndexing", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tokenizeForIndexing: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.TokenizeForIndexing)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tokenizeForIndexing (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tokenizeForIndexing: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteSearchTextArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetNoteSearchTextArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreGetNoteSearchTextResult struct {
	Success           *string                       `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreGetNoteSearchTextResult() *NoteStoreGetNoteSearchTextResult {
	return &NoteStoreGetNoteSearchTextResult{}
}

var NoteStoreGetNoteSearchTextResult_Success_DEFAULT string

func (p *NoteStoreGetNoteSearchTextResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return NoteStoreGetNoteSearchTextResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreGetNoteSearchTextResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetNoteSearchTextResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetNoteSearchTextResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetNoteSearchTextResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetNoteSearchTextResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetNoteSearchTextResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreGetNoteSearchTextResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreGetNoteSearchTextResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreGetNoteSearchTextResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreGetNoteSearchTextResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetNoteSearchTextResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetNoteSearchTextResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetNoteSearchTextResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreGetNoteSearchTextResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetNoteSearchTextResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreGetNoteSearchTextResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetNoteSearchTextResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetNoteSearchTextResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreGetNoteSearchTextResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNoteSearchText_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetNoteSearchTextResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteSearchTextResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteSearchTextResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteSearchTextResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteSearchTextResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetNoteSearchTextResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
type NoteStoreGetResourceSearchTextArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
}

func NewNoteStoreGetResourceSearchTextArgs() *NoteStoreGetResourceSearchTextArgs {
	return &NoteStoreGetResourceSearchTextArgs{}
}

func (p *NoteStoreGetResourceSearchTextArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreGetResourceSearchTextArgs) GetGUID() types.GUID {
	return p.GUID
}
func (p *NoteStoreGetResourceSearchTextArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetResourceSearchTextArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetResourceSearchTextArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreGetResourceSearchTextArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceSearchText_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetResourceSearchTextArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceSearchTextArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceSearchTextArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetResourceSearchTextArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreGetResourceSearchTextResult struct {
	Success           *string                       `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreGetResourceSearchTextResult() *NoteStoreGetResourceSearchTextResult {
	return &NoteStoreGetResourceSearchTextResult{}
}

var NoteStoreGetResourceSearchTextResult_Success_DEFAULT string

func (p *NoteStoreGetResourceSearchTextResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return NoteStoreGetResourceSearchTextResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreGetResourceSearchTextResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetResourceSearchTextResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetResourceSearchTextResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetResourceSearchTextResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetResourceSearchTextResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetResourceSearchTextResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreGetResourceSearchTextResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreGetResourceSearchTextResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreGetResourceSearchTextResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreGetResourceSearchTextResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetResourceSearchTextResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetResourceSearchTextResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetResourceSearchTextResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreGetResourceSearchTextResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetResourceSearchTextResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreGetResourceSearchTextResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceSearchTextResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceSearchTextResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceSearchTextResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceSearchText_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetResourceSearchTextResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceSearchTextResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceSearchTextResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceSearchTextResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceSearchTextResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetResourceSearchTextResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
type NoteStoreGetNoteTagNamesArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
}

func NewNoteStoreGetNoteTagNamesArgs() *NoteStoreGetNoteTagNamesArgs {
	return &NoteStoreGetNoteTagNamesArgs{}
}

func (p *NoteStoreGetNoteTagNamesArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreGetNoteTagNamesArgs) GetGUID() types.GUID {
	return p.GUID
}
func (p *NoteStoreGetNoteTagNamesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetNoteTagNamesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetNoteTagNamesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreGetNoteTagNamesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNoteTagNames_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetNoteTagNamesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteTagNamesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteTagNamesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetNoteTagNamesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreGetNoteTagNamesResult struct {
	Success           []string                      `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreGetNoteTagNamesResult() *NoteStoreGetNoteTagNamesResult {
	return &NoteStoreGetNoteTagNamesResult{}
}

var NoteStoreGetNoteTagNamesResult_Success_DEFAULT []string

func (p *NoteStoreGetNoteTagNamesResult) GetSuccess() []string {
	return p.Success
}

var NoteStoreGetNoteTagNamesResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetNoteTagNamesResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetNoteTagNamesResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetNoteTagNamesResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetNoteTagNamesResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetNoteTagNamesResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreGetNoteTagNamesResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreGetNoteTagNamesResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreGetNoteTagNamesResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreGetNoteTagNamesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetNoteTagNamesResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetNoteTagNamesResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetNoteTagNamesResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreGetNoteTagNamesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetNoteTagNamesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem185 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem185 = v
		}
		p.Success = append(p.Success, _elem185)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NoteStoreGetNoteTagNamesResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetNoteTagNamesResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetNoteTagNamesResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreGetNoteTagNamesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNoteTagNames_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetNoteTagNamesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteTagNamesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteTagNamesResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteTagNamesResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteTagNamesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetNoteTagNamesResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - Note
type NoteStoreCreateNoteArgs struct {
	AuthenticationToken string      `thrift:"authenticationToken,1" json:"authenticationToken"`
	Note                *types.Note `thrift:"note,2" json:"note"`
}

func NewNoteStoreCreateNoteArgs() *NoteStoreCreateNoteArgs {
	return &NoteStoreCreateNoteArgs{}
}

func (p *NoteStoreCreateNoteArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

var NoteStoreCreateNoteArgs_Note_DEFAULT *types.Note

func (p *NoteStoreCreateNoteArgs) GetNote() *types.Note {
	if !p.IsSetNote() {
		return NoteStoreCreateNoteArgs_Note_DEFAULT
	}
	return p.Note
}
func (p *NoteStoreCreateNoteArgs) IsSetNote() bool {
	return p.Note != nil
}

func (p *NoteStoreCreateNoteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreCreateNoteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreCreateNoteArgs) readField2(iprot thrift.TProtocol) error {
	p.Note = &types.Note{}
	if err := p.Note.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Note), err)
	}
	return nil
}

func (p *NoteStoreCreateNoteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createNote_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreCreateNoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreCreateNoteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("note", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:note: ", p), err)
	}
	if err := p.Note.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Note), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:note: ", p), err)
	}
	return err
}

func (p *NoteStoreCreateNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreCreateNoteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreCreateNoteResult struct {
	Success           *types.Note                   `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreCreateNoteResult() *NoteStoreCreateNoteResult {
	return &NoteStoreCreateNoteResult{}
}

var NoteStoreCreateNoteResult_Success_DEFAULT *types.Note

func (p *NoteStoreCreateNoteResult) GetSuccess() *types.Note {
	if !p.IsSetSuccess() {
		return NoteStoreCreateNoteResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreCreateNoteResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreCreateNoteResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreCreateNoteResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreCreateNoteResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreCreateNoteResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreCreateNoteResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreCreateNoteResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreCreateNoteResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreCreateNoteResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreCreateNoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreCreateNoteResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreCreateNoteResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreCreateNoteResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreCreateNoteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreCreateNoteResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &types.Note{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreCreateNoteResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreCreateNoteResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreCreateNoteResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreCreateNoteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createNote_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreCreateNoteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCreateNoteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCreateNoteResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCreateNoteResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCreateNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreCreateNoteResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - Note
type NoteStoreUpdateNoteArgs struct {
	AuthenticationToken string      `thrift:"authenticationToken,1" json:"authenticationToken"`
	Note                *types.Note `thrift:"note,2" json:"note"`
}

func NewNoteStoreUpdateNoteArgs() *NoteStoreUpdateNoteArgs {
	return &NoteStoreUpdateNoteArgs{}
}

func (p *NoteStoreUpdateNoteArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

var NoteStoreUpdateNoteArgs_Note_DEFAULT *types.Note

func (p *NoteStoreUpdateNoteArgs) GetNote() *types.Note {
	if !p.IsSetNote() {
		return NoteStoreUpdateNoteArgs_Note_DEFAULT
	}
	return p.Note
}
func (p *NoteStoreUpdateNoteArgs) IsSetNote() bool {
	return p.Note != nil
}

func (p *NoteStoreUpdateNoteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreUpdateNoteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreUpdateNoteArgs) readField2(iprot thrift.TProtocol) error {
	p.Note = &types.Note{}
	if err := p.Note.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Note), err)
	}
	return nil
}

func (p *NoteStoreUpdateNoteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateNote_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreUpdateNoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreUpdateNoteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("note", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:note: ", p), err)
	}
	if err := p.Note.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Note), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:note: ", p), err)
	}
	return err
}

func (p *NoteStoreUpdateNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreUpdateNoteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreUpdateNoteResult struct {
	Success           *types.Note                   `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreUpdateNoteResult() *NoteStoreUpdateNoteResult {
	return &NoteStoreUpdateNoteResult{}
}

var NoteStoreUpdateNoteResult_Success_DEFAULT *types.Note

func (p *NoteStoreUpdateNoteResult) GetSuccess() *types.Note {
	if !p.IsSetSuccess() {
		return NoteStoreUpdateNoteResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreUpdateNoteResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreUpdateNoteResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreUpdateNoteResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreUpdateNoteResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreUpdateNoteResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreUpdateNoteResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreUpdateNoteResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreUpdateNoteResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreUpdateNoteResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreUpdateNoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreUpdateNoteResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreUpdateNoteResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreUpdateNoteResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreUpdateNoteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreUpdateNoteResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &types.Note{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreUpdateNoteResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreUpdateNoteResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreUpdateNoteResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreUpdateNoteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateNote_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreUpdateNoteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateNoteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateNoteResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateNoteResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreUpdateNoteResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
type NoteStoreDeleteNoteArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
}

func NewNoteStoreDeleteNoteArgs() *NoteStoreDeleteNoteArgs {
	return &NoteStoreDeleteNoteArgs{}
}

func (p *NoteStoreDeleteNoteArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreDeleteNoteArgs) GetGUID() types.GUID {
	return p.GUID
}
func (p *NoteStoreDeleteNoteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreDeleteNoteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreDeleteNoteArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreDeleteNoteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteNote_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreDeleteNoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreDeleteNoteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreDeleteNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreDeleteNoteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreDeleteNoteResult struct {
	Success           *int32                        `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreDeleteNoteResult() *NoteStoreDeleteNoteResult {
	return &NoteStoreDeleteNoteResult{}
}

var NoteStoreDeleteNoteResult_Success_DEFAULT int32

func (p *NoteStoreDeleteNoteResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return NoteStoreDeleteNoteResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreDeleteNoteResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreDeleteNoteResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreDeleteNoteResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreDeleteNoteResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreDeleteNoteResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreDeleteNoteResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreDeleteNoteResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreDeleteNoteResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreDeleteNoteResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreDeleteNoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreDeleteNoteResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreDeleteNoteResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreDeleteNoteResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreDeleteNoteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreDeleteNoteResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreDeleteNoteResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreDeleteNoteResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreDeleteNoteResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreDeleteNoteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteNote_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreDeleteNoteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreDeleteNoteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreDeleteNoteResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreDeleteNoteResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreDeleteNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreDeleteNoteResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
type NoteStoreExpungeNoteArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
}

func NewNoteStoreExpungeNoteArgs() *NoteStoreExpungeNoteArgs {
	return &NoteStoreExpungeNoteArgs{}
}

func (p *NoteStoreExpungeNoteArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreExpungeNoteArgs) GetGUID() types.GUID {
	return p.GUID
}
func (p *NoteStoreExpungeNoteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreExpungeNoteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreExpungeNoteArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreExpungeNoteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeNote_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreExpungeNoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreExpungeNoteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreExpungeNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreExpungeNoteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreExpungeNoteResult struct {
	Success           *int32                        `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreExpungeNoteResult() *NoteStoreExpungeNoteResult {
	return &NoteStoreExpungeNoteResult{}
}

var NoteStoreExpungeNoteResult_Success_DEFAULT int32

func (p *NoteStoreExpungeNoteResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return NoteStoreExpungeNoteResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreExpungeNoteResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreExpungeNoteResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreExpungeNoteResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreExpungeNoteResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreExpungeNoteResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreExpungeNoteResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreExpungeNoteResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreExpungeNoteResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreExpungeNoteResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreExpungeNoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreExpungeNoteResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreExpungeNoteResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreExpungeNoteResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreExpungeNoteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreExpungeNoteResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreExpungeNoteResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreExpungeNoteResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreExpungeNoteResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreExpungeNoteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeNote_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreExpungeNoteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeNoteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeNoteResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeNoteResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreExpungeNoteResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - NoteGuids
type NoteStoreExpungeNotesArgs struct {
	AuthenticationToken string   `thrift:"authenticationToken,1" json:"authenticationToken"`
	NoteGuids           []string `thrift:"noteGuids,2" json:"noteGuids"`
}

func NewNoteStoreExpungeNotesArgs() *NoteStoreExpungeNotesArgs {
	return &NoteStoreExpungeNotesArgs{}
}

func (p *NoteStoreExpungeNotesArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreExpungeNotesArgs) GetNoteGuids() []string {
	return p.NoteGuids
}
func (p *NoteStoreExpungeNotesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreExpungeNotesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreExpungeNotesArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.NoteGuids = tSlice
	for i := 0; i < size; i++ {
		var _elem186 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem186 = v
		}
		p.NoteGuids = append(p.NoteGuids, _elem186)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NoteStoreExpungeNotesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeNotes_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreExpungeNotesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreExpungeNotesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("noteGuids", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:noteGuids: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.NoteGuids)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.NoteGuids {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:noteGuids: ", p), err)
	}
	return err
}

func (p *NoteStoreExpungeNotesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreExpungeNotesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreExpungeNotesResult struct {
	Success           *int32                        `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreExpungeNotesResult() *NoteStoreExpungeNotesResult {
	return &NoteStoreExpungeNotesResult{}
}

var NoteStoreExpungeNotesResult_Success_DEFAULT int32

func (p *NoteStoreExpungeNotesResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return NoteStoreExpungeNotesResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreExpungeNotesResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreExpungeNotesResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreExpungeNotesResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreExpungeNotesResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreExpungeNotesResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreExpungeNotesResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreExpungeNotesResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreExpungeNotesResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreExpungeNotesResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreExpungeNotesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreExpungeNotesResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreExpungeNotesResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreExpungeNotesResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreExpungeNotesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreExpungeNotesResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreExpungeNotesResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreExpungeNotesResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreExpungeNotesResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreExpungeNotesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeNotes_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreExpungeNotesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeNotesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeNotesResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeNotesResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeNotesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreExpungeNotesResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
type NoteStoreExpungeInactiveNotesArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1" json:"authenticationToken"`
}

func NewNoteStoreExpungeInactiveNotesArgs() *NoteStoreExpungeInactiveNotesArgs {
	return &NoteStoreExpungeInactiveNotesArgs{}
}

func (p *NoteStoreExpungeInactiveNotesArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}
func (p *NoteStoreExpungeInactiveNotesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreExpungeInactiveNotesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreExpungeInactiveNotesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeInactiveNotes_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreExpungeInactiveNotesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreExpungeInactiveNotesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreExpungeInactiveNotesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
type NoteStoreExpungeInactiveNotesResult struct {
	Success         *int32                      `thrift:"success,0" json:"success,omitempty"`
	UserException   *errors.EDAMUserException   `thrift:"userException,1" json:"userException,omitempty"`
	SystemException *errors.EDAMSystemException `thrift:"systemException,2" json:"systemException,omitempty"`
}

func NewNoteStoreExpungeInactiveNotesResult() *NoteStoreExpungeInactiveNotesResult {
	return &NoteStoreExpungeInactiveNotesResult{}
}

var NoteStoreExpungeInactiveNotesResult_Success_DEFAULT int32

func (p *NoteStoreExpungeInactiveNotesResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return NoteStoreExpungeInactiveNotesResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreExpungeInactiveNotesResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreExpungeInactiveNotesResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreExpungeInactiveNotesResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreExpungeInactiveNotesResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreExpungeInactiveNotesResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreExpungeInactiveNotesResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreExpungeInactiveNotesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreExpungeInactiveNotesResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreExpungeInactiveNotesResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreExpungeInactiveNotesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreExpungeInactiveNotesResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreExpungeInactiveNotesResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreExpungeInactiveNotesResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreExpungeInactiveNotesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeInactiveNotes_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreExpungeInactiveNotesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeInactiveNotesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeInactiveNotesResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeInactiveNotesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreExpungeInactiveNotesResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - NoteGuid
//  - ToNotebookGuid
type NoteStoreCopyNoteArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	NoteGuid            types.GUID `thrift:"noteGuid,2" json:"noteGuid"`
	ToNotebookGuid      types.GUID `thrift:"toNotebookGuid,3" json:"toNotebookGuid"`
}

func NewNoteStoreCopyNoteArgs() *NoteStoreCopyNoteArgs {
	return &NoteStoreCopyNoteArgs{}
}

func (p *NoteStoreCopyNoteArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreCopyNoteArgs) GetNoteGuid() types.GUID {
	return p.NoteGuid
}

func (p *NoteStoreCopyNoteArgs) GetToNotebookGuid() types.GUID {
	return p.ToNotebookGuid
}
func (p *NoteStoreCopyNoteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreCopyNoteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreCopyNoteArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.NoteGuid = temp
	}
	return nil
}

func (p *NoteStoreCopyNoteArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := types.GUID(v)
		p.ToNotebookGuid = temp
	}
	return nil
}

func (p *NoteStoreCopyNoteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("copyNote_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreCopyNoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreCopyNoteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("noteGuid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:noteGuid: ", p), err)
	}
	if err := oprot.WriteString(string(p.NoteGuid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.noteGuid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:noteGuid: ", p), err)
	}
	return err
}

func (p *NoteStoreCopyNoteArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("toNotebookGuid", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:toNotebookGuid: ", p), err)
	}
	if err := oprot.WriteString(string(p.ToNotebookGuid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.toNotebookGuid (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:toNotebookGuid: ", p), err)
	}
	return err
}

func (p *NoteStoreCopyNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreCopyNoteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreCopyNoteResult struct {
	Success           *types.Note                   `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreCopyNoteResult() *NoteStoreCopyNoteResult {
	return &NoteStoreCopyNoteResult{}
}

var NoteStoreCopyNoteResult_Success_DEFAULT *types.Note

func (p *NoteStoreCopyNoteResult) GetSuccess() *types.Note {
	if !p.IsSetSuccess() {
		return NoteStoreCopyNoteResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreCopyNoteResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreCopyNoteResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreCopyNoteResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreCopyNoteResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreCopyNoteResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreCopyNoteResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreCopyNoteResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreCopyNoteResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreCopyNoteResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreCopyNoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreCopyNoteResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreCopyNoteResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreCopyNoteResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreCopyNoteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreCopyNoteResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &types.Note{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreCopyNoteResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreCopyNoteResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreCopyNoteResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreCopyNoteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("copyNote_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreCopyNoteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCopyNoteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCopyNoteResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCopyNoteResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCopyNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreCopyNoteResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - NoteGuid
type NoteStoreListNoteVersionsArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	NoteGuid            types.GUID `thrift:"noteGuid,2" json:"noteGuid"`
}

func NewNoteStoreListNoteVersionsArgs() *NoteStoreListNoteVersionsArgs {
	return &NoteStoreListNoteVersionsArgs{}
}

func (p *NoteStoreListNoteVersionsArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreListNoteVersionsArgs) GetNoteGuid() types.GUID {
	return p.NoteGuid
}
func (p *NoteStoreListNoteVersionsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreListNoteVersionsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreListNoteVersionsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.NoteGuid = temp
	}
	return nil
}

func (p *NoteStoreListNoteVersionsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listNoteVersions_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreListNoteVersionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreListNoteVersionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("noteGuid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:noteGuid: ", p), err)
	}
	if err := oprot.WriteString(string(p.NoteGuid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.noteGuid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:noteGuid: ", p), err)
	}
	return err
}

func (p *NoteStoreListNoteVersionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreListNoteVersionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreListNoteVersionsResult struct {
	Success           []*NoteVersionId              `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreListNoteVersionsResult() *NoteStoreListNoteVersionsResult {
	return &NoteStoreListNoteVersionsResult{}
}

var NoteStoreListNoteVersionsResult_Success_DEFAULT []*NoteVersionId

func (p *NoteStoreListNoteVersionsResult) GetSuccess() []*NoteVersionId {
	return p.Success
}

var NoteStoreListNoteVersionsResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreListNoteVersionsResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreListNoteVersionsResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreListNoteVersionsResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreListNoteVersionsResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreListNoteVersionsResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreListNoteVersionsResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreListNoteVersionsResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreListNoteVersionsResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreListNoteVersionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreListNoteVersionsResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreListNoteVersionsResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreListNoteVersionsResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreListNoteVersionsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreListNoteVersionsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*NoteVersionId, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem187 := &NoteVersionId{}
		if err := _elem187.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem187), err)
		}
		p.Success = append(p.Success, _elem187)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NoteStoreListNoteVersionsResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreListNoteVersionsResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreListNoteVersionsResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreListNoteVersionsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listNoteVersions_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreListNoteVersionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListNoteVersionsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListNoteVersionsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListNoteVersionsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListNoteVersionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreListNoteVersionsResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - NoteGuid
//  - UpdateSequenceNum
//  - WithResourcesData
//  - WithResourcesRecognition
//  - WithResourcesAlternateData
type NoteStoreGetNoteVersionArgs struct {
	AuthenticationToken        string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	NoteGuid                   types.GUID `thrift:"noteGuid,2" json:"noteGuid"`
	UpdateSequenceNum          int32      `thrift:"updateSequenceNum,3" json:"updateSequenceNum"`
	WithResourcesData          bool       `thrift:"withResourcesData,4" json:"withResourcesData"`
	WithResourcesRecognition   bool       `thrift:"withResourcesRecognition,5" json:"withResourcesRecognition"`
	WithResourcesAlternateData bool       `thrift:"withResourcesAlternateData,6" json:"withResourcesAlternateData"`
}

func NewNoteStoreGetNoteVersionArgs() *NoteStoreGetNoteVersionArgs {
	return &NoteStoreGetNoteVersionArgs{}
}

func (p *NoteStoreGetNoteVersionArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreGetNoteVersionArgs) GetNoteGuid() types.GUID {
	return p.NoteGuid
}

func (p *NoteStoreGetNoteVersionArgs) GetUpdateSequenceNum() int32 {
	return p.UpdateSequenceNum
}

func (p *NoteStoreGetNoteVersionArgs) GetWithResourcesData() bool {
	return p.WithResourcesData
}

func (p *NoteStoreGetNoteVersionArgs) GetWithResourcesRecognition() bool {
	return p.WithResourcesRecognition
}

func (p *NoteStoreGetNoteVersionArgs) GetWithResourcesAlternateData() bool {
	return p.WithResourcesAlternateData
}
func (p *NoteStoreGetNoteVersionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetNoteVersionArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetNoteVersionArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.NoteGuid = temp
	}
	return nil
}

func (p *NoteStoreGetNoteVersionArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.UpdateSequenceNum = v
	}
	return nil
}

func (p *NoteStoreGetNoteVersionArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.WithResourcesData = v
	}
	return nil
}

func (p *NoteStoreGetNoteVersionArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.WithResourcesRecognition = v
	}
	return nil
}

func (p *NoteStoreGetNoteVersionArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.WithResourcesAlternateData = v
	}
	return nil
}

func (p *NoteStoreGetNoteVersionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNoteVersion_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetNoteVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteVersionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("noteGuid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:noteGuid: ", p), err)
	}
	if err := oprot.WriteString(string(p.NoteGuid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.noteGuid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:noteGuid: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteVersionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:updateSequenceNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UpdateSequenceNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updateSequenceNum (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:updateSequenceNum: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteVersionArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withResourcesData", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:withResourcesData: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.WithResourcesData)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.withResourcesData (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:withResourcesData: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteVersionArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withResourcesRecognition", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:withResourcesRecognition: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.WithResourcesRecognition)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.withResourcesRecognition (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:withResourcesRecognition: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteVersionArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withResourcesAlternateData", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:withResourcesAlternateData: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.WithResourcesAlternateData)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.withResourcesAlternateData (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:withResourcesAlternateData: ", p), err)
	}
	return err
}

func (p *NoteStoreGetNoteVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetNoteVersionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreGetNoteVersionResult struct {
	Success           *types.Note                   `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreGetNoteVersionResult() *NoteStoreGetNoteVersionResult {
	return &NoteStoreGetNoteVersionResult{}
}

var NoteStoreGetNoteVersionResult_Success_DEFAULT *types.Note

func (p *NoteStoreGetNoteVersionResult) GetSuccess() *types.Note {
	if !p.IsSetSuccess() {
		return NoteStoreGetNoteVersionResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreGetNoteVersionResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetNoteVersionResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetNoteVersionResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetNoteVersionResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetNoteVersionResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetNoteVersionResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreGetNoteVersionResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreGetNoteVersionResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreGetNoteVersionResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreGetNoteVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetNoteVersionResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetNoteVersionResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetNoteVersionResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreGetNoteVersionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetNoteVersionResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &types.Note{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreGetNoteVersionResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetNoteVersionResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetNoteVersionResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreGetNoteVersionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNoteVersion_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetNoteVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteVersionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteVersionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteVersionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetNoteVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetNoteVersionResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
//  - WithData
//  - WithRecognition
//  - WithAttributes
//  - WithAlternateData
type NoteStoreGetResourceArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
	WithData            bool       `thrift:"withData,3" json:"withData"`
	WithRecognition     bool       `thrift:"withRecognition,4" json:"withRecognition"`
	WithAttributes      bool       `thrift:"withAttributes,5" json:"withAttributes"`
	WithAlternateData   bool       `thrift:"withAlternateData,6" json:"withAlternateData"`
}

func NewNoteStoreGetResourceArgs() *NoteStoreGetResourceArgs {
	return &NoteStoreGetResourceArgs{}
}

func (p *NoteStoreGetResourceArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreGetResourceArgs) GetGUID() types.GUID {
	return p.GUID
}

func (p *NoteStoreGetResourceArgs) GetWithData() bool {
	return p.WithData
}

func (p *NoteStoreGetResourceArgs) GetWithRecognition() bool {
	return p.WithRecognition
}

func (p *NoteStoreGetResourceArgs) GetWithAttributes() bool {
	return p.WithAttributes
}

func (p *NoteStoreGetResourceArgs) GetWithAlternateData() bool {
	return p.WithAlternateData
}
func (p *NoteStoreGetResourceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetResourceArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetResourceArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreGetResourceArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.WithData = v
	}
	return nil
}

func (p *NoteStoreGetResourceArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.WithRecognition = v
	}
	return nil
}

func (p *NoteStoreGetResourceArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.WithAttributes = v
	}
	return nil
}

func (p *NoteStoreGetResourceArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.WithAlternateData = v
	}
	return nil
}

func (p *NoteStoreGetResourceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResource_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetResourceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withData", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:withData: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.WithData)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.withData (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:withData: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withRecognition", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:withRecognition: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.WithRecognition)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.withRecognition (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:withRecognition: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withAttributes", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:withAttributes: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.WithAttributes)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.withAttributes (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:withAttributes: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withAlternateData", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:withAlternateData: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.WithAlternateData)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.withAlternateData (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:withAlternateData: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetResourceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreGetResourceResult struct {
	Success           *types.Resource               `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreGetResourceResult() *NoteStoreGetResourceResult {
	return &NoteStoreGetResourceResult{}
}

var NoteStoreGetResourceResult_Success_DEFAULT *types.Resource

func (p *NoteStoreGetResourceResult) GetSuccess() *types.Resource {
	if !p.IsSetSuccess() {
		return NoteStoreGetResourceResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreGetResourceResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetResourceResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetResourceResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetResourceResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetResourceResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetResourceResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreGetResourceResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreGetResourceResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreGetResourceResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreGetResourceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetResourceResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetResourceResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetResourceResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreGetResourceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetResourceResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &types.Resource{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreGetResourceResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResource_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetResourceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetResourceResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
type NoteStoreGetResourceApplicationDataArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
}

func NewNoteStoreGetResourceApplicationDataArgs() *NoteStoreGetResourceApplicationDataArgs {
	return &NoteStoreGetResourceApplicationDataArgs{}
}

func (p *NoteStoreGetResourceApplicationDataArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreGetResourceApplicationDataArgs) GetGUID() types.GUID {
	return p.GUID
}
func (p *NoteStoreGetResourceApplicationDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetResourceApplicationDataArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetResourceApplicationDataArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreGetResourceApplicationDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceApplicationData_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetResourceApplicationDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceApplicationDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceApplicationDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetResourceApplicationDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreGetResourceApplicationDataResult struct {
	Success           *types.LazyMap                `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreGetResourceApplicationDataResult() *NoteStoreGetResourceApplicationDataResult {
	return &NoteStoreGetResourceApplicationDataResult{}
}

var NoteStoreGetResourceApplicationDataResult_Success_DEFAULT *types.LazyMap

func (p *NoteStoreGetResourceApplicationDataResult) GetSuccess() *types.LazyMap {
	if !p.IsSetSuccess() {
		return NoteStoreGetResourceApplicationDataResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreGetResourceApplicationDataResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetResourceApplicationDataResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetResourceApplicationDataResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetResourceApplicationDataResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetResourceApplicationDataResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetResourceApplicationDataResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreGetResourceApplicationDataResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreGetResourceApplicationDataResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreGetResourceApplicationDataResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreGetResourceApplicationDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetResourceApplicationDataResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetResourceApplicationDataResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetResourceApplicationDataResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreGetResourceApplicationDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetResourceApplicationDataResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &types.LazyMap{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreGetResourceApplicationDataResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceApplicationDataResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceApplicationDataResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceApplicationDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceApplicationData_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetResourceApplicationDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceApplicationDataResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceApplicationDataResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceApplicationDataResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceApplicationDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetResourceApplicationDataResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
//  - Key
type NoteStoreGetResourceApplicationDataEntryArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
	Key                 string     `thrift:"key,3" json:"key"`
}

func NewNoteStoreGetResourceApplicationDataEntryArgs() *NoteStoreGetResourceApplicationDataEntryArgs {
	return &NoteStoreGetResourceApplicationDataEntryArgs{}
}

func (p *NoteStoreGetResourceApplicationDataEntryArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreGetResourceApplicationDataEntryArgs) GetGUID() types.GUID {
	return p.GUID
}

func (p *NoteStoreGetResourceApplicationDataEntryArgs) GetKey() string {
	return p.Key
}
func (p *NoteStoreGetResourceApplicationDataEntryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetResourceApplicationDataEntryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetResourceApplicationDataEntryArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreGetResourceApplicationDataEntryArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *NoteStoreGetResourceApplicationDataEntryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceApplicationDataEntry_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetResourceApplicationDataEntryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceApplicationDataEntryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceApplicationDataEntryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:key: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceApplicationDataEntryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetResourceApplicationDataEntryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreGetResourceApplicationDataEntryResult struct {
	Success           *string                       `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreGetResourceApplicationDataEntryResult() *NoteStoreGetResourceApplicationDataEntryResult {
	return &NoteStoreGetResourceApplicationDataEntryResult{}
}

var NoteStoreGetResourceApplicationDataEntryResult_Success_DEFAULT string

func (p *NoteStoreGetResourceApplicationDataEntryResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return NoteStoreGetResourceApplicationDataEntryResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreGetResourceApplicationDataEntryResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetResourceApplicationDataEntryResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetResourceApplicationDataEntryResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetResourceApplicationDataEntryResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetResourceApplicationDataEntryResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetResourceApplicationDataEntryResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreGetResourceApplicationDataEntryResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreGetResourceApplicationDataEntryResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreGetResourceApplicationDataEntryResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreGetResourceApplicationDataEntryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetResourceApplicationDataEntryResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetResourceApplicationDataEntryResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetResourceApplicationDataEntryResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreGetResourceApplicationDataEntryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetResourceApplicationDataEntryResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreGetResourceApplicationDataEntryResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceApplicationDataEntryResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceApplicationDataEntryResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceApplicationDataEntryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceApplicationDataEntry_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetResourceApplicationDataEntryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceApplicationDataEntryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceApplicationDataEntryResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceApplicationDataEntryResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceApplicationDataEntryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetResourceApplicationDataEntryResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
//  - Key
//  - Value
type NoteStoreSetResourceApplicationDataEntryArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
	Key                 string     `thrift:"key,3" json:"key"`
	Value               string     `thrift:"value,4" json:"value"`
}

func NewNoteStoreSetResourceApplicationDataEntryArgs() *NoteStoreSetResourceApplicationDataEntryArgs {
	return &NoteStoreSetResourceApplicationDataEntryArgs{}
}

func (p *NoteStoreSetResourceApplicationDataEntryArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreSetResourceApplicationDataEntryArgs) GetGUID() types.GUID {
	return p.GUID
}

func (p *NoteStoreSetResourceApplicationDataEntryArgs) GetKey() string {
	return p.Key
}

func (p *NoteStoreSetResourceApplicationDataEntryArgs) GetValue() string {
	return p.Value
}
func (p *NoteStoreSetResourceApplicationDataEntryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreSetResourceApplicationDataEntryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreSetResourceApplicationDataEntryArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreSetResourceApplicationDataEntryArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *NoteStoreSetResourceApplicationDataEntryArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *NoteStoreSetResourceApplicationDataEntryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setResourceApplicationDataEntry_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreSetResourceApplicationDataEntryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreSetResourceApplicationDataEntryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreSetResourceApplicationDataEntryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:key: ", p), err)
	}
	return err
}

func (p *NoteStoreSetResourceApplicationDataEntryArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:value: ", p), err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:value: ", p), err)
	}
	return err
}

func (p *NoteStoreSetResourceApplicationDataEntryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreSetResourceApplicationDataEntryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreSetResourceApplicationDataEntryResult struct {
	Success           *int32                        `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreSetResourceApplicationDataEntryResult() *NoteStoreSetResourceApplicationDataEntryResult {
	return &NoteStoreSetResourceApplicationDataEntryResult{}
}

var NoteStoreSetResourceApplicationDataEntryResult_Success_DEFAULT int32

func (p *NoteStoreSetResourceApplicationDataEntryResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return NoteStoreSetResourceApplicationDataEntryResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreSetResourceApplicationDataEntryResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreSetResourceApplicationDataEntryResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreSetResourceApplicationDataEntryResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreSetResourceApplicationDataEntryResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreSetResourceApplicationDataEntryResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreSetResourceApplicationDataEntryResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreSetResourceApplicationDataEntryResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreSetResourceApplicationDataEntryResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreSetResourceApplicationDataEntryResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreSetResourceApplicationDataEntryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreSetResourceApplicationDataEntryResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreSetResourceApplicationDataEntryResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreSetResourceApplicationDataEntryResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreSetResourceApplicationDataEntryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreSetResourceApplicationDataEntryResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreSetResourceApplicationDataEntryResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreSetResourceApplicationDataEntryResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreSetResourceApplicationDataEntryResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreSetResourceApplicationDataEntryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setResourceApplicationDataEntry_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreSetResourceApplicationDataEntryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreSetResourceApplicationDataEntryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreSetResourceApplicationDataEntryResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreSetResourceApplicationDataEntryResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreSetResourceApplicationDataEntryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreSetResourceApplicationDataEntryResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
//  - Key
type NoteStoreUnsetResourceApplicationDataEntryArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
	Key                 string     `thrift:"key,3" json:"key"`
}

func NewNoteStoreUnsetResourceApplicationDataEntryArgs() *NoteStoreUnsetResourceApplicationDataEntryArgs {
	return &NoteStoreUnsetResourceApplicationDataEntryArgs{}
}

func (p *NoteStoreUnsetResourceApplicationDataEntryArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreUnsetResourceApplicationDataEntryArgs) GetGUID() types.GUID {
	return p.GUID
}

func (p *NoteStoreUnsetResourceApplicationDataEntryArgs) GetKey() string {
	return p.Key
}
func (p *NoteStoreUnsetResourceApplicationDataEntryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreUnsetResourceApplicationDataEntryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreUnsetResourceApplicationDataEntryArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreUnsetResourceApplicationDataEntryArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *NoteStoreUnsetResourceApplicationDataEntryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unsetResourceApplicationDataEntry_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreUnsetResourceApplicationDataEntryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreUnsetResourceApplicationDataEntryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreUnsetResourceApplicationDataEntryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:key: ", p), err)
	}
	return err
}

func (p *NoteStoreUnsetResourceApplicationDataEntryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreUnsetResourceApplicationDataEntryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreUnsetResourceApplicationDataEntryResult struct {
	Success           *int32                        `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreUnsetResourceApplicationDataEntryResult() *NoteStoreUnsetResourceApplicationDataEntryResult {
	return &NoteStoreUnsetResourceApplicationDataEntryResult{}
}

var NoteStoreUnsetResourceApplicationDataEntryResult_Success_DEFAULT int32

func (p *NoteStoreUnsetResourceApplicationDataEntryResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return NoteStoreUnsetResourceApplicationDataEntryResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreUnsetResourceApplicationDataEntryResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreUnsetResourceApplicationDataEntryResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreUnsetResourceApplicationDataEntryResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreUnsetResourceApplicationDataEntryResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreUnsetResourceApplicationDataEntryResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreUnsetResourceApplicationDataEntryResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreUnsetResourceApplicationDataEntryResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreUnsetResourceApplicationDataEntryResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreUnsetResourceApplicationDataEntryResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreUnsetResourceApplicationDataEntryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreUnsetResourceApplicationDataEntryResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreUnsetResourceApplicationDataEntryResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreUnsetResourceApplicationDataEntryResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreUnsetResourceApplicationDataEntryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreUnsetResourceApplicationDataEntryResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreUnsetResourceApplicationDataEntryResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreUnsetResourceApplicationDataEntryResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreUnsetResourceApplicationDataEntryResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreUnsetResourceApplicationDataEntryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unsetResourceApplicationDataEntry_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreUnsetResourceApplicationDataEntryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUnsetResourceApplicationDataEntryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUnsetResourceApplicationDataEntryResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUnsetResourceApplicationDataEntryResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUnsetResourceApplicationDataEntryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreUnsetResourceApplicationDataEntryResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - Resource
type NoteStoreUpdateResourceArgs struct {
	AuthenticationToken string          `thrift:"authenticationToken,1" json:"authenticationToken"`
	Resource            *types.Resource `thrift:"resource,2" json:"resource"`
}

func NewNoteStoreUpdateResourceArgs() *NoteStoreUpdateResourceArgs {
	return &NoteStoreUpdateResourceArgs{}
}

func (p *NoteStoreUpdateResourceArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

var NoteStoreUpdateResourceArgs_Resource_DEFAULT *types.Resource

func (p *NoteStoreUpdateResourceArgs) GetResource() *types.Resource {
	if !p.IsSetResource() {
		return NoteStoreUpdateResourceArgs_Resource_DEFAULT
	}
	return p.Resource
}
func (p *NoteStoreUpdateResourceArgs) IsSetResource() bool {
	return p.Resource != nil
}

func (p *NoteStoreUpdateResourceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreUpdateResourceArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreUpdateResourceArgs) readField2(iprot thrift.TProtocol) error {
	p.Resource = &types.Resource{}
	if err := p.Resource.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Resource), err)
	}
	return nil
}

func (p *NoteStoreUpdateResourceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateResource_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreUpdateResourceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreUpdateResourceArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resource", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resource: ", p), err)
	}
	if err := p.Resource.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Resource), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resource: ", p), err)
	}
	return err
}

func (p *NoteStoreUpdateResourceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreUpdateResourceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreUpdateResourceResult struct {
	Success           *int32                        `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreUpdateResourceResult() *NoteStoreUpdateResourceResult {
	return &NoteStoreUpdateResourceResult{}
}

var NoteStoreUpdateResourceResult_Success_DEFAULT int32

func (p *NoteStoreUpdateResourceResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return NoteStoreUpdateResourceResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreUpdateResourceResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreUpdateResourceResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreUpdateResourceResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreUpdateResourceResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreUpdateResourceResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreUpdateResourceResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreUpdateResourceResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreUpdateResourceResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreUpdateResourceResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreUpdateResourceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreUpdateResourceResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreUpdateResourceResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreUpdateResourceResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreUpdateResourceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreUpdateResourceResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreUpdateResourceResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreUpdateResourceResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreUpdateResourceResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreUpdateResourceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateResource_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreUpdateResourceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateResourceResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateResourceResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateResourceResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateResourceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreUpdateResourceResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
type NoteStoreGetResourceDataArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
}

func NewNoteStoreGetResourceDataArgs() *NoteStoreGetResourceDataArgs {
	return &NoteStoreGetResourceDataArgs{}
}

func (p *NoteStoreGetResourceDataArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreGetResourceDataArgs) GetGUID() types.GUID {
	return p.GUID
}
func (p *NoteStoreGetResourceDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetResourceDataArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetResourceDataArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreGetResourceDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceData_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetResourceDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetResourceDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreGetResourceDataResult struct {
	Success           []byte                        `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreGetResourceDataResult() *NoteStoreGetResourceDataResult {
	return &NoteStoreGetResourceDataResult{}
}

var NoteStoreGetResourceDataResult_Success_DEFAULT []byte

func (p *NoteStoreGetResourceDataResult) GetSuccess() []byte {
	return p.Success
}

var NoteStoreGetResourceDataResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetResourceDataResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetResourceDataResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetResourceDataResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetResourceDataResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetResourceDataResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreGetResourceDataResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreGetResourceDataResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreGetResourceDataResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreGetResourceDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetResourceDataResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetResourceDataResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetResourceDataResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreGetResourceDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetResourceDataResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *NoteStoreGetResourceDataResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceDataResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceDataResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceData_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetResourceDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBinary(p.Success); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceDataResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceDataResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceDataResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetResourceDataResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - NoteGuid
//  - ContentHash
//  - WithData
//  - WithRecognition
//  - WithAlternateData
type NoteStoreGetResourceByHashArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	NoteGuid            types.GUID `thrift:"noteGuid,2" json:"noteGuid"`
	ContentHash         []byte     `thrift:"contentHash,3" json:"contentHash"`
	WithData            bool       `thrift:"withData,4" json:"withData"`
	WithRecognition     bool       `thrift:"withRecognition,5" json:"withRecognition"`
	WithAlternateData   bool       `thrift:"withAlternateData,6" json:"withAlternateData"`
}

func NewNoteStoreGetResourceByHashArgs() *NoteStoreGetResourceByHashArgs {
	return &NoteStoreGetResourceByHashArgs{}
}

func (p *NoteStoreGetResourceByHashArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreGetResourceByHashArgs) GetNoteGuid() types.GUID {
	return p.NoteGuid
}

func (p *NoteStoreGetResourceByHashArgs) GetContentHash() []byte {
	return p.ContentHash
}

func (p *NoteStoreGetResourceByHashArgs) GetWithData() bool {
	return p.WithData
}

func (p *NoteStoreGetResourceByHashArgs) GetWithRecognition() bool {
	return p.WithRecognition
}

func (p *NoteStoreGetResourceByHashArgs) GetWithAlternateData() bool {
	return p.WithAlternateData
}
func (p *NoteStoreGetResourceByHashArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetResourceByHashArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetResourceByHashArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.NoteGuid = temp
	}
	return nil
}

func (p *NoteStoreGetResourceByHashArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ContentHash = v
	}
	return nil
}

func (p *NoteStoreGetResourceByHashArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.WithData = v
	}
	return nil
}

func (p *NoteStoreGetResourceByHashArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.WithRecognition = v
	}
	return nil
}

func (p *NoteStoreGetResourceByHashArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.WithAlternateData = v
	}
	return nil
}

func (p *NoteStoreGetResourceByHashArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceByHash_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetResourceByHashArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceByHashArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("noteGuid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:noteGuid: ", p), err)
	}
	if err := oprot.WriteString(string(p.NoteGuid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.noteGuid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:noteGuid: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceByHashArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentHash", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contentHash: ", p), err)
	}
	if err := oprot.WriteBinary(p.ContentHash); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.contentHash (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contentHash: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceByHashArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withData", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:withData: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.WithData)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.withData (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:withData: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceByHashArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withRecognition", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:withRecognition: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.WithRecognition)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.withRecognition (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:withRecognition: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceByHashArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("withAlternateData", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:withAlternateData: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.WithAlternateData)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.withAlternateData (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:withAlternateData: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceByHashArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetResourceByHashArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreGetResourceByHashResult struct {
	Success           *types.Resource               `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreGetResourceByHashResult() *NoteStoreGetResourceByHashResult {
	return &NoteStoreGetResourceByHashResult{}
}

var NoteStoreGetResourceByHashResult_Success_DEFAULT *types.Resource

func (p *NoteStoreGetResourceByHashResult) GetSuccess() *types.Resource {
	if !p.IsSetSuccess() {
		return NoteStoreGetResourceByHashResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreGetResourceByHashResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetResourceByHashResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetResourceByHashResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetResourceByHashResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetResourceByHashResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetResourceByHashResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreGetResourceByHashResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreGetResourceByHashResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreGetResourceByHashResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreGetResourceByHashResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetResourceByHashResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetResourceByHashResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetResourceByHashResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreGetResourceByHashResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetResourceByHashResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &types.Resource{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreGetResourceByHashResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceByHashResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceByHashResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceByHashResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceByHash_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetResourceByHashResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceByHashResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceByHashResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceByHashResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceByHashResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetResourceByHashResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
type NoteStoreGetResourceRecognitionArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
}

func NewNoteStoreGetResourceRecognitionArgs() *NoteStoreGetResourceRecognitionArgs {
	return &NoteStoreGetResourceRecognitionArgs{}
}

func (p *NoteStoreGetResourceRecognitionArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreGetResourceRecognitionArgs) GetGUID() types.GUID {
	return p.GUID
}
func (p *NoteStoreGetResourceRecognitionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetResourceRecognitionArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetResourceRecognitionArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreGetResourceRecognitionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceRecognition_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetResourceRecognitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceRecognitionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceRecognitionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetResourceRecognitionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreGetResourceRecognitionResult struct {
	Success           []byte                        `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreGetResourceRecognitionResult() *NoteStoreGetResourceRecognitionResult {
	return &NoteStoreGetResourceRecognitionResult{}
}

var NoteStoreGetResourceRecognitionResult_Success_DEFAULT []byte

func (p *NoteStoreGetResourceRecognitionResult) GetSuccess() []byte {
	return p.Success
}

var NoteStoreGetResourceRecognitionResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetResourceRecognitionResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetResourceRecognitionResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetResourceRecognitionResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetResourceRecognitionResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetResourceRecognitionResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreGetResourceRecognitionResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreGetResourceRecognitionResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreGetResourceRecognitionResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreGetResourceRecognitionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetResourceRecognitionResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetResourceRecognitionResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetResourceRecognitionResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreGetResourceRecognitionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetResourceRecognitionResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *NoteStoreGetResourceRecognitionResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceRecognitionResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceRecognitionResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceRecognitionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceRecognition_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetResourceRecognitionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBinary(p.Success); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceRecognitionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceRecognitionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceRecognitionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceRecognitionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetResourceRecognitionResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
type NoteStoreGetResourceAlternateDataArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
}

func NewNoteStoreGetResourceAlternateDataArgs() *NoteStoreGetResourceAlternateDataArgs {
	return &NoteStoreGetResourceAlternateDataArgs{}
}

func (p *NoteStoreGetResourceAlternateDataArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreGetResourceAlternateDataArgs) GetGUID() types.GUID {
	return p.GUID
}
func (p *NoteStoreGetResourceAlternateDataArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetResourceAlternateDataArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetResourceAlternateDataArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreGetResourceAlternateDataArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceAlternateData_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetResourceAlternateDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceAlternateDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceAlternateDataArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetResourceAlternateDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreGetResourceAlternateDataResult struct {
	Success           []byte                        `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreGetResourceAlternateDataResult() *NoteStoreGetResourceAlternateDataResult {
	return &NoteStoreGetResourceAlternateDataResult{}
}

var NoteStoreGetResourceAlternateDataResult_Success_DEFAULT []byte

func (p *NoteStoreGetResourceAlternateDataResult) GetSuccess() []byte {
	return p.Success
}

var NoteStoreGetResourceAlternateDataResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetResourceAlternateDataResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetResourceAlternateDataResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetResourceAlternateDataResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetResourceAlternateDataResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetResourceAlternateDataResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreGetResourceAlternateDataResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreGetResourceAlternateDataResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreGetResourceAlternateDataResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreGetResourceAlternateDataResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetResourceAlternateDataResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetResourceAlternateDataResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetResourceAlternateDataResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreGetResourceAlternateDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetResourceAlternateDataResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *NoteStoreGetResourceAlternateDataResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceAlternateDataResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceAlternateDataResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceAlternateDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceAlternateData_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetResourceAlternateDataResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBinary(p.Success); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceAlternateDataResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceAlternateDataResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceAlternateDataResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceAlternateDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetResourceAlternateDataResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
type NoteStoreGetResourceAttributesArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
}

func NewNoteStoreGetResourceAttributesArgs() *NoteStoreGetResourceAttributesArgs {
	return &NoteStoreGetResourceAttributesArgs{}
}

func (p *NoteStoreGetResourceAttributesArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreGetResourceAttributesArgs) GetGUID() types.GUID {
	return p.GUID
}
func (p *NoteStoreGetResourceAttributesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetResourceAttributesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetResourceAttributesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreGetResourceAttributesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceAttributes_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetResourceAttributesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceAttributesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreGetResourceAttributesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetResourceAttributesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreGetResourceAttributesResult struct {
	Success           *types.ResourceAttributes     `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreGetResourceAttributesResult() *NoteStoreGetResourceAttributesResult {
	return &NoteStoreGetResourceAttributesResult{}
}

var NoteStoreGetResourceAttributesResult_Success_DEFAULT *types.ResourceAttributes

func (p *NoteStoreGetResourceAttributesResult) GetSuccess() *types.ResourceAttributes {
	if !p.IsSetSuccess() {
		return NoteStoreGetResourceAttributesResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreGetResourceAttributesResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetResourceAttributesResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetResourceAttributesResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetResourceAttributesResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetResourceAttributesResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetResourceAttributesResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreGetResourceAttributesResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreGetResourceAttributesResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreGetResourceAttributesResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreGetResourceAttributesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetResourceAttributesResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetResourceAttributesResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetResourceAttributesResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreGetResourceAttributesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetResourceAttributesResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &types.ResourceAttributes{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreGetResourceAttributesResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceAttributesResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceAttributesResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreGetResourceAttributesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getResourceAttributes_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetResourceAttributesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceAttributesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceAttributesResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceAttributesResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetResourceAttributesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetResourceAttributesResult(%+v)", *p)
}

// Attributes:
//  - UserId
//  - PublicUri
type NoteStoreGetPublicNotebookArgs struct {
	UserId    types.UserID `thrift:"userId,1" json:"userId"`
	PublicUri string       `thrift:"publicUri,2" json:"publicUri"`
}

func NewNoteStoreGetPublicNotebookArgs() *NoteStoreGetPublicNotebookArgs {
	return &NoteStoreGetPublicNotebookArgs{}
}

func (p *NoteStoreGetPublicNotebookArgs) GetUserId() types.UserID {
	return p.UserId
}

func (p *NoteStoreGetPublicNotebookArgs) GetPublicUri() string {
	return p.PublicUri
}
func (p *NoteStoreGetPublicNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetPublicNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := types.UserID(v)
		p.UserId = temp
	}
	return nil
}

func (p *NoteStoreGetPublicNotebookArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.PublicUri = v
	}
	return nil
}

func (p *NoteStoreGetPublicNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPublicNotebook_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetPublicNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *NoteStoreGetPublicNotebookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("publicUri", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:publicUri: ", p), err)
	}
	if err := oprot.WriteString(string(p.PublicUri)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.publicUri (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:publicUri: ", p), err)
	}
	return err
}

func (p *NoteStoreGetPublicNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetPublicNotebookArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SystemException
//  - NotFoundException
type NoteStoreGetPublicNotebookResult struct {
	Success           *types.Notebook               `thrift:"success,0" json:"success,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,1" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,2" json:"notFoundException,omitempty"`
}

func NewNoteStoreGetPublicNotebookResult() *NoteStoreGetPublicNotebookResult {
	return &NoteStoreGetPublicNotebookResult{}
}

var NoteStoreGetPublicNotebookResult_Success_DEFAULT *types.Notebook

func (p *NoteStoreGetPublicNotebookResult) GetSuccess() *types.Notebook {
	if !p.IsSetSuccess() {
		return NoteStoreGetPublicNotebookResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreGetPublicNotebookResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetPublicNotebookResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetPublicNotebookResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreGetPublicNotebookResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreGetPublicNotebookResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreGetPublicNotebookResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreGetPublicNotebookResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetPublicNotebookResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetPublicNotebookResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreGetPublicNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetPublicNotebookResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &types.Notebook{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreGetPublicNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetPublicNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreGetPublicNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getPublicNotebook_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetPublicNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetPublicNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetPublicNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetPublicNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetPublicNotebookResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - SharedNotebook
type NoteStoreCreateSharedNotebookArgs struct {
	AuthenticationToken string                `thrift:"authenticationToken,1" json:"authenticationToken"`
	SharedNotebook      *types.SharedNotebook `thrift:"sharedNotebook,2" json:"sharedNotebook"`
}

func NewNoteStoreCreateSharedNotebookArgs() *NoteStoreCreateSharedNotebookArgs {
	return &NoteStoreCreateSharedNotebookArgs{}
}

func (p *NoteStoreCreateSharedNotebookArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

var NoteStoreCreateSharedNotebookArgs_SharedNotebook_DEFAULT *types.SharedNotebook

func (p *NoteStoreCreateSharedNotebookArgs) GetSharedNotebook() *types.SharedNotebook {
	if !p.IsSetSharedNotebook() {
		return NoteStoreCreateSharedNotebookArgs_SharedNotebook_DEFAULT
	}
	return p.SharedNotebook
}
func (p *NoteStoreCreateSharedNotebookArgs) IsSetSharedNotebook() bool {
	return p.SharedNotebook != nil
}

func (p *NoteStoreCreateSharedNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreCreateSharedNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreCreateSharedNotebookArgs) readField2(iprot thrift.TProtocol) error {
	p.SharedNotebook = &types.SharedNotebook{}
	if err := p.SharedNotebook.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SharedNotebook), err)
	}
	return nil
}

func (p *NoteStoreCreateSharedNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createSharedNotebook_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreCreateSharedNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreCreateSharedNotebookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sharedNotebook", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sharedNotebook: ", p), err)
	}
	if err := p.SharedNotebook.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SharedNotebook), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sharedNotebook: ", p), err)
	}
	return err
}

func (p *NoteStoreCreateSharedNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreCreateSharedNotebookArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - NotFoundException
//  - SystemException
type NoteStoreCreateSharedNotebookResult struct {
	Success           *types.SharedNotebook         `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,2" json:"notFoundException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,3" json:"systemException,omitempty"`
}

func NewNoteStoreCreateSharedNotebookResult() *NoteStoreCreateSharedNotebookResult {
	return &NoteStoreCreateSharedNotebookResult{}
}

var NoteStoreCreateSharedNotebookResult_Success_DEFAULT *types.SharedNotebook

func (p *NoteStoreCreateSharedNotebookResult) GetSuccess() *types.SharedNotebook {
	if !p.IsSetSuccess() {
		return NoteStoreCreateSharedNotebookResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreCreateSharedNotebookResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreCreateSharedNotebookResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreCreateSharedNotebookResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreCreateSharedNotebookResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreCreateSharedNotebookResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreCreateSharedNotebookResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}

var NoteStoreCreateSharedNotebookResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreCreateSharedNotebookResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreCreateSharedNotebookResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreCreateSharedNotebookResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreCreateSharedNotebookResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreCreateSharedNotebookResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreCreateSharedNotebookResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreCreateSharedNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreCreateSharedNotebookResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &types.SharedNotebook{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreCreateSharedNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreCreateSharedNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreCreateSharedNotebookResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreCreateSharedNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createSharedNotebook_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreCreateSharedNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCreateSharedNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCreateSharedNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCreateSharedNotebookResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCreateSharedNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreCreateSharedNotebookResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - SharedNotebook
type NoteStoreUpdateSharedNotebookArgs struct {
	AuthenticationToken string                `thrift:"authenticationToken,1" json:"authenticationToken"`
	SharedNotebook      *types.SharedNotebook `thrift:"sharedNotebook,2" json:"sharedNotebook"`
}

func NewNoteStoreUpdateSharedNotebookArgs() *NoteStoreUpdateSharedNotebookArgs {
	return &NoteStoreUpdateSharedNotebookArgs{}
}

func (p *NoteStoreUpdateSharedNotebookArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

var NoteStoreUpdateSharedNotebookArgs_SharedNotebook_DEFAULT *types.SharedNotebook

func (p *NoteStoreUpdateSharedNotebookArgs) GetSharedNotebook() *types.SharedNotebook {
	if !p.IsSetSharedNotebook() {
		return NoteStoreUpdateSharedNotebookArgs_SharedNotebook_DEFAULT
	}
	return p.SharedNotebook
}
func (p *NoteStoreUpdateSharedNotebookArgs) IsSetSharedNotebook() bool {
	return p.SharedNotebook != nil
}

func (p *NoteStoreUpdateSharedNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreUpdateSharedNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreUpdateSharedNotebookArgs) readField2(iprot thrift.TProtocol) error {
	p.SharedNotebook = &types.SharedNotebook{}
	if err := p.SharedNotebook.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SharedNotebook), err)
	}
	return nil
}

func (p *NoteStoreUpdateSharedNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSharedNotebook_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreUpdateSharedNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreUpdateSharedNotebookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sharedNotebook", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sharedNotebook: ", p), err)
	}
	if err := p.SharedNotebook.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SharedNotebook), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sharedNotebook: ", p), err)
	}
	return err
}

func (p *NoteStoreUpdateSharedNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreUpdateSharedNotebookArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - NotFoundException
//  - SystemException
type NoteStoreUpdateSharedNotebookResult struct {
	Success           *int32                        `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,2" json:"notFoundException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,3" json:"systemException,omitempty"`
}

func NewNoteStoreUpdateSharedNotebookResult() *NoteStoreUpdateSharedNotebookResult {
	return &NoteStoreUpdateSharedNotebookResult{}
}

var NoteStoreUpdateSharedNotebookResult_Success_DEFAULT int32

func (p *NoteStoreUpdateSharedNotebookResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return NoteStoreUpdateSharedNotebookResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreUpdateSharedNotebookResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreUpdateSharedNotebookResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreUpdateSharedNotebookResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreUpdateSharedNotebookResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreUpdateSharedNotebookResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreUpdateSharedNotebookResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}

var NoteStoreUpdateSharedNotebookResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreUpdateSharedNotebookResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreUpdateSharedNotebookResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreUpdateSharedNotebookResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreUpdateSharedNotebookResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreUpdateSharedNotebookResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreUpdateSharedNotebookResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreUpdateSharedNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreUpdateSharedNotebookResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreUpdateSharedNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreUpdateSharedNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreUpdateSharedNotebookResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreUpdateSharedNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSharedNotebook_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreUpdateSharedNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateSharedNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateSharedNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateSharedNotebookResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateSharedNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreUpdateSharedNotebookResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - SharedNotebookId
//  - RecipientSettings
type NoteStoreSetSharedNotebookRecipientSettingsArgs struct {
	AuthenticationToken string                                 `thrift:"authenticationToken,1" json:"authenticationToken"`
	SharedNotebookId    int64                                  `thrift:"sharedNotebookId,2" json:"sharedNotebookId"`
	RecipientSettings   *types.SharedNotebookRecipientSettings `thrift:"recipientSettings,3" json:"recipientSettings"`
}

func NewNoteStoreSetSharedNotebookRecipientSettingsArgs() *NoteStoreSetSharedNotebookRecipientSettingsArgs {
	return &NoteStoreSetSharedNotebookRecipientSettingsArgs{}
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsArgs) GetSharedNotebookId() int64 {
	return p.SharedNotebookId
}

var NoteStoreSetSharedNotebookRecipientSettingsArgs_RecipientSettings_DEFAULT *types.SharedNotebookRecipientSettings

func (p *NoteStoreSetSharedNotebookRecipientSettingsArgs) GetRecipientSettings() *types.SharedNotebookRecipientSettings {
	if !p.IsSetRecipientSettings() {
		return NoteStoreSetSharedNotebookRecipientSettingsArgs_RecipientSettings_DEFAULT
	}
	return p.RecipientSettings
}
func (p *NoteStoreSetSharedNotebookRecipientSettingsArgs) IsSetRecipientSettings() bool {
	return p.RecipientSettings != nil
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SharedNotebookId = v
	}
	return nil
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsArgs) readField3(iprot thrift.TProtocol) error {
	p.RecipientSettings = &types.SharedNotebookRecipientSettings{}
	if err := p.RecipientSettings.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RecipientSettings), err)
	}
	return nil
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setSharedNotebookRecipientSettings_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sharedNotebookId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sharedNotebookId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SharedNotebookId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sharedNotebookId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sharedNotebookId: ", p), err)
	}
	return err
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recipientSettings", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:recipientSettings: ", p), err)
	}
	if err := p.RecipientSettings.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RecipientSettings), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:recipientSettings: ", p), err)
	}
	return err
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreSetSharedNotebookRecipientSettingsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - NotFoundException
//  - SystemException
type NoteStoreSetSharedNotebookRecipientSettingsResult struct {
	Success           *int32                        `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,2" json:"notFoundException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,3" json:"systemException,omitempty"`
}

func NewNoteStoreSetSharedNotebookRecipientSettingsResult() *NoteStoreSetSharedNotebookRecipientSettingsResult {
	return &NoteStoreSetSharedNotebookRecipientSettingsResult{}
}

var NoteStoreSetSharedNotebookRecipientSettingsResult_Success_DEFAULT int32

func (p *NoteStoreSetSharedNotebookRecipientSettingsResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return NoteStoreSetSharedNotebookRecipientSettingsResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreSetSharedNotebookRecipientSettingsResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreSetSharedNotebookRecipientSettingsResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreSetSharedNotebookRecipientSettingsResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreSetSharedNotebookRecipientSettingsResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreSetSharedNotebookRecipientSettingsResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreSetSharedNotebookRecipientSettingsResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}

var NoteStoreSetSharedNotebookRecipientSettingsResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreSetSharedNotebookRecipientSettingsResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreSetSharedNotebookRecipientSettingsResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreSetSharedNotebookRecipientSettingsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setSharedNotebookRecipientSettings_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreSetSharedNotebookRecipientSettingsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreSetSharedNotebookRecipientSettingsResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - NotebookGuid
//  - MessageText
//  - Recipients
type NoteStoreSendMessageToSharedNotebookMembersArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	NotebookGuid        types.GUID `thrift:"notebookGuid,2" json:"notebookGuid"`
	MessageText         string     `thrift:"messageText,3" json:"messageText"`
	Recipients          []string   `thrift:"recipients,4" json:"recipients"`
}

func NewNoteStoreSendMessageToSharedNotebookMembersArgs() *NoteStoreSendMessageToSharedNotebookMembersArgs {
	return &NoteStoreSendMessageToSharedNotebookMembersArgs{}
}

func (p *NoteStoreSendMessageToSharedNotebookMembersArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreSendMessageToSharedNotebookMembersArgs) GetNotebookGuid() types.GUID {
	return p.NotebookGuid
}

func (p *NoteStoreSendMessageToSharedNotebookMembersArgs) GetMessageText() string {
	return p.MessageText
}

func (p *NoteStoreSendMessageToSharedNotebookMembersArgs) GetRecipients() []string {
	return p.Recipients
}
func (p *NoteStoreSendMessageToSharedNotebookMembersArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreSendMessageToSharedNotebookMembersArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreSendMessageToSharedNotebookMembersArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.NotebookGuid = temp
	}
	return nil
}

func (p *NoteStoreSendMessageToSharedNotebookMembersArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MessageText = v
	}
	return nil
}

func (p *NoteStoreSendMessageToSharedNotebookMembersArgs) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Recipients = tSlice
	for i := 0; i < size; i++ {
		var _elem188 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem188 = v
		}
		p.Recipients = append(p.Recipients, _elem188)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NoteStoreSendMessageToSharedNotebookMembersArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendMessageToSharedNotebookMembers_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreSendMessageToSharedNotebookMembersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreSendMessageToSharedNotebookMembersArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notebookGuid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notebookGuid: ", p), err)
	}
	if err := oprot.WriteString(string(p.NotebookGuid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notebookGuid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notebookGuid: ", p), err)
	}
	return err
}

func (p *NoteStoreSendMessageToSharedNotebookMembersArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("messageText", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:messageText: ", p), err)
	}
	if err := oprot.WriteString(string(p.MessageText)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.messageText (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:messageText: ", p), err)
	}
	return err
}

func (p *NoteStoreSendMessageToSharedNotebookMembersArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recipients", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:recipients: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Recipients)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Recipients {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:recipients: ", p), err)
	}
	return err
}

func (p *NoteStoreSendMessageToSharedNotebookMembersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreSendMessageToSharedNotebookMembersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - NotFoundException
//  - SystemException
type NoteStoreSendMessageToSharedNotebookMembersResult struct {
	Success           *int32                        `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,2" json:"notFoundException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,3" json:"systemException,omitempty"`
}

func NewNoteStoreSendMessageToSharedNotebookMembersResult() *NoteStoreSendMessageToSharedNotebookMembersResult {
	return &NoteStoreSendMessageToSharedNotebookMembersResult{}
}

var NoteStoreSendMessageToSharedNotebookMembersResult_Success_DEFAULT int32

func (p *NoteStoreSendMessageToSharedNotebookMembersResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return NoteStoreSendMessageToSharedNotebookMembersResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreSendMessageToSharedNotebookMembersResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreSendMessageToSharedNotebookMembersResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreSendMessageToSharedNotebookMembersResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreSendMessageToSharedNotebookMembersResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreSendMessageToSharedNotebookMembersResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreSendMessageToSharedNotebookMembersResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}

var NoteStoreSendMessageToSharedNotebookMembersResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreSendMessageToSharedNotebookMembersResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreSendMessageToSharedNotebookMembersResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreSendMessageToSharedNotebookMembersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreSendMessageToSharedNotebookMembersResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreSendMessageToSharedNotebookMembersResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreSendMessageToSharedNotebookMembersResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreSendMessageToSharedNotebookMembersResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreSendMessageToSharedNotebookMembersResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreSendMessageToSharedNotebookMembersResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreSendMessageToSharedNotebookMembersResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreSendMessageToSharedNotebookMembersResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreSendMessageToSharedNotebookMembersResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendMessageToSharedNotebookMembers_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreSendMessageToSharedNotebookMembersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreSendMessageToSharedNotebookMembersResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreSendMessageToSharedNotebookMembersResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreSendMessageToSharedNotebookMembersResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreSendMessageToSharedNotebookMembersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreSendMessageToSharedNotebookMembersResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
type NoteStoreListSharedNotebooksArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1" json:"authenticationToken"`
}

func NewNoteStoreListSharedNotebooksArgs() *NoteStoreListSharedNotebooksArgs {
	return &NoteStoreListSharedNotebooksArgs{}
}

func (p *NoteStoreListSharedNotebooksArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}
func (p *NoteStoreListSharedNotebooksArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreListSharedNotebooksArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreListSharedNotebooksArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listSharedNotebooks_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreListSharedNotebooksArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreListSharedNotebooksArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreListSharedNotebooksArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - NotFoundException
//  - SystemException
type NoteStoreListSharedNotebooksResult struct {
	Success           []*types.SharedNotebook       `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,2" json:"notFoundException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,3" json:"systemException,omitempty"`
}

func NewNoteStoreListSharedNotebooksResult() *NoteStoreListSharedNotebooksResult {
	return &NoteStoreListSharedNotebooksResult{}
}

var NoteStoreListSharedNotebooksResult_Success_DEFAULT []*types.SharedNotebook

func (p *NoteStoreListSharedNotebooksResult) GetSuccess() []*types.SharedNotebook {
	return p.Success
}

var NoteStoreListSharedNotebooksResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreListSharedNotebooksResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreListSharedNotebooksResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreListSharedNotebooksResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreListSharedNotebooksResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreListSharedNotebooksResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}

var NoteStoreListSharedNotebooksResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreListSharedNotebooksResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreListSharedNotebooksResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreListSharedNotebooksResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreListSharedNotebooksResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreListSharedNotebooksResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreListSharedNotebooksResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreListSharedNotebooksResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreListSharedNotebooksResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*types.SharedNotebook, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem189 := &types.SharedNotebook{}
		if err := _elem189.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem189), err)
		}
		p.Success = append(p.Success, _elem189)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NoteStoreListSharedNotebooksResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreListSharedNotebooksResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreListSharedNotebooksResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreListSharedNotebooksResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listSharedNotebooks_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreListSharedNotebooksResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListSharedNotebooksResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListSharedNotebooksResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListSharedNotebooksResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListSharedNotebooksResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreListSharedNotebooksResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - SharedNotebookIds
type NoteStoreExpungeSharedNotebooksArgs struct {
	AuthenticationToken string  `thrift:"authenticationToken,1" json:"authenticationToken"`
	SharedNotebookIds   []int64 `thrift:"sharedNotebookIds,2" json:"sharedNotebookIds"`
}

func NewNoteStoreExpungeSharedNotebooksArgs() *NoteStoreExpungeSharedNotebooksArgs {
	return &NoteStoreExpungeSharedNotebooksArgs{}
}

func (p *NoteStoreExpungeSharedNotebooksArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreExpungeSharedNotebooksArgs) GetSharedNotebookIds() []int64 {
	return p.SharedNotebookIds
}
func (p *NoteStoreExpungeSharedNotebooksArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreExpungeSharedNotebooksArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreExpungeSharedNotebooksArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.SharedNotebookIds = tSlice
	for i := 0; i < size; i++ {
		var _elem190 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem190 = v
		}
		p.SharedNotebookIds = append(p.SharedNotebookIds, _elem190)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NoteStoreExpungeSharedNotebooksArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeSharedNotebooks_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreExpungeSharedNotebooksArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreExpungeSharedNotebooksArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sharedNotebookIds", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sharedNotebookIds: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.SharedNotebookIds)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.SharedNotebookIds {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sharedNotebookIds: ", p), err)
	}
	return err
}

func (p *NoteStoreExpungeSharedNotebooksArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreExpungeSharedNotebooksArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - NotFoundException
//  - SystemException
type NoteStoreExpungeSharedNotebooksResult struct {
	Success           *int32                        `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,2" json:"notFoundException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,3" json:"systemException,omitempty"`
}

func NewNoteStoreExpungeSharedNotebooksResult() *NoteStoreExpungeSharedNotebooksResult {
	return &NoteStoreExpungeSharedNotebooksResult{}
}

var NoteStoreExpungeSharedNotebooksResult_Success_DEFAULT int32

func (p *NoteStoreExpungeSharedNotebooksResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return NoteStoreExpungeSharedNotebooksResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreExpungeSharedNotebooksResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreExpungeSharedNotebooksResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreExpungeSharedNotebooksResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreExpungeSharedNotebooksResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreExpungeSharedNotebooksResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreExpungeSharedNotebooksResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}

var NoteStoreExpungeSharedNotebooksResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreExpungeSharedNotebooksResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreExpungeSharedNotebooksResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreExpungeSharedNotebooksResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreExpungeSharedNotebooksResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreExpungeSharedNotebooksResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreExpungeSharedNotebooksResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreExpungeSharedNotebooksResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreExpungeSharedNotebooksResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreExpungeSharedNotebooksResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreExpungeSharedNotebooksResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreExpungeSharedNotebooksResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreExpungeSharedNotebooksResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeSharedNotebooks_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreExpungeSharedNotebooksResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeSharedNotebooksResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeSharedNotebooksResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeSharedNotebooksResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeSharedNotebooksResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreExpungeSharedNotebooksResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - LinkedNotebook
type NoteStoreCreateLinkedNotebookArgs struct {
	AuthenticationToken string                `thrift:"authenticationToken,1" json:"authenticationToken"`
	LinkedNotebook      *types.LinkedNotebook `thrift:"linkedNotebook,2" json:"linkedNotebook"`
}

func NewNoteStoreCreateLinkedNotebookArgs() *NoteStoreCreateLinkedNotebookArgs {
	return &NoteStoreCreateLinkedNotebookArgs{}
}

func (p *NoteStoreCreateLinkedNotebookArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

var NoteStoreCreateLinkedNotebookArgs_LinkedNotebook_DEFAULT *types.LinkedNotebook

func (p *NoteStoreCreateLinkedNotebookArgs) GetLinkedNotebook() *types.LinkedNotebook {
	if !p.IsSetLinkedNotebook() {
		return NoteStoreCreateLinkedNotebookArgs_LinkedNotebook_DEFAULT
	}
	return p.LinkedNotebook
}
func (p *NoteStoreCreateLinkedNotebookArgs) IsSetLinkedNotebook() bool {
	return p.LinkedNotebook != nil
}

func (p *NoteStoreCreateLinkedNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreCreateLinkedNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreCreateLinkedNotebookArgs) readField2(iprot thrift.TProtocol) error {
	p.LinkedNotebook = &types.LinkedNotebook{}
	if err := p.LinkedNotebook.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LinkedNotebook), err)
	}
	return nil
}

func (p *NoteStoreCreateLinkedNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createLinkedNotebook_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreCreateLinkedNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreCreateLinkedNotebookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("linkedNotebook", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:linkedNotebook: ", p), err)
	}
	if err := p.LinkedNotebook.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LinkedNotebook), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:linkedNotebook: ", p), err)
	}
	return err
}

func (p *NoteStoreCreateLinkedNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreCreateLinkedNotebookArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - NotFoundException
//  - SystemException
type NoteStoreCreateLinkedNotebookResult struct {
	Success           *types.LinkedNotebook         `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,2" json:"notFoundException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,3" json:"systemException,omitempty"`
}

func NewNoteStoreCreateLinkedNotebookResult() *NoteStoreCreateLinkedNotebookResult {
	return &NoteStoreCreateLinkedNotebookResult{}
}

var NoteStoreCreateLinkedNotebookResult_Success_DEFAULT *types.LinkedNotebook

func (p *NoteStoreCreateLinkedNotebookResult) GetSuccess() *types.LinkedNotebook {
	if !p.IsSetSuccess() {
		return NoteStoreCreateLinkedNotebookResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreCreateLinkedNotebookResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreCreateLinkedNotebookResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreCreateLinkedNotebookResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreCreateLinkedNotebookResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreCreateLinkedNotebookResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreCreateLinkedNotebookResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}

var NoteStoreCreateLinkedNotebookResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreCreateLinkedNotebookResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreCreateLinkedNotebookResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreCreateLinkedNotebookResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreCreateLinkedNotebookResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreCreateLinkedNotebookResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreCreateLinkedNotebookResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreCreateLinkedNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreCreateLinkedNotebookResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &types.LinkedNotebook{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreCreateLinkedNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreCreateLinkedNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreCreateLinkedNotebookResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreCreateLinkedNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createLinkedNotebook_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreCreateLinkedNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCreateLinkedNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCreateLinkedNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCreateLinkedNotebookResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreCreateLinkedNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreCreateLinkedNotebookResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - LinkedNotebook
type NoteStoreUpdateLinkedNotebookArgs struct {
	AuthenticationToken string                `thrift:"authenticationToken,1" json:"authenticationToken"`
	LinkedNotebook      *types.LinkedNotebook `thrift:"linkedNotebook,2" json:"linkedNotebook"`
}

func NewNoteStoreUpdateLinkedNotebookArgs() *NoteStoreUpdateLinkedNotebookArgs {
	return &NoteStoreUpdateLinkedNotebookArgs{}
}

func (p *NoteStoreUpdateLinkedNotebookArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

var NoteStoreUpdateLinkedNotebookArgs_LinkedNotebook_DEFAULT *types.LinkedNotebook

func (p *NoteStoreUpdateLinkedNotebookArgs) GetLinkedNotebook() *types.LinkedNotebook {
	if !p.IsSetLinkedNotebook() {
		return NoteStoreUpdateLinkedNotebookArgs_LinkedNotebook_DEFAULT
	}
	return p.LinkedNotebook
}
func (p *NoteStoreUpdateLinkedNotebookArgs) IsSetLinkedNotebook() bool {
	return p.LinkedNotebook != nil
}

func (p *NoteStoreUpdateLinkedNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreUpdateLinkedNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreUpdateLinkedNotebookArgs) readField2(iprot thrift.TProtocol) error {
	p.LinkedNotebook = &types.LinkedNotebook{}
	if err := p.LinkedNotebook.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LinkedNotebook), err)
	}
	return nil
}

func (p *NoteStoreUpdateLinkedNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateLinkedNotebook_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreUpdateLinkedNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreUpdateLinkedNotebookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("linkedNotebook", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:linkedNotebook: ", p), err)
	}
	if err := p.LinkedNotebook.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LinkedNotebook), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:linkedNotebook: ", p), err)
	}
	return err
}

func (p *NoteStoreUpdateLinkedNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreUpdateLinkedNotebookArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - NotFoundException
//  - SystemException
type NoteStoreUpdateLinkedNotebookResult struct {
	Success           *int32                        `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,2" json:"notFoundException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,3" json:"systemException,omitempty"`
}

func NewNoteStoreUpdateLinkedNotebookResult() *NoteStoreUpdateLinkedNotebookResult {
	return &NoteStoreUpdateLinkedNotebookResult{}
}

var NoteStoreUpdateLinkedNotebookResult_Success_DEFAULT int32

func (p *NoteStoreUpdateLinkedNotebookResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return NoteStoreUpdateLinkedNotebookResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreUpdateLinkedNotebookResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreUpdateLinkedNotebookResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreUpdateLinkedNotebookResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreUpdateLinkedNotebookResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreUpdateLinkedNotebookResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreUpdateLinkedNotebookResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}

var NoteStoreUpdateLinkedNotebookResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreUpdateLinkedNotebookResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreUpdateLinkedNotebookResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreUpdateLinkedNotebookResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreUpdateLinkedNotebookResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreUpdateLinkedNotebookResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreUpdateLinkedNotebookResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreUpdateLinkedNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreUpdateLinkedNotebookResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreUpdateLinkedNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreUpdateLinkedNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreUpdateLinkedNotebookResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreUpdateLinkedNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateLinkedNotebook_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreUpdateLinkedNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateLinkedNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateLinkedNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateLinkedNotebookResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreUpdateLinkedNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreUpdateLinkedNotebookResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
type NoteStoreListLinkedNotebooksArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1" json:"authenticationToken"`
}

func NewNoteStoreListLinkedNotebooksArgs() *NoteStoreListLinkedNotebooksArgs {
	return &NoteStoreListLinkedNotebooksArgs{}
}

func (p *NoteStoreListLinkedNotebooksArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}
func (p *NoteStoreListLinkedNotebooksArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreListLinkedNotebooksArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreListLinkedNotebooksArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listLinkedNotebooks_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreListLinkedNotebooksArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreListLinkedNotebooksArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreListLinkedNotebooksArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - NotFoundException
//  - SystemException
type NoteStoreListLinkedNotebooksResult struct {
	Success           []*types.LinkedNotebook       `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,2" json:"notFoundException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,3" json:"systemException,omitempty"`
}

func NewNoteStoreListLinkedNotebooksResult() *NoteStoreListLinkedNotebooksResult {
	return &NoteStoreListLinkedNotebooksResult{}
}

var NoteStoreListLinkedNotebooksResult_Success_DEFAULT []*types.LinkedNotebook

func (p *NoteStoreListLinkedNotebooksResult) GetSuccess() []*types.LinkedNotebook {
	return p.Success
}

var NoteStoreListLinkedNotebooksResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreListLinkedNotebooksResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreListLinkedNotebooksResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreListLinkedNotebooksResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreListLinkedNotebooksResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreListLinkedNotebooksResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}

var NoteStoreListLinkedNotebooksResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreListLinkedNotebooksResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreListLinkedNotebooksResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreListLinkedNotebooksResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreListLinkedNotebooksResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreListLinkedNotebooksResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreListLinkedNotebooksResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreListLinkedNotebooksResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreListLinkedNotebooksResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*types.LinkedNotebook, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem191 := &types.LinkedNotebook{}
		if err := _elem191.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem191), err)
		}
		p.Success = append(p.Success, _elem191)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *NoteStoreListLinkedNotebooksResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreListLinkedNotebooksResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreListLinkedNotebooksResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreListLinkedNotebooksResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listLinkedNotebooks_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreListLinkedNotebooksResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListLinkedNotebooksResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListLinkedNotebooksResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListLinkedNotebooksResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreListLinkedNotebooksResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreListLinkedNotebooksResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
type NoteStoreExpungeLinkedNotebookArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
}

func NewNoteStoreExpungeLinkedNotebookArgs() *NoteStoreExpungeLinkedNotebookArgs {
	return &NoteStoreExpungeLinkedNotebookArgs{}
}

func (p *NoteStoreExpungeLinkedNotebookArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreExpungeLinkedNotebookArgs) GetGUID() types.GUID {
	return p.GUID
}
func (p *NoteStoreExpungeLinkedNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreExpungeLinkedNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreExpungeLinkedNotebookArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreExpungeLinkedNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeLinkedNotebook_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreExpungeLinkedNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreExpungeLinkedNotebookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreExpungeLinkedNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreExpungeLinkedNotebookArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - NotFoundException
//  - SystemException
type NoteStoreExpungeLinkedNotebookResult struct {
	Success           *int32                        `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,2" json:"notFoundException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,3" json:"systemException,omitempty"`
}

func NewNoteStoreExpungeLinkedNotebookResult() *NoteStoreExpungeLinkedNotebookResult {
	return &NoteStoreExpungeLinkedNotebookResult{}
}

var NoteStoreExpungeLinkedNotebookResult_Success_DEFAULT int32

func (p *NoteStoreExpungeLinkedNotebookResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return NoteStoreExpungeLinkedNotebookResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreExpungeLinkedNotebookResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreExpungeLinkedNotebookResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreExpungeLinkedNotebookResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreExpungeLinkedNotebookResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreExpungeLinkedNotebookResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreExpungeLinkedNotebookResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}

var NoteStoreExpungeLinkedNotebookResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreExpungeLinkedNotebookResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreExpungeLinkedNotebookResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreExpungeLinkedNotebookResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreExpungeLinkedNotebookResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreExpungeLinkedNotebookResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreExpungeLinkedNotebookResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreExpungeLinkedNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreExpungeLinkedNotebookResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreExpungeLinkedNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreExpungeLinkedNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreExpungeLinkedNotebookResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreExpungeLinkedNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("expungeLinkedNotebook_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreExpungeLinkedNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeLinkedNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeLinkedNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeLinkedNotebookResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreExpungeLinkedNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreExpungeLinkedNotebookResult(%+v)", *p)
}

// Attributes:
//  - ShareKey
//  - AuthenticationToken
type NoteStoreAuthenticateToSharedNotebookArgs struct {
	ShareKey            string `thrift:"shareKey,1" json:"shareKey"`
	AuthenticationToken string `thrift:"authenticationToken,2" json:"authenticationToken"`
}

func NewNoteStoreAuthenticateToSharedNotebookArgs() *NoteStoreAuthenticateToSharedNotebookArgs {
	return &NoteStoreAuthenticateToSharedNotebookArgs{}
}

func (p *NoteStoreAuthenticateToSharedNotebookArgs) GetShareKey() string {
	return p.ShareKey
}

func (p *NoteStoreAuthenticateToSharedNotebookArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}
func (p *NoteStoreAuthenticateToSharedNotebookArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreAuthenticateToSharedNotebookArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ShareKey = v
	}
	return nil
}

func (p *NoteStoreAuthenticateToSharedNotebookArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreAuthenticateToSharedNotebookArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("authenticateToSharedNotebook_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreAuthenticateToSharedNotebookArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("shareKey", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:shareKey: ", p), err)
	}
	if err := oprot.WriteString(string(p.ShareKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.shareKey (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:shareKey: ", p), err)
	}
	return err
}

func (p *NoteStoreAuthenticateToSharedNotebookArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreAuthenticateToSharedNotebookArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreAuthenticateToSharedNotebookArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - NotFoundException
//  - SystemException
type NoteStoreAuthenticateToSharedNotebookResult struct {
	Success           *userstore.AuthenticationResult_ `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException        `thrift:"userException,1" json:"userException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException    `thrift:"notFoundException,2" json:"notFoundException,omitempty"`
	SystemException   *errors.EDAMSystemException      `thrift:"systemException,3" json:"systemException,omitempty"`
}

func NewNoteStoreAuthenticateToSharedNotebookResult() *NoteStoreAuthenticateToSharedNotebookResult {
	return &NoteStoreAuthenticateToSharedNotebookResult{}
}

var NoteStoreAuthenticateToSharedNotebookResult_Success_DEFAULT *userstore.AuthenticationResult_

func (p *NoteStoreAuthenticateToSharedNotebookResult) GetSuccess() *userstore.AuthenticationResult_ {
	if !p.IsSetSuccess() {
		return NoteStoreAuthenticateToSharedNotebookResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreAuthenticateToSharedNotebookResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreAuthenticateToSharedNotebookResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreAuthenticateToSharedNotebookResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreAuthenticateToSharedNotebookResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreAuthenticateToSharedNotebookResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreAuthenticateToSharedNotebookResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}

var NoteStoreAuthenticateToSharedNotebookResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreAuthenticateToSharedNotebookResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreAuthenticateToSharedNotebookResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreAuthenticateToSharedNotebookResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreAuthenticateToSharedNotebookResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreAuthenticateToSharedNotebookResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreAuthenticateToSharedNotebookResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreAuthenticateToSharedNotebookResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreAuthenticateToSharedNotebookResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &userstore.AuthenticationResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreAuthenticateToSharedNotebookResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreAuthenticateToSharedNotebookResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreAuthenticateToSharedNotebookResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreAuthenticateToSharedNotebookResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("authenticateToSharedNotebook_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreAuthenticateToSharedNotebookResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreAuthenticateToSharedNotebookResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreAuthenticateToSharedNotebookResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreAuthenticateToSharedNotebookResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreAuthenticateToSharedNotebookResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreAuthenticateToSharedNotebookResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
type NoteStoreGetSharedNotebookByAuthArgs struct {
	AuthenticationToken string `thrift:"authenticationToken,1" json:"authenticationToken"`
}

func NewNoteStoreGetSharedNotebookByAuthArgs() *NoteStoreGetSharedNotebookByAuthArgs {
	return &NoteStoreGetSharedNotebookByAuthArgs{}
}

func (p *NoteStoreGetSharedNotebookByAuthArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}
func (p *NoteStoreGetSharedNotebookByAuthArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetSharedNotebookByAuthArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreGetSharedNotebookByAuthArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSharedNotebookByAuth_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetSharedNotebookByAuthArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreGetSharedNotebookByAuthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetSharedNotebookByAuthArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - NotFoundException
//  - SystemException
type NoteStoreGetSharedNotebookByAuthResult struct {
	Success           *types.SharedNotebook         `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,2" json:"notFoundException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,3" json:"systemException,omitempty"`
}

func NewNoteStoreGetSharedNotebookByAuthResult() *NoteStoreGetSharedNotebookByAuthResult {
	return &NoteStoreGetSharedNotebookByAuthResult{}
}

var NoteStoreGetSharedNotebookByAuthResult_Success_DEFAULT *types.SharedNotebook

func (p *NoteStoreGetSharedNotebookByAuthResult) GetSuccess() *types.SharedNotebook {
	if !p.IsSetSuccess() {
		return NoteStoreGetSharedNotebookByAuthResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreGetSharedNotebookByAuthResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreGetSharedNotebookByAuthResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreGetSharedNotebookByAuthResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreGetSharedNotebookByAuthResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreGetSharedNotebookByAuthResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreGetSharedNotebookByAuthResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}

var NoteStoreGetSharedNotebookByAuthResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreGetSharedNotebookByAuthResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreGetSharedNotebookByAuthResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreGetSharedNotebookByAuthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreGetSharedNotebookByAuthResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreGetSharedNotebookByAuthResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreGetSharedNotebookByAuthResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreGetSharedNotebookByAuthResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreGetSharedNotebookByAuthResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &types.SharedNotebook{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreGetSharedNotebookByAuthResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreGetSharedNotebookByAuthResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreGetSharedNotebookByAuthResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreGetSharedNotebookByAuthResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSharedNotebookByAuth_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreGetSharedNotebookByAuthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetSharedNotebookByAuthResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetSharedNotebookByAuthResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetSharedNotebookByAuthResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreGetSharedNotebookByAuthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreGetSharedNotebookByAuthResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - Parameters
type NoteStoreEmailNoteArgs struct {
	AuthenticationToken string               `thrift:"authenticationToken,1" json:"authenticationToken"`
	Parameters          *NoteEmailParameters `thrift:"parameters,2" json:"parameters"`
}

func NewNoteStoreEmailNoteArgs() *NoteStoreEmailNoteArgs {
	return &NoteStoreEmailNoteArgs{}
}

func (p *NoteStoreEmailNoteArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

var NoteStoreEmailNoteArgs_Parameters_DEFAULT *NoteEmailParameters

func (p *NoteStoreEmailNoteArgs) GetParameters() *NoteEmailParameters {
	if !p.IsSetParameters() {
		return NoteStoreEmailNoteArgs_Parameters_DEFAULT
	}
	return p.Parameters
}
func (p *NoteStoreEmailNoteArgs) IsSetParameters() bool {
	return p.Parameters != nil
}

func (p *NoteStoreEmailNoteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreEmailNoteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreEmailNoteArgs) readField2(iprot thrift.TProtocol) error {
	p.Parameters = &NoteEmailParameters{}
	if err := p.Parameters.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Parameters), err)
	}
	return nil
}

func (p *NoteStoreEmailNoteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("emailNote_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreEmailNoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreEmailNoteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("parameters", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:parameters: ", p), err)
	}
	if err := p.Parameters.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Parameters), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:parameters: ", p), err)
	}
	return err
}

func (p *NoteStoreEmailNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreEmailNoteArgs(%+v)", *p)
}

// Attributes:
//  - UserException
//  - NotFoundException
//  - SystemException
type NoteStoreEmailNoteResult struct {
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,2" json:"notFoundException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,3" json:"systemException,omitempty"`
}

func NewNoteStoreEmailNoteResult() *NoteStoreEmailNoteResult {
	return &NoteStoreEmailNoteResult{}
}

var NoteStoreEmailNoteResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreEmailNoteResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreEmailNoteResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreEmailNoteResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreEmailNoteResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreEmailNoteResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}

var NoteStoreEmailNoteResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreEmailNoteResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreEmailNoteResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreEmailNoteResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreEmailNoteResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreEmailNoteResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreEmailNoteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreEmailNoteResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreEmailNoteResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreEmailNoteResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreEmailNoteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("emailNote_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreEmailNoteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreEmailNoteResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreEmailNoteResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreEmailNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreEmailNoteResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
type NoteStoreShareNoteArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
}

func NewNoteStoreShareNoteArgs() *NoteStoreShareNoteArgs {
	return &NoteStoreShareNoteArgs{}
}

func (p *NoteStoreShareNoteArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreShareNoteArgs) GetGUID() types.GUID {
	return p.GUID
}
func (p *NoteStoreShareNoteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreShareNoteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreShareNoteArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreShareNoteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("shareNote_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreShareNoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreShareNoteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreShareNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreShareNoteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - NotFoundException
//  - SystemException
type NoteStoreShareNoteResult struct {
	Success           *string                       `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,2" json:"notFoundException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,3" json:"systemException,omitempty"`
}

func NewNoteStoreShareNoteResult() *NoteStoreShareNoteResult {
	return &NoteStoreShareNoteResult{}
}

var NoteStoreShareNoteResult_Success_DEFAULT string

func (p *NoteStoreShareNoteResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return NoteStoreShareNoteResult_Success_DEFAULT
	}
	return *p.Success
}

var NoteStoreShareNoteResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreShareNoteResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreShareNoteResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreShareNoteResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreShareNoteResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreShareNoteResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}

var NoteStoreShareNoteResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreShareNoteResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreShareNoteResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreShareNoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreShareNoteResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreShareNoteResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreShareNoteResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreShareNoteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreShareNoteResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *NoteStoreShareNoteResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreShareNoteResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreShareNoteResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreShareNoteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("shareNote_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreShareNoteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreShareNoteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreShareNoteResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreShareNoteResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreShareNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreShareNoteResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - GUID
type NoteStoreStopSharingNoteArgs struct {
	AuthenticationToken string     `thrift:"authenticationToken,1" json:"authenticationToken"`
	GUID                types.GUID `thrift:"guid,2" json:"guid"`
}

func NewNoteStoreStopSharingNoteArgs() *NoteStoreStopSharingNoteArgs {
	return &NoteStoreStopSharingNoteArgs{}
}

func (p *NoteStoreStopSharingNoteArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *NoteStoreStopSharingNoteArgs) GetGUID() types.GUID {
	return p.GUID
}
func (p *NoteStoreStopSharingNoteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreStopSharingNoteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreStopSharingNoteArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := types.GUID(v)
		p.GUID = temp
	}
	return nil
}

func (p *NoteStoreStopSharingNoteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("stopSharingNote_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreStopSharingNoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreStopSharingNoteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreStopSharingNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreStopSharingNoteArgs(%+v)", *p)
}

// Attributes:
//  - UserException
//  - NotFoundException
//  - SystemException
type NoteStoreStopSharingNoteResult struct {
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,2" json:"notFoundException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,3" json:"systemException,omitempty"`
}

func NewNoteStoreStopSharingNoteResult() *NoteStoreStopSharingNoteResult {
	return &NoteStoreStopSharingNoteResult{}
}

var NoteStoreStopSharingNoteResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreStopSharingNoteResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreStopSharingNoteResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreStopSharingNoteResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreStopSharingNoteResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreStopSharingNoteResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}

var NoteStoreStopSharingNoteResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreStopSharingNoteResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreStopSharingNoteResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreStopSharingNoteResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreStopSharingNoteResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreStopSharingNoteResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreStopSharingNoteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreStopSharingNoteResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreStopSharingNoteResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreStopSharingNoteResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreStopSharingNoteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("stopSharingNote_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreStopSharingNoteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreStopSharingNoteResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreStopSharingNoteResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreStopSharingNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreStopSharingNoteResult(%+v)", *p)
}

// Attributes:
//  - GUID
//  - NoteKey
//  - AuthenticationToken
type NoteStoreAuthenticateToSharedNoteArgs struct {
	GUID                string `thrift:"guid,1" json:"guid"`
	NoteKey             string `thrift:"noteKey,2" json:"noteKey"`
	AuthenticationToken string `thrift:"authenticationToken,3" json:"authenticationToken"`
}

func NewNoteStoreAuthenticateToSharedNoteArgs() *NoteStoreAuthenticateToSharedNoteArgs {
	return &NoteStoreAuthenticateToSharedNoteArgs{}
}

func (p *NoteStoreAuthenticateToSharedNoteArgs) GetGUID() string {
	return p.GUID
}

func (p *NoteStoreAuthenticateToSharedNoteArgs) GetNoteKey() string {
	return p.NoteKey
}

func (p *NoteStoreAuthenticateToSharedNoteArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}
func (p *NoteStoreAuthenticateToSharedNoteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreAuthenticateToSharedNoteArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GUID = v
	}
	return nil
}

func (p *NoteStoreAuthenticateToSharedNoteArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NoteKey = v
	}
	return nil
}

func (p *NoteStoreAuthenticateToSharedNoteArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreAuthenticateToSharedNoteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("authenticateToSharedNote_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreAuthenticateToSharedNoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:guid: ", p), err)
	}
	if err := oprot.WriteString(string(p.GUID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:guid: ", p), err)
	}
	return err
}

func (p *NoteStoreAuthenticateToSharedNoteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("noteKey", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:noteKey: ", p), err)
	}
	if err := oprot.WriteString(string(p.NoteKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.noteKey (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:noteKey: ", p), err)
	}
	return err
}

func (p *NoteStoreAuthenticateToSharedNoteArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreAuthenticateToSharedNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreAuthenticateToSharedNoteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - NotFoundException
//  - SystemException
type NoteStoreAuthenticateToSharedNoteResult struct {
	Success           *userstore.AuthenticationResult_ `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException        `thrift:"userException,1" json:"userException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException    `thrift:"notFoundException,2" json:"notFoundException,omitempty"`
	SystemException   *errors.EDAMSystemException      `thrift:"systemException,3" json:"systemException,omitempty"`
}

func NewNoteStoreAuthenticateToSharedNoteResult() *NoteStoreAuthenticateToSharedNoteResult {
	return &NoteStoreAuthenticateToSharedNoteResult{}
}

var NoteStoreAuthenticateToSharedNoteResult_Success_DEFAULT *userstore.AuthenticationResult_

func (p *NoteStoreAuthenticateToSharedNoteResult) GetSuccess() *userstore.AuthenticationResult_ {
	if !p.IsSetSuccess() {
		return NoteStoreAuthenticateToSharedNoteResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreAuthenticateToSharedNoteResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreAuthenticateToSharedNoteResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreAuthenticateToSharedNoteResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreAuthenticateToSharedNoteResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreAuthenticateToSharedNoteResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreAuthenticateToSharedNoteResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}

var NoteStoreAuthenticateToSharedNoteResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreAuthenticateToSharedNoteResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreAuthenticateToSharedNoteResult_SystemException_DEFAULT
	}
	return p.SystemException
}
func (p *NoteStoreAuthenticateToSharedNoteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreAuthenticateToSharedNoteResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreAuthenticateToSharedNoteResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreAuthenticateToSharedNoteResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreAuthenticateToSharedNoteResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreAuthenticateToSharedNoteResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &userstore.AuthenticationResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreAuthenticateToSharedNoteResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreAuthenticateToSharedNoteResult) readField2(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreAuthenticateToSharedNoteResult) readField3(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreAuthenticateToSharedNoteResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("authenticateToSharedNote_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreAuthenticateToSharedNoteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreAuthenticateToSharedNoteResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreAuthenticateToSharedNoteResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreAuthenticateToSharedNoteResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreAuthenticateToSharedNoteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreAuthenticateToSharedNoteResult(%+v)", *p)
}

// Attributes:
//  - AuthenticationToken
//  - Query
//  - ResultSpec
type NoteStoreFindRelatedArgs struct {
	AuthenticationToken string             `thrift:"authenticationToken,1" json:"authenticationToken"`
	Query               *RelatedQuery      `thrift:"query,2" json:"query"`
	ResultSpec          *RelatedResultSpec `thrift:"resultSpec,3" json:"resultSpec"`
}

func NewNoteStoreFindRelatedArgs() *NoteStoreFindRelatedArgs {
	return &NoteStoreFindRelatedArgs{}
}

func (p *NoteStoreFindRelatedArgs) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

var NoteStoreFindRelatedArgs_Query_DEFAULT *RelatedQuery

func (p *NoteStoreFindRelatedArgs) GetQuery() *RelatedQuery {
	if !p.IsSetQuery() {
		return NoteStoreFindRelatedArgs_Query_DEFAULT
	}
	return p.Query
}

var NoteStoreFindRelatedArgs_ResultSpec_DEFAULT *RelatedResultSpec

func (p *NoteStoreFindRelatedArgs) GetResultSpec() *RelatedResultSpec {
	if !p.IsSetResultSpec() {
		return NoteStoreFindRelatedArgs_ResultSpec_DEFAULT
	}
	return p.ResultSpec
}
func (p *NoteStoreFindRelatedArgs) IsSetQuery() bool {
	return p.Query != nil
}

func (p *NoteStoreFindRelatedArgs) IsSetResultSpec() bool {
	return p.ResultSpec != nil
}

func (p *NoteStoreFindRelatedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreFindRelatedArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *NoteStoreFindRelatedArgs) readField2(iprot thrift.TProtocol) error {
	p.Query = &RelatedQuery{}
	if err := p.Query.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Query), err)
	}
	return nil
}

func (p *NoteStoreFindRelatedArgs) readField3(iprot thrift.TProtocol) error {
	p.ResultSpec = &RelatedResultSpec{}
	if err := p.ResultSpec.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ResultSpec), err)
	}
	return nil
}

func (p *NoteStoreFindRelatedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findRelated_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreFindRelatedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authenticationToken: ", p), err)
	}
	return err
}

func (p *NoteStoreFindRelatedArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:query: ", p), err)
	}
	if err := p.Query.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Query), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:query: ", p), err)
	}
	return err
}

func (p *NoteStoreFindRelatedArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resultSpec", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:resultSpec: ", p), err)
	}
	if err := p.ResultSpec.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ResultSpec), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:resultSpec: ", p), err)
	}
	return err
}

func (p *NoteStoreFindRelatedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreFindRelatedArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - NotFoundException
type NoteStoreFindRelatedResult struct {
	Success           *RelatedResult_               `thrift:"success,0" json:"success,omitempty"`
	UserException     *errors.EDAMUserException     `thrift:"userException,1" json:"userException,omitempty"`
	SystemException   *errors.EDAMSystemException   `thrift:"systemException,2" json:"systemException,omitempty"`
	NotFoundException *errors.EDAMNotFoundException `thrift:"notFoundException,3" json:"notFoundException,omitempty"`
}

func NewNoteStoreFindRelatedResult() *NoteStoreFindRelatedResult {
	return &NoteStoreFindRelatedResult{}
}

var NoteStoreFindRelatedResult_Success_DEFAULT *RelatedResult_

func (p *NoteStoreFindRelatedResult) GetSuccess() *RelatedResult_ {
	if !p.IsSetSuccess() {
		return NoteStoreFindRelatedResult_Success_DEFAULT
	}
	return p.Success
}

var NoteStoreFindRelatedResult_UserException_DEFAULT *errors.EDAMUserException

func (p *NoteStoreFindRelatedResult) GetUserException() *errors.EDAMUserException {
	if !p.IsSetUserException() {
		return NoteStoreFindRelatedResult_UserException_DEFAULT
	}
	return p.UserException
}

var NoteStoreFindRelatedResult_SystemException_DEFAULT *errors.EDAMSystemException

func (p *NoteStoreFindRelatedResult) GetSystemException() *errors.EDAMSystemException {
	if !p.IsSetSystemException() {
		return NoteStoreFindRelatedResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var NoteStoreFindRelatedResult_NotFoundException_DEFAULT *errors.EDAMNotFoundException

func (p *NoteStoreFindRelatedResult) GetNotFoundException() *errors.EDAMNotFoundException {
	if !p.IsSetNotFoundException() {
		return NoteStoreFindRelatedResult_NotFoundException_DEFAULT
	}
	return p.NotFoundException
}
func (p *NoteStoreFindRelatedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NoteStoreFindRelatedResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *NoteStoreFindRelatedResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *NoteStoreFindRelatedResult) IsSetNotFoundException() bool {
	return p.NotFoundException != nil
}

func (p *NoteStoreFindRelatedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteStoreFindRelatedResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &RelatedResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *NoteStoreFindRelatedResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &errors.EDAMUserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *NoteStoreFindRelatedResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &errors.EDAMSystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *NoteStoreFindRelatedResult) readField3(iprot thrift.TProtocol) error {
	p.NotFoundException = &errors.EDAMNotFoundException{}
	if err := p.NotFoundException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NotFoundException), err)
	}
	return nil
}

func (p *NoteStoreFindRelatedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("findRelated_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteStoreFindRelatedResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreFindRelatedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("userException", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userException: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreFindRelatedResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("systemException", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemException: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreFindRelatedResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotFoundException() {
		if err := oprot.WriteFieldBegin("notFoundException", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notFoundException: ", p), err)
		}
		if err := p.NotFoundException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NotFoundException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notFoundException: ", p), err)
		}
	}
	return err
}

func (p *NoteStoreFindRelatedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteStoreFindRelatedResult(%+v)", *p)
}
