// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package userstore

import (
	"bytes"
	"fmt"

	"github.com/TcM1911/evernote-sdk-golang/errors"
	"github.com/TcM1911/evernote-sdk-golang/types"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = types.GoUnusedProtection__
var _ = errors.GoUnusedProtection__
var GoUnusedProtection__ int

//  This structure is used to provide publicly-available user information
//  about a particular account.
// <dl>
//  <dt>userId:</dt>
//    <dd>
//    The unique numeric user identifier for the user account.
//    </dd>
//  <dt>shardId:</dt>
//    <dd>
//    DEPRECATED - Client applications should have no need to use this field.
//    </dd>
//  <dt>privilege:</dt>
//    <dd>
//    The privilege level of the account, to determine whether
//    this is a Premium or Free account.
//    </dd>
//  <dt>noteStoreUrl:</dt>
//    <dd>
//    This field will contain the full URL that clients should use to make
//    NoteStore requests to the server shard that contains that user's data.
//    I.e. this is the URL that should be used to create the Thrift HTTP client
//    transport to send messages to the NoteStore service for the account.
//    </dd>
//  <dt>webApiUrlPrefix:</dt>
//    <dd>
//    This field will contain the initial part of the URLs that should be used
//    to make requests to Evernote's thin client "web API", which provide
//    optimized operations for clients that aren't capable of manipulating
//    the full contents of accounts via the full Thrift data model. Clients
//    should concatenate the relative path for the various servlets onto the
//    end of this string to construct the full URL, as documented on our
//    developer web site.
//    </dd>
//  </dl>
//
// Attributes:
//  - UserId
//  - ShardId
//  - Privilege
//  - Username
//  - NoteStoreUrl
//  - WebApiUrlPrefix
type PublicUserInfo struct {
	UserId          types.UserID          `thrift:"userId,1,required" json:"userId"`
	ShardId         string                `thrift:"shardId,2,required" json:"shardId"`
	Privilege       *types.PrivilegeLevel `thrift:"privilege,3" json:"privilege,omitempty"`
	Username        *string               `thrift:"username,4" json:"username,omitempty"`
	NoteStoreUrl    *string               `thrift:"noteStoreUrl,5" json:"noteStoreUrl,omitempty"`
	WebApiUrlPrefix *string               `thrift:"webApiUrlPrefix,6" json:"webApiUrlPrefix,omitempty"`
}

func NewPublicUserInfo() *PublicUserInfo {
	return &PublicUserInfo{}
}

func (p *PublicUserInfo) GetUserId() types.UserID {
	return p.UserId
}

func (p *PublicUserInfo) GetShardId() string {
	return p.ShardId
}

var PublicUserInfo_Privilege_DEFAULT types.PrivilegeLevel

func (p *PublicUserInfo) GetPrivilege() types.PrivilegeLevel {
	if !p.IsSetPrivilege() {
		return PublicUserInfo_Privilege_DEFAULT
	}
	return *p.Privilege
}

var PublicUserInfo_Username_DEFAULT string

func (p *PublicUserInfo) GetUsername() string {
	if !p.IsSetUsername() {
		return PublicUserInfo_Username_DEFAULT
	}
	return *p.Username
}

var PublicUserInfo_NoteStoreUrl_DEFAULT string

func (p *PublicUserInfo) GetNoteStoreUrl() string {
	if !p.IsSetNoteStoreUrl() {
		return PublicUserInfo_NoteStoreUrl_DEFAULT
	}
	return *p.NoteStoreUrl
}

var PublicUserInfo_WebApiUrlPrefix_DEFAULT string

func (p *PublicUserInfo) GetWebApiUrlPrefix() string {
	if !p.IsSetWebApiUrlPrefix() {
		return PublicUserInfo_WebApiUrlPrefix_DEFAULT
	}
	return *p.WebApiUrlPrefix
}
func (p *PublicUserInfo) IsSetPrivilege() bool {
	return p.Privilege != nil
}

func (p *PublicUserInfo) IsSetUsername() bool {
	return p.Username != nil
}

func (p *PublicUserInfo) IsSetNoteStoreUrl() bool {
	return p.NoteStoreUrl != nil
}

func (p *PublicUserInfo) IsSetWebApiUrlPrefix() bool {
	return p.WebApiUrlPrefix != nil
}

func (p *PublicUserInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetUserId bool = false
	var issetShardId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetUserId = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetShardId = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetUserId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserId is not set"))
	}
	if !issetShardId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ShardId is not set"))
	}
	return nil
}

func (p *PublicUserInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := types.UserID(v)
		p.UserId = temp
	}
	return nil
}

func (p *PublicUserInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ShardId = v
	}
	return nil
}

func (p *PublicUserInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := types.PrivilegeLevel(v)
		p.Privilege = &temp
	}
	return nil
}

func (p *PublicUserInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Username = &v
	}
	return nil
}

func (p *PublicUserInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.NoteStoreUrl = &v
	}
	return nil
}

func (p *PublicUserInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.WebApiUrlPrefix = &v
	}
	return nil
}

func (p *PublicUserInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PublicUserInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PublicUserInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UserId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err)
	}
	return err
}

func (p *PublicUserInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("shardId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:shardId: ", p), err)
	}
	if err := oprot.WriteString(string(p.ShardId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.shardId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:shardId: ", p), err)
	}
	return err
}

func (p *PublicUserInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivilege() {
		if err := oprot.WriteFieldBegin("privilege", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:privilege: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Privilege)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.privilege (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:privilege: ", p), err)
		}
	}
	return err
}

func (p *PublicUserInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err := oprot.WriteFieldBegin("username", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:username: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Username)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.username (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:username: ", p), err)
		}
	}
	return err
}

func (p *PublicUserInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoteStoreUrl() {
		if err := oprot.WriteFieldBegin("noteStoreUrl", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:noteStoreUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.NoteStoreUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noteStoreUrl (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:noteStoreUrl: ", p), err)
		}
	}
	return err
}

func (p *PublicUserInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetWebApiUrlPrefix() {
		if err := oprot.WriteFieldBegin("webApiUrlPrefix", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:webApiUrlPrefix: ", p), err)
		}
		if err := oprot.WriteString(string(*p.WebApiUrlPrefix)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.webApiUrlPrefix (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:webApiUrlPrefix: ", p), err)
		}
	}
	return err
}

func (p *PublicUserInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PublicUserInfo(%+v)", *p)
}

//  When an authentication (or re-authentication) is performed, this structure
//  provides the result to the client.
// <dl>
//  <dt>currentTime:</dt>
//    <dd>
//    The server-side date and time when this result was
//    generated.
//    </dd>
//  <dt>authenticationToken:</dt>
//    <dd>
//    Holds an opaque, ASCII-encoded token that can be
//    used by the client to perform actions on a NoteStore.
//    </dd>
//  <dt>expiration:</dt>
//    <dd>
//    Holds the server-side date and time when the
//    authentication token will expire.
//    This time can be compared to "currentTime" to produce an expiration
//    time that can be reconciled with the client's local clock.
//    </dd>
//  <dt>user:</dt>
//    <dd>
//    Holds the information about the account which was
//    authenticated if this was a full authentication.  May be absent if this
//    particular authentication did not require user information.
//    </dd>
//  <dt>publicUserInfo:</dt>
//    <dd>
//    If this authentication result was achieved without full permissions to
//    access the full User structure, this field may be set to give back
//    a more limited public set of data.
//    </dd>
//  <dt>noteStoreUrl:</dt>
//    <dd>
//    This field will contain the full URL that clients should use to make
//    NoteStore requests to the server shard that contains that user's data.
//    I.e. this is the URL that should be used to create the Thrift HTTP client
//    transport to send messages to the NoteStore service for the account.
//    </dd>
//  <dt>webApiUrlPrefix:</dt>
//    <dd>
//    This field will contain the initial part of the URLs that should be used
//    to make requests to Evernote's thin client "web API", which provide
//    optimized operations for clients that aren't capable of manipulating
//    the full contents of accounts via the full Thrift data model. Clients
//    should concatenate the relative path for the various servlets onto the
//    end of this string to construct the full URL, as documented on our
//    developer web site.
//    </dd>
//  <dt>secondFactorRequired:</dt>
//    <dd>
//    If set to true, this field indicates that the user has enabled two-factor
//    authentication and must enter their second factor in order to complete
//    authentication. In this case the value of authenticationResult will be
//    a short-lived authentication token that may only be used to make a
//    subsequent call to completeTwoFactorAuthentication.
//    </dd>
//  <dt>secondFactorDeliveryHint:</dt>
//    <dd>
//    When secondFactorRequired is set to true, this field may contain a string
//    describing the second factor delivery method that the user has configured.
//    This will typically be an obfuscated mobile device number, such as
//    "(xxx) xxx-x095". This string can be displayed to the user to remind them
//    how to obtain the required second factor.
//    TODO do we need to differentiate between SMS and voice delivery?
//    </dd>
//  </dl>
//
// Attributes:
//  - CurrentTime
//  - AuthenticationToken
//  - Expiration
//  - User
//  - PublicUserInfo
//  - NoteStoreUrl
//  - WebApiUrlPrefix
//  - SecondFactorRequired
//  - SecondFactorDeliveryHint
type AuthenticationResult_ struct {
	CurrentTime              types.Timestamp `thrift:"currentTime,1,required" json:"currentTime"`
	AuthenticationToken      string          `thrift:"authenticationToken,2,required" json:"authenticationToken"`
	Expiration               types.Timestamp `thrift:"expiration,3,required" json:"expiration"`
	User                     *types.User     `thrift:"user,4" json:"user,omitempty"`
	PublicUserInfo           *PublicUserInfo `thrift:"publicUserInfo,5" json:"publicUserInfo,omitempty"`
	NoteStoreUrl             *string         `thrift:"noteStoreUrl,6" json:"noteStoreUrl,omitempty"`
	WebApiUrlPrefix          *string         `thrift:"webApiUrlPrefix,7" json:"webApiUrlPrefix,omitempty"`
	SecondFactorRequired     *bool           `thrift:"secondFactorRequired,8" json:"secondFactorRequired,omitempty"`
	SecondFactorDeliveryHint *string         `thrift:"secondFactorDeliveryHint,9" json:"secondFactorDeliveryHint,omitempty"`
}

func NewAuthenticationResult_() *AuthenticationResult_ {
	return &AuthenticationResult_{}
}

func (p *AuthenticationResult_) GetCurrentTime() types.Timestamp {
	return p.CurrentTime
}

func (p *AuthenticationResult_) GetAuthenticationToken() string {
	return p.AuthenticationToken
}

func (p *AuthenticationResult_) GetExpiration() types.Timestamp {
	return p.Expiration
}

var AuthenticationResult__User_DEFAULT *types.User

func (p *AuthenticationResult_) GetUser() *types.User {
	if !p.IsSetUser() {
		return AuthenticationResult__User_DEFAULT
	}
	return p.User
}

var AuthenticationResult__PublicUserInfo_DEFAULT *PublicUserInfo

func (p *AuthenticationResult_) GetPublicUserInfo() *PublicUserInfo {
	if !p.IsSetPublicUserInfo() {
		return AuthenticationResult__PublicUserInfo_DEFAULT
	}
	return p.PublicUserInfo
}

var AuthenticationResult__NoteStoreUrl_DEFAULT string

func (p *AuthenticationResult_) GetNoteStoreUrl() string {
	if !p.IsSetNoteStoreUrl() {
		return AuthenticationResult__NoteStoreUrl_DEFAULT
	}
	return *p.NoteStoreUrl
}

var AuthenticationResult__WebApiUrlPrefix_DEFAULT string

func (p *AuthenticationResult_) GetWebApiUrlPrefix() string {
	if !p.IsSetWebApiUrlPrefix() {
		return AuthenticationResult__WebApiUrlPrefix_DEFAULT
	}
	return *p.WebApiUrlPrefix
}

var AuthenticationResult__SecondFactorRequired_DEFAULT bool

func (p *AuthenticationResult_) GetSecondFactorRequired() bool {
	if !p.IsSetSecondFactorRequired() {
		return AuthenticationResult__SecondFactorRequired_DEFAULT
	}
	return *p.SecondFactorRequired
}

var AuthenticationResult__SecondFactorDeliveryHint_DEFAULT string

func (p *AuthenticationResult_) GetSecondFactorDeliveryHint() string {
	if !p.IsSetSecondFactorDeliveryHint() {
		return AuthenticationResult__SecondFactorDeliveryHint_DEFAULT
	}
	return *p.SecondFactorDeliveryHint
}
func (p *AuthenticationResult_) IsSetUser() bool {
	return p.User != nil
}

func (p *AuthenticationResult_) IsSetPublicUserInfo() bool {
	return p.PublicUserInfo != nil
}

func (p *AuthenticationResult_) IsSetNoteStoreUrl() bool {
	return p.NoteStoreUrl != nil
}

func (p *AuthenticationResult_) IsSetWebApiUrlPrefix() bool {
	return p.WebApiUrlPrefix != nil
}

func (p *AuthenticationResult_) IsSetSecondFactorRequired() bool {
	return p.SecondFactorRequired != nil
}

func (p *AuthenticationResult_) IsSetSecondFactorDeliveryHint() bool {
	return p.SecondFactorDeliveryHint != nil
}

func (p *AuthenticationResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetCurrentTime bool = false
	var issetAuthenticationToken bool = false
	var issetExpiration bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetCurrentTime = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetAuthenticationToken = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetExpiration = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetCurrentTime {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CurrentTime is not set"))
	}
	if !issetAuthenticationToken {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AuthenticationToken is not set"))
	}
	if !issetExpiration {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Expiration is not set"))
	}
	return nil
}

func (p *AuthenticationResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := types.Timestamp(v)
		p.CurrentTime = temp
	}
	return nil
}

func (p *AuthenticationResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AuthenticationToken = v
	}
	return nil
}

func (p *AuthenticationResult_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := types.Timestamp(v)
		p.Expiration = temp
	}
	return nil
}

func (p *AuthenticationResult_) readField4(iprot thrift.TProtocol) error {
	p.User = &types.User{}
	if err := p.User.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.User), err)
	}
	return nil
}

func (p *AuthenticationResult_) readField5(iprot thrift.TProtocol) error {
	p.PublicUserInfo = &PublicUserInfo{}
	if err := p.PublicUserInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PublicUserInfo), err)
	}
	return nil
}

func (p *AuthenticationResult_) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.NoteStoreUrl = &v
	}
	return nil
}

func (p *AuthenticationResult_) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.WebApiUrlPrefix = &v
	}
	return nil
}

func (p *AuthenticationResult_) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.SecondFactorRequired = &v
	}
	return nil
}

func (p *AuthenticationResult_) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.SecondFactorDeliveryHint = &v
	}
	return nil
}

func (p *AuthenticationResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AuthenticationResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AuthenticationResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currentTime", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:currentTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CurrentTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.currentTime (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:currentTime: ", p), err)
	}
	return err
}

func (p *AuthenticationResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authenticationToken", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:authenticationToken: ", p), err)
	}
	if err := oprot.WriteString(string(p.AuthenticationToken)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.authenticationToken (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:authenticationToken: ", p), err)
	}
	return err
}

func (p *AuthenticationResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("expiration", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expiration: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Expiration)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.expiration (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expiration: ", p), err)
	}
	return err
}

func (p *AuthenticationResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUser() {
		if err := oprot.WriteFieldBegin("user", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:user: ", p), err)
		}
		if err := p.User.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.User), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:user: ", p), err)
		}
	}
	return err
}

func (p *AuthenticationResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPublicUserInfo() {
		if err := oprot.WriteFieldBegin("publicUserInfo", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:publicUserInfo: ", p), err)
		}
		if err := p.PublicUserInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PublicUserInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:publicUserInfo: ", p), err)
		}
	}
	return err
}

func (p *AuthenticationResult_) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoteStoreUrl() {
		if err := oprot.WriteFieldBegin("noteStoreUrl", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:noteStoreUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.NoteStoreUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noteStoreUrl (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:noteStoreUrl: ", p), err)
		}
	}
	return err
}

func (p *AuthenticationResult_) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetWebApiUrlPrefix() {
		if err := oprot.WriteFieldBegin("webApiUrlPrefix", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:webApiUrlPrefix: ", p), err)
		}
		if err := oprot.WriteString(string(*p.WebApiUrlPrefix)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.webApiUrlPrefix (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:webApiUrlPrefix: ", p), err)
		}
	}
	return err
}

func (p *AuthenticationResult_) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecondFactorRequired() {
		if err := oprot.WriteFieldBegin("secondFactorRequired", thrift.BOOL, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:secondFactorRequired: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.SecondFactorRequired)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.secondFactorRequired (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:secondFactorRequired: ", p), err)
		}
	}
	return err
}

func (p *AuthenticationResult_) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecondFactorDeliveryHint() {
		if err := oprot.WriteFieldBegin("secondFactorDeliveryHint", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:secondFactorDeliveryHint: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SecondFactorDeliveryHint)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.secondFactorDeliveryHint (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:secondFactorDeliveryHint: ", p), err)
		}
	}
	return err
}

func (p *AuthenticationResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthenticationResult_(%+v)", *p)
}

//  This structure describes a collection of bootstrap settings.
// <dl>
//  <dt>serviceHost:</dt>
//    <dd>
//    The hostname and optional port for composing Evernote web service URLs.
//    This URL can be used to access the UserStore and related services,
//    but must not be used to compose the NoteStore URL. Client applications
//    must handle serviceHost values that include only the hostname
//    (e.g. www.evernote.com) or both the hostname and port (e.g. www.evernote.com:8080).
//    If no port is specified, or if port 443 is specified, client applications must
//    use the scheme "https" when composing URLs. Otherwise, a client must use the
//    scheme "http".
//  </dd>
//  <dt>marketingUrl:</dt>
//    <dd>
//    The URL stem for the Evernote corporate marketing website, e.g. http://www.evernote.com.
//    This stem can be used to compose website URLs. For example, the URL of the Evernote
//    Trunk is composed by appending "/about/trunk/" to the value of marketingUrl.
//    </dd>
//  <dt>supportUrl:</dt>
//    <dd>
//    The full URL for the Evernote customer support website, e.g. https://support.evernote.com.
//    </dd>
//  <dt>accountEmailDomain:</dt>
//    <dd>
//    The domain used for an Evernote user's incoming email address, which allows notes to
//    be emailed into an account. E.g. m.evernote.com.
//    </dd>
//  <dt>enableFacebookSharing:</dt>
//    <dd>
//    Whether the client application should enable sharing of notes on Facebook.
//    </dd>
//  <dt>enableGiftSubscriptions:</dt>
//    <dd>
//    Whether the client application should enable gift subscriptions.
//    </dd>
//  <dt>enableSupportTickets:</dt>
//    <dd>
//    Whether the client application should enable in-client creation of support tickets.
//    </dd>
//  <dt>enableSharedNotebooks:</dt>
//    <dd>
//    Whether the client application should enable shared notebooks.
//    </dd>
//  <dt>enableSingleNoteSharing:</dt>
//    <dd>
//    Whether the client application should enable single note sharing.
//    </dd>
//  <dt>enableSponsoredAccounts:</dt>
//    <dd>
//    Whether the client application should enable sponsored accounts.
//    </dd>
//  <dt>enableTwitterSharing:</dt>
//    <dd>
//    Whether the client application should enable sharing of notes on Twitter.
//    </dd>
//  </dl>
//
// Attributes:
//  - ServiceHost
//  - MarketingUrl
//  - SupportUrl
//  - AccountEmailDomain
//  - EnableFacebookSharing
//  - EnableGiftSubscriptions
//  - EnableSupportTickets
//  - EnableSharedNotebooks
//  - EnableSingleNoteSharing
//  - EnableSponsoredAccounts
//  - EnableTwitterSharing
//  - EnableLinkedInSharing
//  - EnablePublicNotebooks
type BootstrapSettings struct {
	ServiceHost             string `thrift:"serviceHost,1,required" json:"serviceHost"`
	MarketingUrl            string `thrift:"marketingUrl,2,required" json:"marketingUrl"`
	SupportUrl              string `thrift:"supportUrl,3,required" json:"supportUrl"`
	AccountEmailDomain      string `thrift:"accountEmailDomain,4,required" json:"accountEmailDomain"`
	EnableFacebookSharing   *bool  `thrift:"enableFacebookSharing,5" json:"enableFacebookSharing,omitempty"`
	EnableGiftSubscriptions *bool  `thrift:"enableGiftSubscriptions,6" json:"enableGiftSubscriptions,omitempty"`
	EnableSupportTickets    *bool  `thrift:"enableSupportTickets,7" json:"enableSupportTickets,omitempty"`
	EnableSharedNotebooks   *bool  `thrift:"enableSharedNotebooks,8" json:"enableSharedNotebooks,omitempty"`
	EnableSingleNoteSharing *bool  `thrift:"enableSingleNoteSharing,9" json:"enableSingleNoteSharing,omitempty"`
	EnableSponsoredAccounts *bool  `thrift:"enableSponsoredAccounts,10" json:"enableSponsoredAccounts,omitempty"`
	EnableTwitterSharing    *bool  `thrift:"enableTwitterSharing,11" json:"enableTwitterSharing,omitempty"`
	EnableLinkedInSharing   *bool  `thrift:"enableLinkedInSharing,12" json:"enableLinkedInSharing,omitempty"`
	EnablePublicNotebooks   *bool  `thrift:"enablePublicNotebooks,13" json:"enablePublicNotebooks,omitempty"`
}

func NewBootstrapSettings() *BootstrapSettings {
	return &BootstrapSettings{}
}

func (p *BootstrapSettings) GetServiceHost() string {
	return p.ServiceHost
}

func (p *BootstrapSettings) GetMarketingUrl() string {
	return p.MarketingUrl
}

func (p *BootstrapSettings) GetSupportUrl() string {
	return p.SupportUrl
}

func (p *BootstrapSettings) GetAccountEmailDomain() string {
	return p.AccountEmailDomain
}

var BootstrapSettings_EnableFacebookSharing_DEFAULT bool

func (p *BootstrapSettings) GetEnableFacebookSharing() bool {
	if !p.IsSetEnableFacebookSharing() {
		return BootstrapSettings_EnableFacebookSharing_DEFAULT
	}
	return *p.EnableFacebookSharing
}

var BootstrapSettings_EnableGiftSubscriptions_DEFAULT bool

func (p *BootstrapSettings) GetEnableGiftSubscriptions() bool {
	if !p.IsSetEnableGiftSubscriptions() {
		return BootstrapSettings_EnableGiftSubscriptions_DEFAULT
	}
	return *p.EnableGiftSubscriptions
}

var BootstrapSettings_EnableSupportTickets_DEFAULT bool

func (p *BootstrapSettings) GetEnableSupportTickets() bool {
	if !p.IsSetEnableSupportTickets() {
		return BootstrapSettings_EnableSupportTickets_DEFAULT
	}
	return *p.EnableSupportTickets
}

var BootstrapSettings_EnableSharedNotebooks_DEFAULT bool

func (p *BootstrapSettings) GetEnableSharedNotebooks() bool {
	if !p.IsSetEnableSharedNotebooks() {
		return BootstrapSettings_EnableSharedNotebooks_DEFAULT
	}
	return *p.EnableSharedNotebooks
}

var BootstrapSettings_EnableSingleNoteSharing_DEFAULT bool

func (p *BootstrapSettings) GetEnableSingleNoteSharing() bool {
	if !p.IsSetEnableSingleNoteSharing() {
		return BootstrapSettings_EnableSingleNoteSharing_DEFAULT
	}
	return *p.EnableSingleNoteSharing
}

var BootstrapSettings_EnableSponsoredAccounts_DEFAULT bool

func (p *BootstrapSettings) GetEnableSponsoredAccounts() bool {
	if !p.IsSetEnableSponsoredAccounts() {
		return BootstrapSettings_EnableSponsoredAccounts_DEFAULT
	}
	return *p.EnableSponsoredAccounts
}

var BootstrapSettings_EnableTwitterSharing_DEFAULT bool

func (p *BootstrapSettings) GetEnableTwitterSharing() bool {
	if !p.IsSetEnableTwitterSharing() {
		return BootstrapSettings_EnableTwitterSharing_DEFAULT
	}
	return *p.EnableTwitterSharing
}

var BootstrapSettings_EnableLinkedInSharing_DEFAULT bool

func (p *BootstrapSettings) GetEnableLinkedInSharing() bool {
	if !p.IsSetEnableLinkedInSharing() {
		return BootstrapSettings_EnableLinkedInSharing_DEFAULT
	}
	return *p.EnableLinkedInSharing
}

var BootstrapSettings_EnablePublicNotebooks_DEFAULT bool

func (p *BootstrapSettings) GetEnablePublicNotebooks() bool {
	if !p.IsSetEnablePublicNotebooks() {
		return BootstrapSettings_EnablePublicNotebooks_DEFAULT
	}
	return *p.EnablePublicNotebooks
}
func (p *BootstrapSettings) IsSetEnableFacebookSharing() bool {
	return p.EnableFacebookSharing != nil
}

func (p *BootstrapSettings) IsSetEnableGiftSubscriptions() bool {
	return p.EnableGiftSubscriptions != nil
}

func (p *BootstrapSettings) IsSetEnableSupportTickets() bool {
	return p.EnableSupportTickets != nil
}

func (p *BootstrapSettings) IsSetEnableSharedNotebooks() bool {
	return p.EnableSharedNotebooks != nil
}

func (p *BootstrapSettings) IsSetEnableSingleNoteSharing() bool {
	return p.EnableSingleNoteSharing != nil
}

func (p *BootstrapSettings) IsSetEnableSponsoredAccounts() bool {
	return p.EnableSponsoredAccounts != nil
}

func (p *BootstrapSettings) IsSetEnableTwitterSharing() bool {
	return p.EnableTwitterSharing != nil
}

func (p *BootstrapSettings) IsSetEnableLinkedInSharing() bool {
	return p.EnableLinkedInSharing != nil
}

func (p *BootstrapSettings) IsSetEnablePublicNotebooks() bool {
	return p.EnablePublicNotebooks != nil
}

func (p *BootstrapSettings) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetServiceHost bool = false
	var issetMarketingUrl bool = false
	var issetSupportUrl bool = false
	var issetAccountEmailDomain bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetServiceHost = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetMarketingUrl = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetSupportUrl = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetAccountEmailDomain = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetServiceHost {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServiceHost is not set"))
	}
	if !issetMarketingUrl {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MarketingUrl is not set"))
	}
	if !issetSupportUrl {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SupportUrl is not set"))
	}
	if !issetAccountEmailDomain {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AccountEmailDomain is not set"))
	}
	return nil
}

func (p *BootstrapSettings) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ServiceHost = v
	}
	return nil
}

func (p *BootstrapSettings) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MarketingUrl = v
	}
	return nil
}

func (p *BootstrapSettings) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SupportUrl = v
	}
	return nil
}

func (p *BootstrapSettings) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AccountEmailDomain = v
	}
	return nil
}

func (p *BootstrapSettings) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.EnableFacebookSharing = &v
	}
	return nil
}

func (p *BootstrapSettings) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.EnableGiftSubscriptions = &v
	}
	return nil
}

func (p *BootstrapSettings) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.EnableSupportTickets = &v
	}
	return nil
}

func (p *BootstrapSettings) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.EnableSharedNotebooks = &v
	}
	return nil
}

func (p *BootstrapSettings) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.EnableSingleNoteSharing = &v
	}
	return nil
}

func (p *BootstrapSettings) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.EnableSponsoredAccounts = &v
	}
	return nil
}

func (p *BootstrapSettings) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.EnableTwitterSharing = &v
	}
	return nil
}

func (p *BootstrapSettings) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.EnableLinkedInSharing = &v
	}
	return nil
}

func (p *BootstrapSettings) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.EnablePublicNotebooks = &v
	}
	return nil
}

func (p *BootstrapSettings) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BootstrapSettings"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BootstrapSettings) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serviceHost", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serviceHost: ", p), err)
	}
	if err := oprot.WriteString(string(p.ServiceHost)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serviceHost (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serviceHost: ", p), err)
	}
	return err
}

func (p *BootstrapSettings) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("marketingUrl", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:marketingUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.MarketingUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.marketingUrl (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:marketingUrl: ", p), err)
	}
	return err
}

func (p *BootstrapSettings) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("supportUrl", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:supportUrl: ", p), err)
	}
	if err := oprot.WriteString(string(p.SupportUrl)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.supportUrl (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:supportUrl: ", p), err)
	}
	return err
}

func (p *BootstrapSettings) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("accountEmailDomain", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:accountEmailDomain: ", p), err)
	}
	if err := oprot.WriteString(string(p.AccountEmailDomain)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.accountEmailDomain (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:accountEmailDomain: ", p), err)
	}
	return err
}

func (p *BootstrapSettings) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableFacebookSharing() {
		if err := oprot.WriteFieldBegin("enableFacebookSharing", thrift.BOOL, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:enableFacebookSharing: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.EnableFacebookSharing)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.enableFacebookSharing (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:enableFacebookSharing: ", p), err)
		}
	}
	return err
}

func (p *BootstrapSettings) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableGiftSubscriptions() {
		if err := oprot.WriteFieldBegin("enableGiftSubscriptions", thrift.BOOL, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:enableGiftSubscriptions: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.EnableGiftSubscriptions)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.enableGiftSubscriptions (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:enableGiftSubscriptions: ", p), err)
		}
	}
	return err
}

func (p *BootstrapSettings) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableSupportTickets() {
		if err := oprot.WriteFieldBegin("enableSupportTickets", thrift.BOOL, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:enableSupportTickets: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.EnableSupportTickets)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.enableSupportTickets (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:enableSupportTickets: ", p), err)
		}
	}
	return err
}

func (p *BootstrapSettings) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableSharedNotebooks() {
		if err := oprot.WriteFieldBegin("enableSharedNotebooks", thrift.BOOL, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:enableSharedNotebooks: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.EnableSharedNotebooks)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.enableSharedNotebooks (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:enableSharedNotebooks: ", p), err)
		}
	}
	return err
}

func (p *BootstrapSettings) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableSingleNoteSharing() {
		if err := oprot.WriteFieldBegin("enableSingleNoteSharing", thrift.BOOL, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:enableSingleNoteSharing: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.EnableSingleNoteSharing)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.enableSingleNoteSharing (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:enableSingleNoteSharing: ", p), err)
		}
	}
	return err
}

func (p *BootstrapSettings) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableSponsoredAccounts() {
		if err := oprot.WriteFieldBegin("enableSponsoredAccounts", thrift.BOOL, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:enableSponsoredAccounts: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.EnableSponsoredAccounts)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.enableSponsoredAccounts (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:enableSponsoredAccounts: ", p), err)
		}
	}
	return err
}

func (p *BootstrapSettings) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableTwitterSharing() {
		if err := oprot.WriteFieldBegin("enableTwitterSharing", thrift.BOOL, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:enableTwitterSharing: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.EnableTwitterSharing)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.enableTwitterSharing (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:enableTwitterSharing: ", p), err)
		}
	}
	return err
}

func (p *BootstrapSettings) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnableLinkedInSharing() {
		if err := oprot.WriteFieldBegin("enableLinkedInSharing", thrift.BOOL, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:enableLinkedInSharing: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.EnableLinkedInSharing)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.enableLinkedInSharing (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:enableLinkedInSharing: ", p), err)
		}
	}
	return err
}

func (p *BootstrapSettings) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnablePublicNotebooks() {
		if err := oprot.WriteFieldBegin("enablePublicNotebooks", thrift.BOOL, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:enablePublicNotebooks: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.EnablePublicNotebooks)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.enablePublicNotebooks (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:enablePublicNotebooks: ", p), err)
		}
	}
	return err
}

func (p *BootstrapSettings) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BootstrapSettings(%+v)", *p)
}

//  This structure describes a collection of bootstrap settings.
// <dl>
//  <dt>name:</dt>
//    <dd>
//    The unique name of the profile, which is guaranteed to remain consistent across
//    calls to getBootstrapInfo.
//    </dd>
//  <dt>settings:</dt>
//    <dd>
//    The settings for this profile.
//    </dd>
//  </dl>
//
// Attributes:
//  - Name
//  - Settings
type BootstrapProfile struct {
	Name     string             `thrift:"name,1,required" json:"name"`
	Settings *BootstrapSettings `thrift:"settings,2,required" json:"settings"`
}

func NewBootstrapProfile() *BootstrapProfile {
	return &BootstrapProfile{}
}

func (p *BootstrapProfile) GetName() string {
	return p.Name
}

var BootstrapProfile_Settings_DEFAULT *BootstrapSettings

func (p *BootstrapProfile) GetSettings() *BootstrapSettings {
	if !p.IsSetSettings() {
		return BootstrapProfile_Settings_DEFAULT
	}
	return p.Settings
}
func (p *BootstrapProfile) IsSetSettings() bool {
	return p.Settings != nil
}

func (p *BootstrapProfile) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetName bool = false
	var issetSettings bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetName = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetSettings = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	if !issetSettings {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Settings is not set"))
	}
	return nil
}

func (p *BootstrapProfile) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *BootstrapProfile) readField2(iprot thrift.TProtocol) error {
	p.Settings = &BootstrapSettings{}
	if err := p.Settings.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Settings), err)
	}
	return nil
}

func (p *BootstrapProfile) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BootstrapProfile"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BootstrapProfile) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *BootstrapProfile) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("settings", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:settings: ", p), err)
	}
	if err := p.Settings.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Settings), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:settings: ", p), err)
	}
	return err
}

func (p *BootstrapProfile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BootstrapProfile(%+v)", *p)
}

//  This structure describes a collection of bootstrap profiles.
// <dl>
//  <dt>profiles:</dt>
//    <dd>
//    List of one or more bootstrap profiles, in descending
//    preference order.
//    </dd>
//  </dl>
//
// Attributes:
//  - Profiles
type BootstrapInfo struct {
	Profiles []*BootstrapProfile `thrift:"profiles,1,required" json:"profiles"`
}

func NewBootstrapInfo() *BootstrapInfo {
	return &BootstrapInfo{}
}

func (p *BootstrapInfo) GetProfiles() []*BootstrapProfile {
	return p.Profiles
}
func (p *BootstrapInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetProfiles bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetProfiles = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetProfiles {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Profiles is not set"))
	}
	return nil
}

func (p *BootstrapInfo) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*BootstrapProfile, 0, size)
	p.Profiles = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &BootstrapProfile{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Profiles = append(p.Profiles, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BootstrapInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BootstrapInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BootstrapInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("profiles", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:profiles: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Profiles)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Profiles {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:profiles: ", p), err)
	}
	return err
}

func (p *BootstrapInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BootstrapInfo(%+v)", *p)
}
