// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package types

import (
	"bytes"
	"fmt"

	"github.com/TcM1911/evernote-sdk-golang/limits"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = limits.GoUnusedProtection__
var GoUnusedProtection__ int

//This enumeration defines the possible permission levels for a user.
//Free accounts will have a level of NORMAL and paid Premium accounts
//will have a level of PREMIUM.
type PrivilegeLevel int64

const (
	PrivilegeLevel_NORMAL  PrivilegeLevel = 1
	PrivilegeLevel_PREMIUM PrivilegeLevel = 3
	PrivilegeLevel_VIP     PrivilegeLevel = 5
	PrivilegeLevel_MANAGER PrivilegeLevel = 7
	PrivilegeLevel_SUPPORT PrivilegeLevel = 8
	PrivilegeLevel_ADMIN   PrivilegeLevel = 9
)

func (p PrivilegeLevel) String() string {
	switch p {
	case PrivilegeLevel_NORMAL:
		return "NORMAL"
	case PrivilegeLevel_PREMIUM:
		return "PREMIUM"
	case PrivilegeLevel_VIP:
		return "VIP"
	case PrivilegeLevel_MANAGER:
		return "MANAGER"
	case PrivilegeLevel_SUPPORT:
		return "SUPPORT"
	case PrivilegeLevel_ADMIN:
		return "ADMIN"
	}
	return "<UNSET>"
}

func PrivilegeLevelFromString(s string) (PrivilegeLevel, error) {
	switch s {
	case "NORMAL":
		return PrivilegeLevel_NORMAL, nil
	case "PREMIUM":
		return PrivilegeLevel_PREMIUM, nil
	case "VIP":
		return PrivilegeLevel_VIP, nil
	case "MANAGER":
		return PrivilegeLevel_MANAGER, nil
	case "SUPPORT":
		return PrivilegeLevel_SUPPORT, nil
	case "ADMIN":
		return PrivilegeLevel_ADMIN, nil
	}
	return PrivilegeLevel(0), fmt.Errorf("not a valid PrivilegeLevel string")
}

func PrivilegeLevelPtr(v PrivilegeLevel) *PrivilegeLevel { return &v }

func (p PrivilegeLevel) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *PrivilegeLevel) UnmarshalText(text []byte) error {
	q, err := PrivilegeLevelFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

//Every search query is specified as a sequence of characters.
//Currently, only the USER query format is supported.
type QueryFormat int64

const (
	QueryFormat_USER QueryFormat = 1
	QueryFormat_SEXP QueryFormat = 2
)

func (p QueryFormat) String() string {
	switch p {
	case QueryFormat_USER:
		return "USER"
	case QueryFormat_SEXP:
		return "SEXP"
	}
	return "<UNSET>"
}

func QueryFormatFromString(s string) (QueryFormat, error) {
	switch s {
	case "USER":
		return QueryFormat_USER, nil
	case "SEXP":
		return QueryFormat_SEXP, nil
	}
	return QueryFormat(0), fmt.Errorf("not a valid QueryFormat string")
}

func QueryFormatPtr(v QueryFormat) *QueryFormat { return &v }

func (p QueryFormat) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *QueryFormat) UnmarshalText(text []byte) error {
	q, err := QueryFormatFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

//This enumeration defines the possible sort ordering for notes when
//they are returned from a search result.
type NoteSortOrder int64

const (
	NoteSortOrder_CREATED                NoteSortOrder = 1
	NoteSortOrder_UPDATED                NoteSortOrder = 2
	NoteSortOrder_RELEVANCE              NoteSortOrder = 3
	NoteSortOrder_UPDATE_SEQUENCE_NUMBER NoteSortOrder = 4
	NoteSortOrder_TITLE                  NoteSortOrder = 5
)

func (p NoteSortOrder) String() string {
	switch p {
	case NoteSortOrder_CREATED:
		return "CREATED"
	case NoteSortOrder_UPDATED:
		return "UPDATED"
	case NoteSortOrder_RELEVANCE:
		return "RELEVANCE"
	case NoteSortOrder_UPDATE_SEQUENCE_NUMBER:
		return "UPDATE_SEQUENCE_NUMBER"
	case NoteSortOrder_TITLE:
		return "TITLE"
	}
	return "<UNSET>"
}

func NoteSortOrderFromString(s string) (NoteSortOrder, error) {
	switch s {
	case "CREATED":
		return NoteSortOrder_CREATED, nil
	case "UPDATED":
		return NoteSortOrder_UPDATED, nil
	case "RELEVANCE":
		return NoteSortOrder_RELEVANCE, nil
	case "UPDATE_SEQUENCE_NUMBER":
		return NoteSortOrder_UPDATE_SEQUENCE_NUMBER, nil
	case "TITLE":
		return NoteSortOrder_TITLE, nil
	}
	return NoteSortOrder(0), fmt.Errorf("not a valid NoteSortOrder string")
}

func NoteSortOrderPtr(v NoteSortOrder) *NoteSortOrder { return &v }

func (p NoteSortOrder) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *NoteSortOrder) UnmarshalText(text []byte) error {
	q, err := NoteSortOrderFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

//This enumeration defines the possible states of a premium account
//
//NONE:    the user has never attempted to become a premium subscriber
//
//PENDING: the user has requested a premium account but their charge has not
//  been confirmed
//
//ACTIVE:  the user has been charged and their premium account is in good
// standing
//
//FAILED:  the system attempted to charge the was denied. Their premium
//  privileges have been revoked. We will periodically attempt to re-validate
//  their order.
//
//CANCELLATION_PENDING: the user has requested that no further charges be made
//  but the current account is still active.
//
//CANCELED: the premium account was canceled either because of failure to pay
//  or user cancelation. No more attempts will be made to activate the account.
type PremiumOrderStatus int64

const (
	PremiumOrderStatus_NONE                 PremiumOrderStatus = 0
	PremiumOrderStatus_PENDING              PremiumOrderStatus = 1
	PremiumOrderStatus_ACTIVE               PremiumOrderStatus = 2
	PremiumOrderStatus_FAILED               PremiumOrderStatus = 3
	PremiumOrderStatus_CANCELLATION_PENDING PremiumOrderStatus = 4
	PremiumOrderStatus_CANCELED             PremiumOrderStatus = 5
)

func (p PremiumOrderStatus) String() string {
	switch p {
	case PremiumOrderStatus_NONE:
		return "NONE"
	case PremiumOrderStatus_PENDING:
		return "PENDING"
	case PremiumOrderStatus_ACTIVE:
		return "ACTIVE"
	case PremiumOrderStatus_FAILED:
		return "FAILED"
	case PremiumOrderStatus_CANCELLATION_PENDING:
		return "CANCELLATION_PENDING"
	case PremiumOrderStatus_CANCELED:
		return "CANCELED"
	}
	return "<UNSET>"
}

func PremiumOrderStatusFromString(s string) (PremiumOrderStatus, error) {
	switch s {
	case "NONE":
		return PremiumOrderStatus_NONE, nil
	case "PENDING":
		return PremiumOrderStatus_PENDING, nil
	case "ACTIVE":
		return PremiumOrderStatus_ACTIVE, nil
	case "FAILED":
		return PremiumOrderStatus_FAILED, nil
	case "CANCELLATION_PENDING":
		return PremiumOrderStatus_CANCELLATION_PENDING, nil
	case "CANCELED":
		return PremiumOrderStatus_CANCELED, nil
	}
	return PremiumOrderStatus(0), fmt.Errorf("not a valid PremiumOrderStatus string")
}

func PremiumOrderStatusPtr(v PremiumOrderStatus) *PremiumOrderStatus { return &v }

func (p PremiumOrderStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *PremiumOrderStatus) UnmarshalText(text []byte) error {
	q, err := PremiumOrderStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

//Privilege levels for accessing shared notebooks.
//
//READ_NOTEBOOK: Recipient is able to read the contents of the shared notebook
//  but does to have access to information about other recipients of the
//  notebook or the activity stream information.
//
//MODIFY_NOTEBOOK_PLUS_ACTIVITY: Recipient has rights to read and modify the contents
//  of the shared notebook, including the right to move notes to the trash and to create
//  notes in the notebook.  The recipient can also access information about other
//  recipients and the activity stream.
//
//READ_NOTEBOOK_PLUS_ACTIVITY: Recipient has READ_NOTEBOOK rights and can also
//  access information about other recipients and the activity stream.
//
//GROUP: If the user belongs to a group, such as a Business, that has a defined
//  privilege level, use the privilege level of the group as the privilege for
//  the individual.
//
//FULL_ACCESS: Recipient has full rights to the shared notebook and recipient lists,
//  including privilege to revoke and create invitations and to change privilege
//  levels on invitations for individuals.  This privilege level is primarily intended
//  for use by individual shares.
//
//BUSINESS_FULL_ACCESS: Intended for use with Business Notebooks, a
//BUSINESS_FULL_ACCESS level is FULL_ACCESS with the additional rights to
//change how the notebook will appear in the business library, including the
//rights to publish and unpublish the notebook from the library.
type SharedNotebookPrivilegeLevel int64

const (
	SharedNotebookPrivilegeLevel_READ_NOTEBOOK                 SharedNotebookPrivilegeLevel = 0
	SharedNotebookPrivilegeLevel_MODIFY_NOTEBOOK_PLUS_ACTIVITY SharedNotebookPrivilegeLevel = 1
	SharedNotebookPrivilegeLevel_READ_NOTEBOOK_PLUS_ACTIVITY   SharedNotebookPrivilegeLevel = 2
	SharedNotebookPrivilegeLevel_GROUP                         SharedNotebookPrivilegeLevel = 3
	SharedNotebookPrivilegeLevel_FULL_ACCESS                   SharedNotebookPrivilegeLevel = 4
	SharedNotebookPrivilegeLevel_BUSINESS_FULL_ACCESS          SharedNotebookPrivilegeLevel = 5
)

func (p SharedNotebookPrivilegeLevel) String() string {
	switch p {
	case SharedNotebookPrivilegeLevel_READ_NOTEBOOK:
		return "READ_NOTEBOOK"
	case SharedNotebookPrivilegeLevel_MODIFY_NOTEBOOK_PLUS_ACTIVITY:
		return "MODIFY_NOTEBOOK_PLUS_ACTIVITY"
	case SharedNotebookPrivilegeLevel_READ_NOTEBOOK_PLUS_ACTIVITY:
		return "READ_NOTEBOOK_PLUS_ACTIVITY"
	case SharedNotebookPrivilegeLevel_GROUP:
		return "GROUP"
	case SharedNotebookPrivilegeLevel_FULL_ACCESS:
		return "FULL_ACCESS"
	case SharedNotebookPrivilegeLevel_BUSINESS_FULL_ACCESS:
		return "BUSINESS_FULL_ACCESS"
	}
	return "<UNSET>"
}

func SharedNotebookPrivilegeLevelFromString(s string) (SharedNotebookPrivilegeLevel, error) {
	switch s {
	case "READ_NOTEBOOK":
		return SharedNotebookPrivilegeLevel_READ_NOTEBOOK, nil
	case "MODIFY_NOTEBOOK_PLUS_ACTIVITY":
		return SharedNotebookPrivilegeLevel_MODIFY_NOTEBOOK_PLUS_ACTIVITY, nil
	case "READ_NOTEBOOK_PLUS_ACTIVITY":
		return SharedNotebookPrivilegeLevel_READ_NOTEBOOK_PLUS_ACTIVITY, nil
	case "GROUP":
		return SharedNotebookPrivilegeLevel_GROUP, nil
	case "FULL_ACCESS":
		return SharedNotebookPrivilegeLevel_FULL_ACCESS, nil
	case "BUSINESS_FULL_ACCESS":
		return SharedNotebookPrivilegeLevel_BUSINESS_FULL_ACCESS, nil
	}
	return SharedNotebookPrivilegeLevel(0), fmt.Errorf("not a valid SharedNotebookPrivilegeLevel string")
}

func SharedNotebookPrivilegeLevelPtr(v SharedNotebookPrivilegeLevel) *SharedNotebookPrivilegeLevel {
	return &v
}

func (p SharedNotebookPrivilegeLevel) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SharedNotebookPrivilegeLevel) UnmarshalText(text []byte) error {
	q, err := SharedNotebookPrivilegeLevelFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

//Enumeration of the roles that a User can have within a sponsored group.
//
//GROUP_MEMBER: The user is a member of the group with no special privileges.
//
//GROUP_ADMIN: The user is an administrator within the group.
//
//GROUP_OWNER: The user is the owner of the group.
type SponsoredGroupRole int64

const (
	SponsoredGroupRole_GROUP_MEMBER SponsoredGroupRole = 1
	SponsoredGroupRole_GROUP_ADMIN  SponsoredGroupRole = 2
	SponsoredGroupRole_GROUP_OWNER  SponsoredGroupRole = 3
)

func (p SponsoredGroupRole) String() string {
	switch p {
	case SponsoredGroupRole_GROUP_MEMBER:
		return "GROUP_MEMBER"
	case SponsoredGroupRole_GROUP_ADMIN:
		return "GROUP_ADMIN"
	case SponsoredGroupRole_GROUP_OWNER:
		return "GROUP_OWNER"
	}
	return "<UNSET>"
}

func SponsoredGroupRoleFromString(s string) (SponsoredGroupRole, error) {
	switch s {
	case "GROUP_MEMBER":
		return SponsoredGroupRole_GROUP_MEMBER, nil
	case "GROUP_ADMIN":
		return SponsoredGroupRole_GROUP_ADMIN, nil
	case "GROUP_OWNER":
		return SponsoredGroupRole_GROUP_OWNER, nil
	}
	return SponsoredGroupRole(0), fmt.Errorf("not a valid SponsoredGroupRole string")
}

func SponsoredGroupRolePtr(v SponsoredGroupRole) *SponsoredGroupRole { return &v }

func (p SponsoredGroupRole) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SponsoredGroupRole) UnmarshalText(text []byte) error {
	q, err := SponsoredGroupRoleFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

//Enumeration of the roles that a User can have within an Evernote Business account.
//
//ADMIN: The user is an administrator of the Evernote Business account.
//
//NORMAL: The user is a regular user within the Evernote Business account.
type BusinessUserRole int64

const (
	BusinessUserRole_ADMIN  BusinessUserRole = 1
	BusinessUserRole_NORMAL BusinessUserRole = 2
)

func (p BusinessUserRole) String() string {
	switch p {
	case BusinessUserRole_ADMIN:
		return "ADMIN"
	case BusinessUserRole_NORMAL:
		return "NORMAL"
	}
	return "<UNSET>"
}

func BusinessUserRoleFromString(s string) (BusinessUserRole, error) {
	switch s {
	case "ADMIN":
		return BusinessUserRole_ADMIN, nil
	case "NORMAL":
		return BusinessUserRole_NORMAL, nil
	}
	return BusinessUserRole(0), fmt.Errorf("not a valid BusinessUserRole string")
}

func BusinessUserRolePtr(v BusinessUserRole) *BusinessUserRole { return &v }

func (p BusinessUserRole) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *BusinessUserRole) UnmarshalText(text []byte) error {
	q, err := BusinessUserRoleFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

//An enumeration describing restrictions on the domain of shared notebook
//instances that are valid for a given operation, as used, for example, in
//NotebookRestrictions.
//
//ONLY_JOINED_OR_PREVIEW: The domain consists of shared notebooks that
//  "belong" to the recipient or still available for preview by any recipient.
//  Shared notebooks that the recipient has joined (the username has already been
//  assigned to our user) are in the domain.  Additionally, shared notebooks
//  that allow preview and have not yet been joined are in the domain.
//
//NO_SHARED_NOTEBOOKS: No shared notebooks are applicable to the operation.
type SharedNotebookInstanceRestrictions int64

const (
	SharedNotebookInstanceRestrictions_ONLY_JOINED_OR_PREVIEW SharedNotebookInstanceRestrictions = 1
	SharedNotebookInstanceRestrictions_NO_SHARED_NOTEBOOKS    SharedNotebookInstanceRestrictions = 2
)

func (p SharedNotebookInstanceRestrictions) String() string {
	switch p {
	case SharedNotebookInstanceRestrictions_ONLY_JOINED_OR_PREVIEW:
		return "ONLY_JOINED_OR_PREVIEW"
	case SharedNotebookInstanceRestrictions_NO_SHARED_NOTEBOOKS:
		return "NO_SHARED_NOTEBOOKS"
	}
	return "<UNSET>"
}

func SharedNotebookInstanceRestrictionsFromString(s string) (SharedNotebookInstanceRestrictions, error) {
	switch s {
	case "ONLY_JOINED_OR_PREVIEW":
		return SharedNotebookInstanceRestrictions_ONLY_JOINED_OR_PREVIEW, nil
	case "NO_SHARED_NOTEBOOKS":
		return SharedNotebookInstanceRestrictions_NO_SHARED_NOTEBOOKS, nil
	}
	return SharedNotebookInstanceRestrictions(0), fmt.Errorf("not a valid SharedNotebookInstanceRestrictions string")
}

func SharedNotebookInstanceRestrictionsPtr(v SharedNotebookInstanceRestrictions) *SharedNotebookInstanceRestrictions {
	return &v
}

func (p SharedNotebookInstanceRestrictions) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SharedNotebookInstanceRestrictions) UnmarshalText(text []byte) error {
	q, err := SharedNotebookInstanceRestrictionsFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

//An enumeration describing the configuration state related to receiving
//reminder e-mails from the service.  Reminder e-mails summarize notes
//based on their Note.attributes.reminderTime values.
//
//DO_NOT_SEND: The user has selected to not receive reminder e-mail.
//
//SEND_DAILY_EMAIL: The user has selected to receive reminder e-mail for those
//  days when there is a reminder.
type ReminderEmailConfig int64

const (
	ReminderEmailConfig_DO_NOT_SEND      ReminderEmailConfig = 1
	ReminderEmailConfig_SEND_DAILY_EMAIL ReminderEmailConfig = 2
)

func (p ReminderEmailConfig) String() string {
	switch p {
	case ReminderEmailConfig_DO_NOT_SEND:
		return "DO_NOT_SEND"
	case ReminderEmailConfig_SEND_DAILY_EMAIL:
		return "SEND_DAILY_EMAIL"
	}
	return "<UNSET>"
}

func ReminderEmailConfigFromString(s string) (ReminderEmailConfig, error) {
	switch s {
	case "DO_NOT_SEND":
		return ReminderEmailConfig_DO_NOT_SEND, nil
	case "SEND_DAILY_EMAIL":
		return ReminderEmailConfig_SEND_DAILY_EMAIL, nil
	}
	return ReminderEmailConfig(0), fmt.Errorf("not a valid ReminderEmailConfig string")
}

func ReminderEmailConfigPtr(v ReminderEmailConfig) *ReminderEmailConfig { return &v }

func (p ReminderEmailConfig) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ReminderEmailConfig) UnmarshalText(text []byte) error {
	q, err := ReminderEmailConfigFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

//Every Evernote account is assigned a unique numeric identifier which
//will not change for the life of the account.  This is independent of
//the (string-based) "username" which is known by the user for login
//purposes.  The user should have no reason to know their UserID.
type UserID int32

func UserIDPtr(v UserID) *UserID { return &v }

//Most data elements within a user's account (e.g. notebooks, notes, tags,
//resources, etc.) are internally referred to using a globally unique
//identifier that is written in a standard string format.  For example:
//
//   "8743428c-ef91-4d05-9e7c-4a2e856e813a"
//
//The internal components of the GUID are not given any particular meaning:
//only the entire string is relevant as a unique identifier.
type GUID string

func GUIDPtr(v GUID) *GUID { return &v }

//An Evernote Timestamp is the date and time of an event in UTC time.
//This is expressed as a specific number of milliseconds since the
//standard base "epoch" of:
//
//   January 1, 1970, 00:00:00 GMT
//
//NOTE:  the time is expressed at the resolution of milliseconds, but
//the value is only precise to the level of seconds.   This means that
//the last three (decimal) digits of the timestamp will be '000'.
//
//The Thrift IDL specification does not include a native date/time type,
//so this value is used instead.
//
//The service will accept timestamp values (e.g. for Note created and update
//times) between 1000-01-01 and 9999-12-31
type Timestamp int64

func TimestampPtr(v Timestamp) *Timestamp { return &v }

//  In several places, EDAM exchanges blocks of bytes of data for a component
//  which may be relatively large.  For example:  the contents of a clipped
//  HTML note, the bytes of an embedded image, or the recognition XML for
//  a large image.  This structure is used in the protocol to represent
//  any of those large blocks of data when they are transmitted or when
//  they are only referenced their metadata.
//
// <dl>
//  <dt>bodyHash</dt>
//    <dd>This field carries a one-way hash of the contents of the
//    data body, in binary form.  The hash function is MD5<br/>
//    Length:  EDAM_HASH_LEN (exactly)
//    </dd>
//
//  <dt>size</dt>
//    <dd>The length, in bytes, of the data body.
//    </dd>
//
//  <dt>body</dt>
//    <dd>This field is set to contain the binary contents of the data
//    whenever the resource is being transferred.  If only metadata is
//    being exchanged, this field will be empty.  For example, a client could
//    notify the service about the change to an attribute for a resource
//    without transmitting the binary resource contents.
//    </dd>
//  </dl>
//
// Attributes:
//  - BodyHash
//  - Size
//  - Body
type Data struct {
	BodyHash []byte `thrift:"bodyHash,1" json:"bodyHash,omitempty"`
	Size     *int32 `thrift:"size,2" json:"size,omitempty"`
	Body     []byte `thrift:"body,3" json:"body,omitempty"`
}

func NewData() *Data {
	return &Data{}
}

var Data_BodyHash_DEFAULT []byte

func (p *Data) GetBodyHash() []byte {
	return p.BodyHash
}

var Data_Size_DEFAULT int32

func (p *Data) GetSize() int32 {
	if !p.IsSetSize() {
		return Data_Size_DEFAULT
	}
	return *p.Size
}

var Data_Body_DEFAULT []byte

func (p *Data) GetBody() []byte {
	return p.Body
}
func (p *Data) IsSetBodyHash() bool {
	return p.BodyHash != nil
}

func (p *Data) IsSetSize() bool {
	return p.Size != nil
}

func (p *Data) IsSetBody() bool {
	return p.Body != nil
}

func (p *Data) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Data) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.BodyHash = v
	}
	return nil
}

func (p *Data) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Size = &v
	}
	return nil
}

func (p *Data) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Body = v
	}
	return nil
}

func (p *Data) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Data"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Data) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBodyHash() {
		if err := oprot.WriteFieldBegin("bodyHash", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:bodyHash: ", p), err)
		}
		if err := oprot.WriteBinary(p.BodyHash); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bodyHash (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:bodyHash: ", p), err)
		}
	}
	return err
}

func (p *Data) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSize() {
		if err := oprot.WriteFieldBegin("size", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:size: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Size)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.size (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:size: ", p), err)
		}
	}
	return err
}

func (p *Data) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBody() {
		if err := oprot.WriteFieldBegin("body", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:body: ", p), err)
		}
		if err := oprot.WriteBinary(p.Body); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.body (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:body: ", p), err)
		}
	}
	return err
}

func (p *Data) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Data(%+v)", *p)
}

//  A structure holding the optional attributes that can be stored
//  on a User.  These are generally less critical than the core User fields.
//
// <dl>
//  <dt>defaultLocationName</dt>
//    <dd>the location string that should be associated
//    with the user in order to determine where notes are taken if not otherwise
//    specified.<br/>
//    Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
//    </dd>
//
//  <dt>defaultLatitude</dt>
//    <dd>if set, this is the latitude that should be
//    assigned to any notes that have no other latitude information.
//    </dd>
//
//  <dt>defaultLongitude</dt>
//    <dd>if set, this is the longitude that should be
//    assigned to any notes that have no other longitude information.
//    </dd>
//
//  <dt>preactivation</dt>
//    <dd>if set, the user account is not yet confirmed for
//    login.  I.e. the account has been created, but we are still waiting for
//    the user to complete the activation step.
//    </dd>
//
//  <dt>viewedPromotions</dt>
//    <dd>a list of promotions the user has seen.
//     This list may occasionally be modified by the system when promotions are
//     no longer available.<br/>
//     Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
//    </dd>
//
//  <dt>incomingEmailAddress</dt>
//    <dd>if set, this is the email address that the
//     user may send email to in order to add an email note directly into the
//     account via the SMTP email gateway.  This is the part of the email
//     address before the '@' symbol ... our domain is not included.
//     If this is not set, the user may not add notes via the gateway.<br/>
//     Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
//    </dd>
//
//  <dt>recentMailedAddresses</dt>
//    <dd>if set, this will contain a list of email
//     addresses that have recently been used as recipients
//     of outbound emails by the user.  This can be used to pre-populate a
//     list of possible destinations when a user wishes to send a note via
//     email.<br/>
//     Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX each<br/>
//     Max:  EDAM_USER_RECENT_MAILED_ADDRESSES_MAX entries
//    </dd>
//
//  <dt>comments</dt>
//    <dd>Free-form text field that may hold general support
//     information, etc.<br/>
//     Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
//    </dd>
//
//  <dt>dateAgreedToTermsOfService</dt>
//    <dd>The date/time when the user agreed to
//     the terms of service.  This can be used as the effective "start date"
//     for the account.
//    </dd>
//
//  <dt>maxReferrals</dt>
//    <dd>The number of referrals that the user is permitted
//     to make.
//    </dd>
//
//  <dt>referralCount</dt>
//    <dd>The number of referrals sent from this account.
//    </dd>
//
//  <dt>refererCode</dt>
//    <dd>A code indicating where the user was sent from. AKA
//     promotion code
//    </dd>
//
//  <dt>sentEmailDate</dt>
//    <dd>The most recent date when the user sent outbound
//     emails from the service.  Used with sentEmailCount to limit the number
//     of emails that can be sent per day.
//    </dd>
//
//  <dt>sentEmailCount</dt>
//    <dd>The number of emails that were sent from the user
//     via the service on sentEmailDate.  Used to enforce a limit on the number
//     of emails per user per day to prevent spamming.
//    </dd>
//
//  <dt>dailyEmailLimit</dt>
//    <dd>If set, this is the maximum number of emails that
//     may be sent in a given day from this account.  If unset, the server will
//     use the configured default limit.
//    </dd>
//
//  <dt>emailOptOutDate</dt>
//    <dd>If set, this is the date when the user asked
//     to be excluded from offers and promotions sent by Evernote.  If not set,
//     then the user currently agrees to receive these messages.
//    </dd>
//
//  <dt>partnerEmailOptInDate</dt>
//    <dd>If set, this is the date when the user asked
//     to be included in offers and promotions sent by Evernote's partners.
//     If not sent, then the user currently does not agree to receive these
//     emails.
//    </dd>
//
//  <dt>preferredLanguage</dt>
//    <dd>a 2 character language codes based on:
//        http://ftp.ics.uci.edu/pub/ietf/http/related/iso639.txt used for
//       localization purposes to determine what language to use for the web
//       interface and for other direct communication (e.g. emails).
//    </dd>
//
//  <dt>preferredCountry</dt>
//    <dd>Preferred country code based on ISO 3166-1-alpha-2 indicating the
//    users preferred country</dd>
//
//  <dt>clipFullPage</dt>
//    <dd>Boolean flag set to true if the user wants to clip full pages by
//    default when they use the web clipper without a selection.</dd>
//
//  <dt>twitterUserName</dt>
//    <dd>The username of the account of someone who has chosen to enable
//    Twittering into Evernote.  This value is subject to change, since users
//    may change their Twitter user name.</dd>
//
//  <dt>twitterId</dt>
//    <dd>The unique identifier of the user's Twitter account if that user
//    has chosen to enable Twittering into Evernote.</dd>
//
//  <dt>groupName</dt>
//    <dd>A name identifier used to identify a particular set of branding and
//     light customization.</dd>
//
//  <dt>recognitionLanguage</dt>
//    <dd>a 2 character language codes based on:
//        http://ftp.ics.uci.edu/pub/ietf/http/related/iso639.txt
//        If set, this is used to determine the language that should be used
//        when processing images and PDF files to find text.
//        If not set, then the 'preferredLanguage' will be used.
//    </dd>
//
//  <dt>educationalInstitution</dt>
//    <dd>a flag indicating that the user is part of an educational institution which
//    makes them eligible for discounts on bulk purchases
//    </dd>
//
//  <dt>businessAddress</dt>
//    <dd>A string recording the business address of a Sponsored Account user who has requested invoicing.
//    </dd>
//
//  <dt>hideSponsorBilling</dt>
//    <dd>A flag indicating whether to hide the billing information on a sponsored
//        account owner's settings page
//    </dd>
//
//  <dt>taxExempt</dt>
//    <dd>A flag indicating the user's sponsored group is exempt from sale tax
//    </dd>
//
//  <dt>useEmailAutoFiling</dt>
//    <dd>A flag indicating whether the user chooses to allow Evernote to automatically
//        file and tag emailed notes
//    </dd>
//
//  <dt>reminderEmailConfig</dt>
//    <dd>Configuration state for whether or not the user wishes to receive
//        reminder e-mail.  This setting applies to both the reminder e-mail sent
//        for personal reminder notes and for the reminder e-mail sent for reminder
//        notes in the user's business notebooks that the user has configured for
//        e-mail notifications.
//    </dd>
//  </dl>
//
// Attributes:
//  - DefaultLocationName
//  - DefaultLatitude
//  - DefaultLongitude
//  - Preactivation
//  - ViewedPromotions
//  - IncomingEmailAddress
//  - RecentMailedAddresses
//  - Comments
//  - DateAgreedToTermsOfService
//  - MaxReferrals
//  - ReferralCount
//  - RefererCode
//  - SentEmailDate
//  - SentEmailCount
//  - DailyEmailLimit
//  - EmailOptOutDate
//  - PartnerEmailOptInDate
//  - PreferredLanguage
//  - PreferredCountry
//  - ClipFullPage
//  - TwitterUserName
//  - TwitterId
//  - GroupName
//  - RecognitionLanguage
//  - ReferralProof
//  - EducationalDiscount
//  - BusinessAddress
//  - HideSponsorBilling
//  - TaxExempt
//  - UseEmailAutoFiling
//  - ReminderEmailConfig
type UserAttributes struct {
	DefaultLocationName   *string  `thrift:"defaultLocationName,1" json:"defaultLocationName,omitempty"`
	DefaultLatitude       *float64 `thrift:"defaultLatitude,2" json:"defaultLatitude,omitempty"`
	DefaultLongitude      *float64 `thrift:"defaultLongitude,3" json:"defaultLongitude,omitempty"`
	Preactivation         *bool    `thrift:"preactivation,4" json:"preactivation,omitempty"`
	ViewedPromotions      []string `thrift:"viewedPromotions,5" json:"viewedPromotions,omitempty"`
	IncomingEmailAddress  *string  `thrift:"incomingEmailAddress,6" json:"incomingEmailAddress,omitempty"`
	RecentMailedAddresses []string `thrift:"recentMailedAddresses,7" json:"recentMailedAddresses,omitempty"`
	// unused field # 8
	Comments *string `thrift:"comments,9" json:"comments,omitempty"`
	// unused field # 10
	DateAgreedToTermsOfService *Timestamp `thrift:"dateAgreedToTermsOfService,11" json:"dateAgreedToTermsOfService,omitempty"`
	MaxReferrals               *int32     `thrift:"maxReferrals,12" json:"maxReferrals,omitempty"`
	ReferralCount              *int32     `thrift:"referralCount,13" json:"referralCount,omitempty"`
	RefererCode                *string    `thrift:"refererCode,14" json:"refererCode,omitempty"`
	SentEmailDate              *Timestamp `thrift:"sentEmailDate,15" json:"sentEmailDate,omitempty"`
	SentEmailCount             *int32     `thrift:"sentEmailCount,16" json:"sentEmailCount,omitempty"`
	DailyEmailLimit            *int32     `thrift:"dailyEmailLimit,17" json:"dailyEmailLimit,omitempty"`
	EmailOptOutDate            *Timestamp `thrift:"emailOptOutDate,18" json:"emailOptOutDate,omitempty"`
	PartnerEmailOptInDate      *Timestamp `thrift:"partnerEmailOptInDate,19" json:"partnerEmailOptInDate,omitempty"`
	PreferredLanguage          *string    `thrift:"preferredLanguage,20" json:"preferredLanguage,omitempty"`
	PreferredCountry           *string    `thrift:"preferredCountry,21" json:"preferredCountry,omitempty"`
	ClipFullPage               *bool      `thrift:"clipFullPage,22" json:"clipFullPage,omitempty"`
	TwitterUserName            *string    `thrift:"twitterUserName,23" json:"twitterUserName,omitempty"`
	TwitterId                  *string    `thrift:"twitterId,24" json:"twitterId,omitempty"`
	GroupName                  *string    `thrift:"groupName,25" json:"groupName,omitempty"`
	RecognitionLanguage        *string    `thrift:"recognitionLanguage,26" json:"recognitionLanguage,omitempty"`
	// unused field # 27
	ReferralProof       *string              `thrift:"referralProof,28" json:"referralProof,omitempty"`
	EducationalDiscount *bool                `thrift:"educationalDiscount,29" json:"educationalDiscount,omitempty"`
	BusinessAddress     *string              `thrift:"businessAddress,30" json:"businessAddress,omitempty"`
	HideSponsorBilling  *bool                `thrift:"hideSponsorBilling,31" json:"hideSponsorBilling,omitempty"`
	TaxExempt           *bool                `thrift:"taxExempt,32" json:"taxExempt,omitempty"`
	UseEmailAutoFiling  *bool                `thrift:"useEmailAutoFiling,33" json:"useEmailAutoFiling,omitempty"`
	ReminderEmailConfig *ReminderEmailConfig `thrift:"reminderEmailConfig,34" json:"reminderEmailConfig,omitempty"`
}

func NewUserAttributes() *UserAttributes {
	return &UserAttributes{}
}

var UserAttributes_DefaultLocationName_DEFAULT string

func (p *UserAttributes) GetDefaultLocationName() string {
	if !p.IsSetDefaultLocationName() {
		return UserAttributes_DefaultLocationName_DEFAULT
	}
	return *p.DefaultLocationName
}

var UserAttributes_DefaultLatitude_DEFAULT float64

func (p *UserAttributes) GetDefaultLatitude() float64 {
	if !p.IsSetDefaultLatitude() {
		return UserAttributes_DefaultLatitude_DEFAULT
	}
	return *p.DefaultLatitude
}

var UserAttributes_DefaultLongitude_DEFAULT float64

func (p *UserAttributes) GetDefaultLongitude() float64 {
	if !p.IsSetDefaultLongitude() {
		return UserAttributes_DefaultLongitude_DEFAULT
	}
	return *p.DefaultLongitude
}

var UserAttributes_Preactivation_DEFAULT bool

func (p *UserAttributes) GetPreactivation() bool {
	if !p.IsSetPreactivation() {
		return UserAttributes_Preactivation_DEFAULT
	}
	return *p.Preactivation
}

var UserAttributes_ViewedPromotions_DEFAULT []string

func (p *UserAttributes) GetViewedPromotions() []string {
	return p.ViewedPromotions
}

var UserAttributes_IncomingEmailAddress_DEFAULT string

func (p *UserAttributes) GetIncomingEmailAddress() string {
	if !p.IsSetIncomingEmailAddress() {
		return UserAttributes_IncomingEmailAddress_DEFAULT
	}
	return *p.IncomingEmailAddress
}

var UserAttributes_RecentMailedAddresses_DEFAULT []string

func (p *UserAttributes) GetRecentMailedAddresses() []string {
	return p.RecentMailedAddresses
}

var UserAttributes_Comments_DEFAULT string

func (p *UserAttributes) GetComments() string {
	if !p.IsSetComments() {
		return UserAttributes_Comments_DEFAULT
	}
	return *p.Comments
}

var UserAttributes_DateAgreedToTermsOfService_DEFAULT Timestamp

func (p *UserAttributes) GetDateAgreedToTermsOfService() Timestamp {
	if !p.IsSetDateAgreedToTermsOfService() {
		return UserAttributes_DateAgreedToTermsOfService_DEFAULT
	}
	return *p.DateAgreedToTermsOfService
}

var UserAttributes_MaxReferrals_DEFAULT int32

func (p *UserAttributes) GetMaxReferrals() int32 {
	if !p.IsSetMaxReferrals() {
		return UserAttributes_MaxReferrals_DEFAULT
	}
	return *p.MaxReferrals
}

var UserAttributes_ReferralCount_DEFAULT int32

func (p *UserAttributes) GetReferralCount() int32 {
	if !p.IsSetReferralCount() {
		return UserAttributes_ReferralCount_DEFAULT
	}
	return *p.ReferralCount
}

var UserAttributes_RefererCode_DEFAULT string

func (p *UserAttributes) GetRefererCode() string {
	if !p.IsSetRefererCode() {
		return UserAttributes_RefererCode_DEFAULT
	}
	return *p.RefererCode
}

var UserAttributes_SentEmailDate_DEFAULT Timestamp

func (p *UserAttributes) GetSentEmailDate() Timestamp {
	if !p.IsSetSentEmailDate() {
		return UserAttributes_SentEmailDate_DEFAULT
	}
	return *p.SentEmailDate
}

var UserAttributes_SentEmailCount_DEFAULT int32

func (p *UserAttributes) GetSentEmailCount() int32 {
	if !p.IsSetSentEmailCount() {
		return UserAttributes_SentEmailCount_DEFAULT
	}
	return *p.SentEmailCount
}

var UserAttributes_DailyEmailLimit_DEFAULT int32

func (p *UserAttributes) GetDailyEmailLimit() int32 {
	if !p.IsSetDailyEmailLimit() {
		return UserAttributes_DailyEmailLimit_DEFAULT
	}
	return *p.DailyEmailLimit
}

var UserAttributes_EmailOptOutDate_DEFAULT Timestamp

func (p *UserAttributes) GetEmailOptOutDate() Timestamp {
	if !p.IsSetEmailOptOutDate() {
		return UserAttributes_EmailOptOutDate_DEFAULT
	}
	return *p.EmailOptOutDate
}

var UserAttributes_PartnerEmailOptInDate_DEFAULT Timestamp

func (p *UserAttributes) GetPartnerEmailOptInDate() Timestamp {
	if !p.IsSetPartnerEmailOptInDate() {
		return UserAttributes_PartnerEmailOptInDate_DEFAULT
	}
	return *p.PartnerEmailOptInDate
}

var UserAttributes_PreferredLanguage_DEFAULT string

func (p *UserAttributes) GetPreferredLanguage() string {
	if !p.IsSetPreferredLanguage() {
		return UserAttributes_PreferredLanguage_DEFAULT
	}
	return *p.PreferredLanguage
}

var UserAttributes_PreferredCountry_DEFAULT string

func (p *UserAttributes) GetPreferredCountry() string {
	if !p.IsSetPreferredCountry() {
		return UserAttributes_PreferredCountry_DEFAULT
	}
	return *p.PreferredCountry
}

var UserAttributes_ClipFullPage_DEFAULT bool

func (p *UserAttributes) GetClipFullPage() bool {
	if !p.IsSetClipFullPage() {
		return UserAttributes_ClipFullPage_DEFAULT
	}
	return *p.ClipFullPage
}

var UserAttributes_TwitterUserName_DEFAULT string

func (p *UserAttributes) GetTwitterUserName() string {
	if !p.IsSetTwitterUserName() {
		return UserAttributes_TwitterUserName_DEFAULT
	}
	return *p.TwitterUserName
}

var UserAttributes_TwitterId_DEFAULT string

func (p *UserAttributes) GetTwitterId() string {
	if !p.IsSetTwitterId() {
		return UserAttributes_TwitterId_DEFAULT
	}
	return *p.TwitterId
}

var UserAttributes_GroupName_DEFAULT string

func (p *UserAttributes) GetGroupName() string {
	if !p.IsSetGroupName() {
		return UserAttributes_GroupName_DEFAULT
	}
	return *p.GroupName
}

var UserAttributes_RecognitionLanguage_DEFAULT string

func (p *UserAttributes) GetRecognitionLanguage() string {
	if !p.IsSetRecognitionLanguage() {
		return UserAttributes_RecognitionLanguage_DEFAULT
	}
	return *p.RecognitionLanguage
}

var UserAttributes_ReferralProof_DEFAULT string

func (p *UserAttributes) GetReferralProof() string {
	if !p.IsSetReferralProof() {
		return UserAttributes_ReferralProof_DEFAULT
	}
	return *p.ReferralProof
}

var UserAttributes_EducationalDiscount_DEFAULT bool

func (p *UserAttributes) GetEducationalDiscount() bool {
	if !p.IsSetEducationalDiscount() {
		return UserAttributes_EducationalDiscount_DEFAULT
	}
	return *p.EducationalDiscount
}

var UserAttributes_BusinessAddress_DEFAULT string

func (p *UserAttributes) GetBusinessAddress() string {
	if !p.IsSetBusinessAddress() {
		return UserAttributes_BusinessAddress_DEFAULT
	}
	return *p.BusinessAddress
}

var UserAttributes_HideSponsorBilling_DEFAULT bool

func (p *UserAttributes) GetHideSponsorBilling() bool {
	if !p.IsSetHideSponsorBilling() {
		return UserAttributes_HideSponsorBilling_DEFAULT
	}
	return *p.HideSponsorBilling
}

var UserAttributes_TaxExempt_DEFAULT bool

func (p *UserAttributes) GetTaxExempt() bool {
	if !p.IsSetTaxExempt() {
		return UserAttributes_TaxExempt_DEFAULT
	}
	return *p.TaxExempt
}

var UserAttributes_UseEmailAutoFiling_DEFAULT bool

func (p *UserAttributes) GetUseEmailAutoFiling() bool {
	if !p.IsSetUseEmailAutoFiling() {
		return UserAttributes_UseEmailAutoFiling_DEFAULT
	}
	return *p.UseEmailAutoFiling
}

var UserAttributes_ReminderEmailConfig_DEFAULT ReminderEmailConfig

func (p *UserAttributes) GetReminderEmailConfig() ReminderEmailConfig {
	if !p.IsSetReminderEmailConfig() {
		return UserAttributes_ReminderEmailConfig_DEFAULT
	}
	return *p.ReminderEmailConfig
}
func (p *UserAttributes) IsSetDefaultLocationName() bool {
	return p.DefaultLocationName != nil
}

func (p *UserAttributes) IsSetDefaultLatitude() bool {
	return p.DefaultLatitude != nil
}

func (p *UserAttributes) IsSetDefaultLongitude() bool {
	return p.DefaultLongitude != nil
}

func (p *UserAttributes) IsSetPreactivation() bool {
	return p.Preactivation != nil
}

func (p *UserAttributes) IsSetViewedPromotions() bool {
	return p.ViewedPromotions != nil
}

func (p *UserAttributes) IsSetIncomingEmailAddress() bool {
	return p.IncomingEmailAddress != nil
}

func (p *UserAttributes) IsSetRecentMailedAddresses() bool {
	return p.RecentMailedAddresses != nil
}

func (p *UserAttributes) IsSetComments() bool {
	return p.Comments != nil
}

func (p *UserAttributes) IsSetDateAgreedToTermsOfService() bool {
	return p.DateAgreedToTermsOfService != nil
}

func (p *UserAttributes) IsSetMaxReferrals() bool {
	return p.MaxReferrals != nil
}

func (p *UserAttributes) IsSetReferralCount() bool {
	return p.ReferralCount != nil
}

func (p *UserAttributes) IsSetRefererCode() bool {
	return p.RefererCode != nil
}

func (p *UserAttributes) IsSetSentEmailDate() bool {
	return p.SentEmailDate != nil
}

func (p *UserAttributes) IsSetSentEmailCount() bool {
	return p.SentEmailCount != nil
}

func (p *UserAttributes) IsSetDailyEmailLimit() bool {
	return p.DailyEmailLimit != nil
}

func (p *UserAttributes) IsSetEmailOptOutDate() bool {
	return p.EmailOptOutDate != nil
}

func (p *UserAttributes) IsSetPartnerEmailOptInDate() bool {
	return p.PartnerEmailOptInDate != nil
}

func (p *UserAttributes) IsSetPreferredLanguage() bool {
	return p.PreferredLanguage != nil
}

func (p *UserAttributes) IsSetPreferredCountry() bool {
	return p.PreferredCountry != nil
}

func (p *UserAttributes) IsSetClipFullPage() bool {
	return p.ClipFullPage != nil
}

func (p *UserAttributes) IsSetTwitterUserName() bool {
	return p.TwitterUserName != nil
}

func (p *UserAttributes) IsSetTwitterId() bool {
	return p.TwitterId != nil
}

func (p *UserAttributes) IsSetGroupName() bool {
	return p.GroupName != nil
}

func (p *UserAttributes) IsSetRecognitionLanguage() bool {
	return p.RecognitionLanguage != nil
}

func (p *UserAttributes) IsSetReferralProof() bool {
	return p.ReferralProof != nil
}

func (p *UserAttributes) IsSetEducationalDiscount() bool {
	return p.EducationalDiscount != nil
}

func (p *UserAttributes) IsSetBusinessAddress() bool {
	return p.BusinessAddress != nil
}

func (p *UserAttributes) IsSetHideSponsorBilling() bool {
	return p.HideSponsorBilling != nil
}

func (p *UserAttributes) IsSetTaxExempt() bool {
	return p.TaxExempt != nil
}

func (p *UserAttributes) IsSetUseEmailAutoFiling() bool {
	return p.UseEmailAutoFiling != nil
}

func (p *UserAttributes) IsSetReminderEmailConfig() bool {
	return p.ReminderEmailConfig != nil
}

func (p *UserAttributes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.readField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.readField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.readField26(iprot); err != nil {
				return err
			}
		case 28:
			if err := p.readField28(iprot); err != nil {
				return err
			}
		case 29:
			if err := p.readField29(iprot); err != nil {
				return err
			}
		case 30:
			if err := p.readField30(iprot); err != nil {
				return err
			}
		case 31:
			if err := p.readField31(iprot); err != nil {
				return err
			}
		case 32:
			if err := p.readField32(iprot); err != nil {
				return err
			}
		case 33:
			if err := p.readField33(iprot); err != nil {
				return err
			}
		case 34:
			if err := p.readField34(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserAttributes) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DefaultLocationName = &v
	}
	return nil
}

func (p *UserAttributes) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.DefaultLatitude = &v
	}
	return nil
}

func (p *UserAttributes) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DefaultLongitude = &v
	}
	return nil
}

func (p *UserAttributes) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Preactivation = &v
	}
	return nil
}

func (p *UserAttributes) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ViewedPromotions = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.ViewedPromotions = append(p.ViewedPromotions, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserAttributes) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.IncomingEmailAddress = &v
	}
	return nil
}

func (p *UserAttributes) readField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.RecentMailedAddresses = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.RecentMailedAddresses = append(p.RecentMailedAddresses, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserAttributes) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Comments = &v
	}
	return nil
}

func (p *UserAttributes) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		temp := Timestamp(v)
		p.DateAgreedToTermsOfService = &temp
	}
	return nil
}

func (p *UserAttributes) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.MaxReferrals = &v
	}
	return nil
}

func (p *UserAttributes) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.ReferralCount = &v
	}
	return nil
}

func (p *UserAttributes) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.RefererCode = &v
	}
	return nil
}

func (p *UserAttributes) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		temp := Timestamp(v)
		p.SentEmailDate = &temp
	}
	return nil
}

func (p *UserAttributes) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.SentEmailCount = &v
	}
	return nil
}

func (p *UserAttributes) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.DailyEmailLimit = &v
	}
	return nil
}

func (p *UserAttributes) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		temp := Timestamp(v)
		p.EmailOptOutDate = &temp
	}
	return nil
}

func (p *UserAttributes) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		temp := Timestamp(v)
		p.PartnerEmailOptInDate = &temp
	}
	return nil
}

func (p *UserAttributes) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.PreferredLanguage = &v
	}
	return nil
}

func (p *UserAttributes) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.PreferredCountry = &v
	}
	return nil
}

func (p *UserAttributes) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.ClipFullPage = &v
	}
	return nil
}

func (p *UserAttributes) readField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.TwitterUserName = &v
	}
	return nil
}

func (p *UserAttributes) readField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		p.TwitterId = &v
	}
	return nil
}

func (p *UserAttributes) readField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 25: ", err)
	} else {
		p.GroupName = &v
	}
	return nil
}

func (p *UserAttributes) readField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 26: ", err)
	} else {
		p.RecognitionLanguage = &v
	}
	return nil
}

func (p *UserAttributes) readField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 28: ", err)
	} else {
		p.ReferralProof = &v
	}
	return nil
}

func (p *UserAttributes) readField29(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 29: ", err)
	} else {
		p.EducationalDiscount = &v
	}
	return nil
}

func (p *UserAttributes) readField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.BusinessAddress = &v
	}
	return nil
}

func (p *UserAttributes) readField31(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 31: ", err)
	} else {
		p.HideSponsorBilling = &v
	}
	return nil
}

func (p *UserAttributes) readField32(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 32: ", err)
	} else {
		p.TaxExempt = &v
	}
	return nil
}

func (p *UserAttributes) readField33(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 33: ", err)
	} else {
		p.UseEmailAutoFiling = &v
	}
	return nil
}

func (p *UserAttributes) readField34(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 34: ", err)
	} else {
		temp := ReminderEmailConfig(v)
		p.ReminderEmailConfig = &temp
	}
	return nil
}

func (p *UserAttributes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserAttributes"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField28(oprot); err != nil {
		return err
	}
	if err := p.writeField29(oprot); err != nil {
		return err
	}
	if err := p.writeField30(oprot); err != nil {
		return err
	}
	if err := p.writeField31(oprot); err != nil {
		return err
	}
	if err := p.writeField32(oprot); err != nil {
		return err
	}
	if err := p.writeField33(oprot); err != nil {
		return err
	}
	if err := p.writeField34(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAttributes) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultLocationName() {
		if err := oprot.WriteFieldBegin("defaultLocationName", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:defaultLocationName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DefaultLocationName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.defaultLocationName (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:defaultLocationName: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultLatitude() {
		if err := oprot.WriteFieldBegin("defaultLatitude", thrift.DOUBLE, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:defaultLatitude: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.DefaultLatitude)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.defaultLatitude (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:defaultLatitude: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultLongitude() {
		if err := oprot.WriteFieldBegin("defaultLongitude", thrift.DOUBLE, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:defaultLongitude: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.DefaultLongitude)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.defaultLongitude (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:defaultLongitude: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPreactivation() {
		if err := oprot.WriteFieldBegin("preactivation", thrift.BOOL, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:preactivation: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Preactivation)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.preactivation (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:preactivation: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetViewedPromotions() {
		if err := oprot.WriteFieldBegin("viewedPromotions", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:viewedPromotions: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ViewedPromotions)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ViewedPromotions {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:viewedPromotions: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncomingEmailAddress() {
		if err := oprot.WriteFieldBegin("incomingEmailAddress", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:incomingEmailAddress: ", p), err)
		}
		if err := oprot.WriteString(string(*p.IncomingEmailAddress)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.incomingEmailAddress (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:incomingEmailAddress: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecentMailedAddresses() {
		if err := oprot.WriteFieldBegin("recentMailedAddresses", thrift.LIST, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:recentMailedAddresses: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.RecentMailedAddresses)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.RecentMailedAddresses {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:recentMailedAddresses: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetComments() {
		if err := oprot.WriteFieldBegin("comments", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:comments: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Comments)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.comments (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:comments: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetDateAgreedToTermsOfService() {
		if err := oprot.WriteFieldBegin("dateAgreedToTermsOfService", thrift.I64, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:dateAgreedToTermsOfService: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.DateAgreedToTermsOfService)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.dateAgreedToTermsOfService (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:dateAgreedToTermsOfService: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxReferrals() {
		if err := oprot.WriteFieldBegin("maxReferrals", thrift.I32, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:maxReferrals: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.MaxReferrals)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.maxReferrals (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:maxReferrals: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetReferralCount() {
		if err := oprot.WriteFieldBegin("referralCount", thrift.I32, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:referralCount: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ReferralCount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.referralCount (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:referralCount: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetRefererCode() {
		if err := oprot.WriteFieldBegin("refererCode", thrift.STRING, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:refererCode: ", p), err)
		}
		if err := oprot.WriteString(string(*p.RefererCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.refererCode (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:refererCode: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetSentEmailDate() {
		if err := oprot.WriteFieldBegin("sentEmailDate", thrift.I64, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:sentEmailDate: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SentEmailDate)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sentEmailDate (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:sentEmailDate: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetSentEmailCount() {
		if err := oprot.WriteFieldBegin("sentEmailCount", thrift.I32, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:sentEmailCount: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.SentEmailCount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sentEmailCount (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:sentEmailCount: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetDailyEmailLimit() {
		if err := oprot.WriteFieldBegin("dailyEmailLimit", thrift.I32, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:dailyEmailLimit: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.DailyEmailLimit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.dailyEmailLimit (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:dailyEmailLimit: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmailOptOutDate() {
		if err := oprot.WriteFieldBegin("emailOptOutDate", thrift.I64, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:emailOptOutDate: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.EmailOptOutDate)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.emailOptOutDate (18) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:emailOptOutDate: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetPartnerEmailOptInDate() {
		if err := oprot.WriteFieldBegin("partnerEmailOptInDate", thrift.I64, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:partnerEmailOptInDate: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.PartnerEmailOptInDate)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.partnerEmailOptInDate (19) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:partnerEmailOptInDate: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetPreferredLanguage() {
		if err := oprot.WriteFieldBegin("preferredLanguage", thrift.STRING, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:preferredLanguage: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PreferredLanguage)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.preferredLanguage (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:preferredLanguage: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetPreferredCountry() {
		if err := oprot.WriteFieldBegin("preferredCountry", thrift.STRING, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:preferredCountry: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PreferredCountry)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.preferredCountry (21) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:preferredCountry: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetClipFullPage() {
		if err := oprot.WriteFieldBegin("clipFullPage", thrift.BOOL, 22); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:clipFullPage: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.ClipFullPage)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.clipFullPage (22) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 22:clipFullPage: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetTwitterUserName() {
		if err := oprot.WriteFieldBegin("twitterUserName", thrift.STRING, 23); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:twitterUserName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TwitterUserName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.twitterUserName (23) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 23:twitterUserName: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetTwitterId() {
		if err := oprot.WriteFieldBegin("twitterId", thrift.STRING, 24); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:twitterId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TwitterId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.twitterId (24) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 24:twitterId: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupName() {
		if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 25); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:groupName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GroupName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.groupName (25) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 25:groupName: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecognitionLanguage() {
		if err := oprot.WriteFieldBegin("recognitionLanguage", thrift.STRING, 26); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:recognitionLanguage: ", p), err)
		}
		if err := oprot.WriteString(string(*p.RecognitionLanguage)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.recognitionLanguage (26) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 26:recognitionLanguage: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField28(oprot thrift.TProtocol) (err error) {
	if p.IsSetReferralProof() {
		if err := oprot.WriteFieldBegin("referralProof", thrift.STRING, 28); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:referralProof: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ReferralProof)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.referralProof (28) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 28:referralProof: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField29(oprot thrift.TProtocol) (err error) {
	if p.IsSetEducationalDiscount() {
		if err := oprot.WriteFieldBegin("educationalDiscount", thrift.BOOL, 29); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:educationalDiscount: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.EducationalDiscount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.educationalDiscount (29) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 29:educationalDiscount: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetBusinessAddress() {
		if err := oprot.WriteFieldBegin("businessAddress", thrift.STRING, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:businessAddress: ", p), err)
		}
		if err := oprot.WriteString(string(*p.BusinessAddress)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.businessAddress (30) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:businessAddress: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetHideSponsorBilling() {
		if err := oprot.WriteFieldBegin("hideSponsorBilling", thrift.BOOL, 31); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:hideSponsorBilling: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.HideSponsorBilling)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hideSponsorBilling (31) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 31:hideSponsorBilling: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField32(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaxExempt() {
		if err := oprot.WriteFieldBegin("taxExempt", thrift.BOOL, 32); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:taxExempt: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.TaxExempt)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.taxExempt (32) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 32:taxExempt: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField33(oprot thrift.TProtocol) (err error) {
	if p.IsSetUseEmailAutoFiling() {
		if err := oprot.WriteFieldBegin("useEmailAutoFiling", thrift.BOOL, 33); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:useEmailAutoFiling: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.UseEmailAutoFiling)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.useEmailAutoFiling (33) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 33:useEmailAutoFiling: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) writeField34(oprot thrift.TProtocol) (err error) {
	if p.IsSetReminderEmailConfig() {
		if err := oprot.WriteFieldBegin("reminderEmailConfig", thrift.I32, 34); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:reminderEmailConfig: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ReminderEmailConfig)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.reminderEmailConfig (34) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 34:reminderEmailConfig: ", p), err)
		}
	}
	return err
}

func (p *UserAttributes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAttributes(%+v)", *p)
}

//  This represents the bookkeeping information for the user's subscription.
//
// <dl>
//  <dt>uploadLimit</dt>
//    <dd>The number of bytes that can be uploaded to the account
//    in the current month.  For new notes that are created, this is the length
//    of the note content (in Unicode characters) plus the size of each resource
//    (in bytes).  For edited notes, this is the the difference between the old
//    length and the new length (if this is greater than 0) plus the size of
//    each new resource.
//    </dd>
//  <dt>uploadLimitEnd</dt>
//    <dd>The date and time when the current upload limit
//    expires.  At this time, the monthly upload count reverts to 0 and a new
//    limit is imposed.  This date and time is exclusive, so this is effectively
//    the start of the new month.
//    </dd>
//  <dt>uploadLimitNextMonth</dt>
//    <dd> When uploadLimitEnd is reached, the service
//    will change uploadLimit to uploadLimitNextMonth. If a premium account is
//    canceled, this mechanism will reset the quota appropriately.
//    </dd>
//  <dt>premiumServiceStatus</dt>
//    <dd>Indicates the phases of a premium account
//    during the billing process.
//    </dd>
//  <dt>premiumOrderNumber</dt>
//    <dd>The order number used by the commerce system to
//    process recurring payments
//    </dd>
//  <dt>premiumServiceStart</dt>
//    <dd>The start date when this premium promotion
//    began (this number will get overwritten if a premium service is canceled
//    and then re-activated).
//    </dd>
//  <dt>premiumCommerceService</dt>
//    <dd>The commerce system used (paypal, Google
//    checkout, etc)
//    </dd>
//  <dt>premiumServiceSKU</dt>
//    <dd>The code associated with the purchase eg. monthly
//    or annual purchase. Clients should interpret this value and localize it.
//    </dd>
//  <dt>lastSuccessfulCharge</dt>
//    <dd>Date the last time the user was charged.
//    Null if never charged.
//    </dd>
//  <dt>lastFailedCharge</dt>
//    <dd>Date the last time a charge was attempted and
//    failed.
//    </dd>
//  <dt>lastFailedChargeReason</dt>
//    <dd>Reason provided for the charge failure
//    </dd>
//  <dt>nextPaymentDue</dt>
//    <dd>The end of the billing cycle. This could be in the
//    past if there are failed charges.
//    </dd>
//  <dt>premiumLockUntil</dt>
//    <dd>An internal variable to manage locking operations
//    on the commerce variables.
//    </dd>
//  <dt>updated</dt>
//    <dd>The date any modification where made to this record.
//    </dd>
//  <dt>premiumSubscriptionNumber</dt>
//    <dd>The number number identifying the
//    recurring subscription used to make the recurring charges.
//    </dd>
//  <dt>lastRequestedCharge</dt>
//    <dd>Date charge last attempted</dd>
//  <dt>currency</dt>
//    <dd>ISO 4217 currency code</dd>
//  <dt>unitPrice</dt>
//    <dd>charge in the smallest unit of the currency (e.g. cents for USD)</dd>
//  <dt>businessId</dt>
//    <dd><i>DEPRECATED:</i>See BusinessUserInfo.</dd>
//  <dt>businessName</dt>
//    <dd><i>DEPRECATED:</i>See BusinessUserInfo.</dd>
//  <dt>businessRole</dt>
//    <dd><i>DEPRECATED:</i>See BusinessUserInfo.</dd>
//  <dt>unitDiscount</dt>
//    <dd>discount per seat in negative amount and smallest unit of the currency (e.g. cents for USD)</dd>
//  <dt>nextChargeDate</dt>
//    <dd>The next time the user will be charged, may or may not be the same as nextPaymentDue</dd>
//  </dl>
//
// Attributes:
//  - UploadLimit
//  - UploadLimitEnd
//  - UploadLimitNextMonth
//  - PremiumServiceStatus
//  - PremiumOrderNumber
//  - PremiumCommerceService
//  - PremiumServiceStart
//  - PremiumServiceSKU
//  - LastSuccessfulCharge
//  - LastFailedCharge
//  - LastFailedChargeReason
//  - NextPaymentDue
//  - PremiumLockUntil
//  - Updated
//  - PremiumSubscriptionNumber
//  - LastRequestedCharge
//  - Currency
//  - UnitPrice
//  - BusinessId
//  - BusinessName
//  - BusinessRole
//  - UnitDiscount
//  - NextChargeDate
type Accounting struct {
	UploadLimit            *int64              `thrift:"uploadLimit,1" json:"uploadLimit,omitempty"`
	UploadLimitEnd         *Timestamp          `thrift:"uploadLimitEnd,2" json:"uploadLimitEnd,omitempty"`
	UploadLimitNextMonth   *int64              `thrift:"uploadLimitNextMonth,3" json:"uploadLimitNextMonth,omitempty"`
	PremiumServiceStatus   *PremiumOrderStatus `thrift:"premiumServiceStatus,4" json:"premiumServiceStatus,omitempty"`
	PremiumOrderNumber     *string             `thrift:"premiumOrderNumber,5" json:"premiumOrderNumber,omitempty"`
	PremiumCommerceService *string             `thrift:"premiumCommerceService,6" json:"premiumCommerceService,omitempty"`
	PremiumServiceStart    *Timestamp          `thrift:"premiumServiceStart,7" json:"premiumServiceStart,omitempty"`
	PremiumServiceSKU      *string             `thrift:"premiumServiceSKU,8" json:"premiumServiceSKU,omitempty"`
	LastSuccessfulCharge   *Timestamp          `thrift:"lastSuccessfulCharge,9" json:"lastSuccessfulCharge,omitempty"`
	LastFailedCharge       *Timestamp          `thrift:"lastFailedCharge,10" json:"lastFailedCharge,omitempty"`
	LastFailedChargeReason *string             `thrift:"lastFailedChargeReason,11" json:"lastFailedChargeReason,omitempty"`
	NextPaymentDue         *Timestamp          `thrift:"nextPaymentDue,12" json:"nextPaymentDue,omitempty"`
	PremiumLockUntil       *Timestamp          `thrift:"premiumLockUntil,13" json:"premiumLockUntil,omitempty"`
	Updated                *Timestamp          `thrift:"updated,14" json:"updated,omitempty"`
	// unused field # 15
	PremiumSubscriptionNumber *string           `thrift:"premiumSubscriptionNumber,16" json:"premiumSubscriptionNumber,omitempty"`
	LastRequestedCharge       *Timestamp        `thrift:"lastRequestedCharge,17" json:"lastRequestedCharge,omitempty"`
	Currency                  *string           `thrift:"currency,18" json:"currency,omitempty"`
	UnitPrice                 *int32            `thrift:"unitPrice,19" json:"unitPrice,omitempty"`
	BusinessId                *int32            `thrift:"businessId,20" json:"businessId,omitempty"`
	BusinessName              *string           `thrift:"businessName,21" json:"businessName,omitempty"`
	BusinessRole              *BusinessUserRole `thrift:"businessRole,22" json:"businessRole,omitempty"`
	UnitDiscount              *int32            `thrift:"unitDiscount,23" json:"unitDiscount,omitempty"`
	NextChargeDate            *Timestamp        `thrift:"nextChargeDate,24" json:"nextChargeDate,omitempty"`
}

func NewAccounting() *Accounting {
	return &Accounting{}
}

var Accounting_UploadLimit_DEFAULT int64

func (p *Accounting) GetUploadLimit() int64 {
	if !p.IsSetUploadLimit() {
		return Accounting_UploadLimit_DEFAULT
	}
	return *p.UploadLimit
}

var Accounting_UploadLimitEnd_DEFAULT Timestamp

func (p *Accounting) GetUploadLimitEnd() Timestamp {
	if !p.IsSetUploadLimitEnd() {
		return Accounting_UploadLimitEnd_DEFAULT
	}
	return *p.UploadLimitEnd
}

var Accounting_UploadLimitNextMonth_DEFAULT int64

func (p *Accounting) GetUploadLimitNextMonth() int64 {
	if !p.IsSetUploadLimitNextMonth() {
		return Accounting_UploadLimitNextMonth_DEFAULT
	}
	return *p.UploadLimitNextMonth
}

var Accounting_PremiumServiceStatus_DEFAULT PremiumOrderStatus

func (p *Accounting) GetPremiumServiceStatus() PremiumOrderStatus {
	if !p.IsSetPremiumServiceStatus() {
		return Accounting_PremiumServiceStatus_DEFAULT
	}
	return *p.PremiumServiceStatus
}

var Accounting_PremiumOrderNumber_DEFAULT string

func (p *Accounting) GetPremiumOrderNumber() string {
	if !p.IsSetPremiumOrderNumber() {
		return Accounting_PremiumOrderNumber_DEFAULT
	}
	return *p.PremiumOrderNumber
}

var Accounting_PremiumCommerceService_DEFAULT string

func (p *Accounting) GetPremiumCommerceService() string {
	if !p.IsSetPremiumCommerceService() {
		return Accounting_PremiumCommerceService_DEFAULT
	}
	return *p.PremiumCommerceService
}

var Accounting_PremiumServiceStart_DEFAULT Timestamp

func (p *Accounting) GetPremiumServiceStart() Timestamp {
	if !p.IsSetPremiumServiceStart() {
		return Accounting_PremiumServiceStart_DEFAULT
	}
	return *p.PremiumServiceStart
}

var Accounting_PremiumServiceSKU_DEFAULT string

func (p *Accounting) GetPremiumServiceSKU() string {
	if !p.IsSetPremiumServiceSKU() {
		return Accounting_PremiumServiceSKU_DEFAULT
	}
	return *p.PremiumServiceSKU
}

var Accounting_LastSuccessfulCharge_DEFAULT Timestamp

func (p *Accounting) GetLastSuccessfulCharge() Timestamp {
	if !p.IsSetLastSuccessfulCharge() {
		return Accounting_LastSuccessfulCharge_DEFAULT
	}
	return *p.LastSuccessfulCharge
}

var Accounting_LastFailedCharge_DEFAULT Timestamp

func (p *Accounting) GetLastFailedCharge() Timestamp {
	if !p.IsSetLastFailedCharge() {
		return Accounting_LastFailedCharge_DEFAULT
	}
	return *p.LastFailedCharge
}

var Accounting_LastFailedChargeReason_DEFAULT string

func (p *Accounting) GetLastFailedChargeReason() string {
	if !p.IsSetLastFailedChargeReason() {
		return Accounting_LastFailedChargeReason_DEFAULT
	}
	return *p.LastFailedChargeReason
}

var Accounting_NextPaymentDue_DEFAULT Timestamp

func (p *Accounting) GetNextPaymentDue() Timestamp {
	if !p.IsSetNextPaymentDue() {
		return Accounting_NextPaymentDue_DEFAULT
	}
	return *p.NextPaymentDue
}

var Accounting_PremiumLockUntil_DEFAULT Timestamp

func (p *Accounting) GetPremiumLockUntil() Timestamp {
	if !p.IsSetPremiumLockUntil() {
		return Accounting_PremiumLockUntil_DEFAULT
	}
	return *p.PremiumLockUntil
}

var Accounting_Updated_DEFAULT Timestamp

func (p *Accounting) GetUpdated() Timestamp {
	if !p.IsSetUpdated() {
		return Accounting_Updated_DEFAULT
	}
	return *p.Updated
}

var Accounting_PremiumSubscriptionNumber_DEFAULT string

func (p *Accounting) GetPremiumSubscriptionNumber() string {
	if !p.IsSetPremiumSubscriptionNumber() {
		return Accounting_PremiumSubscriptionNumber_DEFAULT
	}
	return *p.PremiumSubscriptionNumber
}

var Accounting_LastRequestedCharge_DEFAULT Timestamp

func (p *Accounting) GetLastRequestedCharge() Timestamp {
	if !p.IsSetLastRequestedCharge() {
		return Accounting_LastRequestedCharge_DEFAULT
	}
	return *p.LastRequestedCharge
}

var Accounting_Currency_DEFAULT string

func (p *Accounting) GetCurrency() string {
	if !p.IsSetCurrency() {
		return Accounting_Currency_DEFAULT
	}
	return *p.Currency
}

var Accounting_UnitPrice_DEFAULT int32

func (p *Accounting) GetUnitPrice() int32 {
	if !p.IsSetUnitPrice() {
		return Accounting_UnitPrice_DEFAULT
	}
	return *p.UnitPrice
}

var Accounting_BusinessId_DEFAULT int32

func (p *Accounting) GetBusinessId() int32 {
	if !p.IsSetBusinessId() {
		return Accounting_BusinessId_DEFAULT
	}
	return *p.BusinessId
}

var Accounting_BusinessName_DEFAULT string

func (p *Accounting) GetBusinessName() string {
	if !p.IsSetBusinessName() {
		return Accounting_BusinessName_DEFAULT
	}
	return *p.BusinessName
}

var Accounting_BusinessRole_DEFAULT BusinessUserRole

func (p *Accounting) GetBusinessRole() BusinessUserRole {
	if !p.IsSetBusinessRole() {
		return Accounting_BusinessRole_DEFAULT
	}
	return *p.BusinessRole
}

var Accounting_UnitDiscount_DEFAULT int32

func (p *Accounting) GetUnitDiscount() int32 {
	if !p.IsSetUnitDiscount() {
		return Accounting_UnitDiscount_DEFAULT
	}
	return *p.UnitDiscount
}

var Accounting_NextChargeDate_DEFAULT Timestamp

func (p *Accounting) GetNextChargeDate() Timestamp {
	if !p.IsSetNextChargeDate() {
		return Accounting_NextChargeDate_DEFAULT
	}
	return *p.NextChargeDate
}
func (p *Accounting) IsSetUploadLimit() bool {
	return p.UploadLimit != nil
}

func (p *Accounting) IsSetUploadLimitEnd() bool {
	return p.UploadLimitEnd != nil
}

func (p *Accounting) IsSetUploadLimitNextMonth() bool {
	return p.UploadLimitNextMonth != nil
}

func (p *Accounting) IsSetPremiumServiceStatus() bool {
	return p.PremiumServiceStatus != nil
}

func (p *Accounting) IsSetPremiumOrderNumber() bool {
	return p.PremiumOrderNumber != nil
}

func (p *Accounting) IsSetPremiumCommerceService() bool {
	return p.PremiumCommerceService != nil
}

func (p *Accounting) IsSetPremiumServiceStart() bool {
	return p.PremiumServiceStart != nil
}

func (p *Accounting) IsSetPremiumServiceSKU() bool {
	return p.PremiumServiceSKU != nil
}

func (p *Accounting) IsSetLastSuccessfulCharge() bool {
	return p.LastSuccessfulCharge != nil
}

func (p *Accounting) IsSetLastFailedCharge() bool {
	return p.LastFailedCharge != nil
}

func (p *Accounting) IsSetLastFailedChargeReason() bool {
	return p.LastFailedChargeReason != nil
}

func (p *Accounting) IsSetNextPaymentDue() bool {
	return p.NextPaymentDue != nil
}

func (p *Accounting) IsSetPremiumLockUntil() bool {
	return p.PremiumLockUntil != nil
}

func (p *Accounting) IsSetUpdated() bool {
	return p.Updated != nil
}

func (p *Accounting) IsSetPremiumSubscriptionNumber() bool {
	return p.PremiumSubscriptionNumber != nil
}

func (p *Accounting) IsSetLastRequestedCharge() bool {
	return p.LastRequestedCharge != nil
}

func (p *Accounting) IsSetCurrency() bool {
	return p.Currency != nil
}

func (p *Accounting) IsSetUnitPrice() bool {
	return p.UnitPrice != nil
}

func (p *Accounting) IsSetBusinessId() bool {
	return p.BusinessId != nil
}

func (p *Accounting) IsSetBusinessName() bool {
	return p.BusinessName != nil
}

func (p *Accounting) IsSetBusinessRole() bool {
	return p.BusinessRole != nil
}

func (p *Accounting) IsSetUnitDiscount() bool {
	return p.UnitDiscount != nil
}

func (p *Accounting) IsSetNextChargeDate() bool {
	return p.NextChargeDate != nil
}

func (p *Accounting) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.readField24(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Accounting) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UploadLimit = &v
	}
	return nil
}

func (p *Accounting) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Timestamp(v)
		p.UploadLimitEnd = &temp
	}
	return nil
}

func (p *Accounting) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.UploadLimitNextMonth = &v
	}
	return nil
}

func (p *Accounting) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := PremiumOrderStatus(v)
		p.PremiumServiceStatus = &temp
	}
	return nil
}

func (p *Accounting) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.PremiumOrderNumber = &v
	}
	return nil
}

func (p *Accounting) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.PremiumCommerceService = &v
	}
	return nil
}

func (p *Accounting) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := Timestamp(v)
		p.PremiumServiceStart = &temp
	}
	return nil
}

func (p *Accounting) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.PremiumServiceSKU = &v
	}
	return nil
}

func (p *Accounting) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		temp := Timestamp(v)
		p.LastSuccessfulCharge = &temp
	}
	return nil
}

func (p *Accounting) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := Timestamp(v)
		p.LastFailedCharge = &temp
	}
	return nil
}

func (p *Accounting) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.LastFailedChargeReason = &v
	}
	return nil
}

func (p *Accounting) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		temp := Timestamp(v)
		p.NextPaymentDue = &temp
	}
	return nil
}

func (p *Accounting) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		temp := Timestamp(v)
		p.PremiumLockUntil = &temp
	}
	return nil
}

func (p *Accounting) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		temp := Timestamp(v)
		p.Updated = &temp
	}
	return nil
}

func (p *Accounting) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.PremiumSubscriptionNumber = &v
	}
	return nil
}

func (p *Accounting) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		temp := Timestamp(v)
		p.LastRequestedCharge = &temp
	}
	return nil
}

func (p *Accounting) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.Currency = &v
	}
	return nil
}

func (p *Accounting) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.UnitPrice = &v
	}
	return nil
}

func (p *Accounting) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.BusinessId = &v
	}
	return nil
}

func (p *Accounting) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.BusinessName = &v
	}
	return nil
}

func (p *Accounting) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		temp := BusinessUserRole(v)
		p.BusinessRole = &temp
	}
	return nil
}

func (p *Accounting) readField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.UnitDiscount = &v
	}
	return nil
}

func (p *Accounting) readField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		temp := Timestamp(v)
		p.NextChargeDate = &temp
	}
	return nil
}

func (p *Accounting) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Accounting"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Accounting) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUploadLimit() {
		if err := oprot.WriteFieldBegin("uploadLimit", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uploadLimit: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UploadLimit)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.uploadLimit (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uploadLimit: ", p), err)
		}
	}
	return err
}

func (p *Accounting) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUploadLimitEnd() {
		if err := oprot.WriteFieldBegin("uploadLimitEnd", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uploadLimitEnd: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UploadLimitEnd)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.uploadLimitEnd (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uploadLimitEnd: ", p), err)
		}
	}
	return err
}

func (p *Accounting) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUploadLimitNextMonth() {
		if err := oprot.WriteFieldBegin("uploadLimitNextMonth", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:uploadLimitNextMonth: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.UploadLimitNextMonth)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.uploadLimitNextMonth (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:uploadLimitNextMonth: ", p), err)
		}
	}
	return err
}

func (p *Accounting) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPremiumServiceStatus() {
		if err := oprot.WriteFieldBegin("premiumServiceStatus", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:premiumServiceStatus: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.PremiumServiceStatus)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.premiumServiceStatus (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:premiumServiceStatus: ", p), err)
		}
	}
	return err
}

func (p *Accounting) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPremiumOrderNumber() {
		if err := oprot.WriteFieldBegin("premiumOrderNumber", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:premiumOrderNumber: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PremiumOrderNumber)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.premiumOrderNumber (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:premiumOrderNumber: ", p), err)
		}
	}
	return err
}

func (p *Accounting) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPremiumCommerceService() {
		if err := oprot.WriteFieldBegin("premiumCommerceService", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:premiumCommerceService: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PremiumCommerceService)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.premiumCommerceService (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:premiumCommerceService: ", p), err)
		}
	}
	return err
}

func (p *Accounting) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPremiumServiceStart() {
		if err := oprot.WriteFieldBegin("premiumServiceStart", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:premiumServiceStart: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.PremiumServiceStart)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.premiumServiceStart (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:premiumServiceStart: ", p), err)
		}
	}
	return err
}

func (p *Accounting) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPremiumServiceSKU() {
		if err := oprot.WriteFieldBegin("premiumServiceSKU", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:premiumServiceSKU: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PremiumServiceSKU)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.premiumServiceSKU (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:premiumServiceSKU: ", p), err)
		}
	}
	return err
}

func (p *Accounting) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastSuccessfulCharge() {
		if err := oprot.WriteFieldBegin("lastSuccessfulCharge", thrift.I64, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:lastSuccessfulCharge: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.LastSuccessfulCharge)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lastSuccessfulCharge (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:lastSuccessfulCharge: ", p), err)
		}
	}
	return err
}

func (p *Accounting) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastFailedCharge() {
		if err := oprot.WriteFieldBegin("lastFailedCharge", thrift.I64, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:lastFailedCharge: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.LastFailedCharge)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lastFailedCharge (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:lastFailedCharge: ", p), err)
		}
	}
	return err
}

func (p *Accounting) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastFailedChargeReason() {
		if err := oprot.WriteFieldBegin("lastFailedChargeReason", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:lastFailedChargeReason: ", p), err)
		}
		if err := oprot.WriteString(string(*p.LastFailedChargeReason)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lastFailedChargeReason (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:lastFailedChargeReason: ", p), err)
		}
	}
	return err
}

func (p *Accounting) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPaymentDue() {
		if err := oprot.WriteFieldBegin("nextPaymentDue", thrift.I64, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:nextPaymentDue: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NextPaymentDue)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nextPaymentDue (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:nextPaymentDue: ", p), err)
		}
	}
	return err
}

func (p *Accounting) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetPremiumLockUntil() {
		if err := oprot.WriteFieldBegin("premiumLockUntil", thrift.I64, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:premiumLockUntil: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.PremiumLockUntil)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.premiumLockUntil (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:premiumLockUntil: ", p), err)
		}
	}
	return err
}

func (p *Accounting) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdated() {
		if err := oprot.WriteFieldBegin("updated", thrift.I64, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:updated: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Updated)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updated (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:updated: ", p), err)
		}
	}
	return err
}

func (p *Accounting) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetPremiumSubscriptionNumber() {
		if err := oprot.WriteFieldBegin("premiumSubscriptionNumber", thrift.STRING, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:premiumSubscriptionNumber: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PremiumSubscriptionNumber)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.premiumSubscriptionNumber (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:premiumSubscriptionNumber: ", p), err)
		}
	}
	return err
}

func (p *Accounting) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastRequestedCharge() {
		if err := oprot.WriteFieldBegin("lastRequestedCharge", thrift.I64, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:lastRequestedCharge: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.LastRequestedCharge)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lastRequestedCharge (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:lastRequestedCharge: ", p), err)
		}
	}
	return err
}

func (p *Accounting) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrency() {
		if err := oprot.WriteFieldBegin("currency", thrift.STRING, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:currency: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Currency)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.currency (18) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:currency: ", p), err)
		}
	}
	return err
}

func (p *Accounting) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnitPrice() {
		if err := oprot.WriteFieldBegin("unitPrice", thrift.I32, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:unitPrice: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.UnitPrice)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.unitPrice (19) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:unitPrice: ", p), err)
		}
	}
	return err
}

func (p *Accounting) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetBusinessId() {
		if err := oprot.WriteFieldBegin("businessId", thrift.I32, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:businessId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.BusinessId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.businessId (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:businessId: ", p), err)
		}
	}
	return err
}

func (p *Accounting) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetBusinessName() {
		if err := oprot.WriteFieldBegin("businessName", thrift.STRING, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:businessName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.BusinessName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.businessName (21) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:businessName: ", p), err)
		}
	}
	return err
}

func (p *Accounting) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetBusinessRole() {
		if err := oprot.WriteFieldBegin("businessRole", thrift.I32, 22); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:businessRole: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.BusinessRole)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.businessRole (22) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 22:businessRole: ", p), err)
		}
	}
	return err
}

func (p *Accounting) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnitDiscount() {
		if err := oprot.WriteFieldBegin("unitDiscount", thrift.I32, 23); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:unitDiscount: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.UnitDiscount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.unitDiscount (23) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 23:unitDiscount: ", p), err)
		}
	}
	return err
}

func (p *Accounting) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextChargeDate() {
		if err := oprot.WriteFieldBegin("nextChargeDate", thrift.I64, 24); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:nextChargeDate: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NextChargeDate)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.nextChargeDate (24) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 24:nextChargeDate: ", p), err)
		}
	}
	return err
}

func (p *Accounting) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Accounting(%+v)", *p)
}

// This structure is used to provide information about an Evernote Business
// membership, for members who are part of a business.
//
// <dl>
// <dt>businessId</dt>
//   <dd>The ID of the Evernote Business account that the user is a member of.
// <dt>businessName</dt>
//   <dd>The human-readable name of the Evernote Business account that the user
//       is a member of.</dd>
// <dt>role</dt>
//   <dd>The role of the user within the Evernote Business account that
//       they are a member of.</dd>
// <dt>email</dt>
//   <dd>An e-mail address that will be used by the service in the context of your
//       Evernote Business activities.  For example, this e-mail address will be used
//       when you e-mail a business note, when you update notes in the account of
//       your business, etc.  The business e-mail cannot be used for identification
//       purposes such as for logging into the service.
//   </dd>
// </dl>
//
// Attributes:
//  - BusinessId
//  - BusinessName
//  - Role
//  - Email
type BusinessUserInfo struct {
	BusinessId   *int32            `thrift:"businessId,1" json:"businessId,omitempty"`
	BusinessName *string           `thrift:"businessName,2" json:"businessName,omitempty"`
	Role         *BusinessUserRole `thrift:"role,3" json:"role,omitempty"`
	Email        *string           `thrift:"email,4" json:"email,omitempty"`
}

func NewBusinessUserInfo() *BusinessUserInfo {
	return &BusinessUserInfo{}
}

var BusinessUserInfo_BusinessId_DEFAULT int32

func (p *BusinessUserInfo) GetBusinessId() int32 {
	if !p.IsSetBusinessId() {
		return BusinessUserInfo_BusinessId_DEFAULT
	}
	return *p.BusinessId
}

var BusinessUserInfo_BusinessName_DEFAULT string

func (p *BusinessUserInfo) GetBusinessName() string {
	if !p.IsSetBusinessName() {
		return BusinessUserInfo_BusinessName_DEFAULT
	}
	return *p.BusinessName
}

var BusinessUserInfo_Role_DEFAULT BusinessUserRole

func (p *BusinessUserInfo) GetRole() BusinessUserRole {
	if !p.IsSetRole() {
		return BusinessUserInfo_Role_DEFAULT
	}
	return *p.Role
}

var BusinessUserInfo_Email_DEFAULT string

func (p *BusinessUserInfo) GetEmail() string {
	if !p.IsSetEmail() {
		return BusinessUserInfo_Email_DEFAULT
	}
	return *p.Email
}
func (p *BusinessUserInfo) IsSetBusinessId() bool {
	return p.BusinessId != nil
}

func (p *BusinessUserInfo) IsSetBusinessName() bool {
	return p.BusinessName != nil
}

func (p *BusinessUserInfo) IsSetRole() bool {
	return p.Role != nil
}

func (p *BusinessUserInfo) IsSetEmail() bool {
	return p.Email != nil
}

func (p *BusinessUserInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BusinessUserInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.BusinessId = &v
	}
	return nil
}

func (p *BusinessUserInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.BusinessName = &v
	}
	return nil
}

func (p *BusinessUserInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := BusinessUserRole(v)
		p.Role = &temp
	}
	return nil
}

func (p *BusinessUserInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Email = &v
	}
	return nil
}

func (p *BusinessUserInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BusinessUserInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BusinessUserInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBusinessId() {
		if err := oprot.WriteFieldBegin("businessId", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:businessId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.BusinessId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.businessId (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:businessId: ", p), err)
		}
	}
	return err
}

func (p *BusinessUserInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetBusinessName() {
		if err := oprot.WriteFieldBegin("businessName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:businessName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.BusinessName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.businessName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:businessName: ", p), err)
		}
	}
	return err
}

func (p *BusinessUserInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRole() {
		if err := oprot.WriteFieldBegin("role", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:role: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Role)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.role (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:role: ", p), err)
		}
	}
	return err
}

func (p *BusinessUserInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmail() {
		if err := oprot.WriteFieldBegin("email", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:email: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Email)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.email (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:email: ", p), err)
		}
	}
	return err
}

func (p *BusinessUserInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BusinessUserInfo(%+v)", *p)
}

//  This structure is used to provide information about a user's Premium account.
// <dl>
//  <dt>currentTime</dt>
//    <dd>
//    The server-side date and time when this data was generated.
//    </dd>
//  <dt>premium</dt>
//    <dd>
//    True if the user's account is Premium.
//    </dd>
//  <dt>premiumRecurring</dt>
//    <dd>
//    True if the user's account is Premium and has a recurring payment method.
//    </dd>
//  <dt>premiumExpirationDate</dt>
//    <dd>
//    The date when the user's Premium account expires, or the date when the
//    user's account is due for payment if it has a recurring payment method.
//    </dd>
//  <dt>premiumExtendable</dt>
//    <dd>
//    True if the user is eligible for purchasing Premium account extensions.
//    </dd>
//  <dt>premiumPending</dt>
//    <dd>
//    True if the user's Premium account is pending payment confirmation
//    </dd>
//  <dt>premiumCancellationPending</dt>
//    <dd>
//    True if the user has requested that no further charges to be made; the
//    Premium account will remain active until it expires.
//    </dd>
//  <dt>canPurchaseUploadAllowance</dt>
//    <dd>
//    True if the user is eligible for purchasing additional upload allowance.
//    </dd>
//  <dt>sponsoredGroupName</dt>
//    <dd>
//    The name of the sponsored group that the user is part of.
//    </dd>
//  <dt>sponsoredGroupRole</dt>
//    <dd>
//    DEPRECATED - will be removed in a future update.
//    </dd>
//  <dt>premiumUpgradable</dt>
//    <dd>
//    True if the user is eligible for purchasing Premium account upgrade.
//    </dd>
//  </dl>
//
// Attributes:
//  - CurrentTime
//  - Premium
//  - PremiumRecurring
//  - PremiumExpirationDate
//  - PremiumExtendable
//  - PremiumPending
//  - PremiumCancellationPending
//  - CanPurchaseUploadAllowance
//  - SponsoredGroupName
//  - SponsoredGroupRole
//  - PremiumUpgradable
type PremiumInfo struct {
	CurrentTime                Timestamp           `thrift:"currentTime,1,required" json:"currentTime"`
	Premium                    bool                `thrift:"premium,2,required" json:"premium"`
	PremiumRecurring           bool                `thrift:"premiumRecurring,3,required" json:"premiumRecurring"`
	PremiumExpirationDate      *Timestamp          `thrift:"premiumExpirationDate,4" json:"premiumExpirationDate,omitempty"`
	PremiumExtendable          bool                `thrift:"premiumExtendable,5,required" json:"premiumExtendable"`
	PremiumPending             bool                `thrift:"premiumPending,6,required" json:"premiumPending"`
	PremiumCancellationPending bool                `thrift:"premiumCancellationPending,7,required" json:"premiumCancellationPending"`
	CanPurchaseUploadAllowance bool                `thrift:"canPurchaseUploadAllowance,8,required" json:"canPurchaseUploadAllowance"`
	SponsoredGroupName         *string             `thrift:"sponsoredGroupName,9" json:"sponsoredGroupName,omitempty"`
	SponsoredGroupRole         *SponsoredGroupRole `thrift:"sponsoredGroupRole,10" json:"sponsoredGroupRole,omitempty"`
	PremiumUpgradable          *bool               `thrift:"premiumUpgradable,11" json:"premiumUpgradable,omitempty"`
}

func NewPremiumInfo() *PremiumInfo {
	return &PremiumInfo{}
}

func (p *PremiumInfo) GetCurrentTime() Timestamp {
	return p.CurrentTime
}

func (p *PremiumInfo) GetPremium() bool {
	return p.Premium
}

func (p *PremiumInfo) GetPremiumRecurring() bool {
	return p.PremiumRecurring
}

var PremiumInfo_PremiumExpirationDate_DEFAULT Timestamp

func (p *PremiumInfo) GetPremiumExpirationDate() Timestamp {
	if !p.IsSetPremiumExpirationDate() {
		return PremiumInfo_PremiumExpirationDate_DEFAULT
	}
	return *p.PremiumExpirationDate
}

func (p *PremiumInfo) GetPremiumExtendable() bool {
	return p.PremiumExtendable
}

func (p *PremiumInfo) GetPremiumPending() bool {
	return p.PremiumPending
}

func (p *PremiumInfo) GetPremiumCancellationPending() bool {
	return p.PremiumCancellationPending
}

func (p *PremiumInfo) GetCanPurchaseUploadAllowance() bool {
	return p.CanPurchaseUploadAllowance
}

var PremiumInfo_SponsoredGroupName_DEFAULT string

func (p *PremiumInfo) GetSponsoredGroupName() string {
	if !p.IsSetSponsoredGroupName() {
		return PremiumInfo_SponsoredGroupName_DEFAULT
	}
	return *p.SponsoredGroupName
}

var PremiumInfo_SponsoredGroupRole_DEFAULT SponsoredGroupRole

func (p *PremiumInfo) GetSponsoredGroupRole() SponsoredGroupRole {
	if !p.IsSetSponsoredGroupRole() {
		return PremiumInfo_SponsoredGroupRole_DEFAULT
	}
	return *p.SponsoredGroupRole
}

var PremiumInfo_PremiumUpgradable_DEFAULT bool

func (p *PremiumInfo) GetPremiumUpgradable() bool {
	if !p.IsSetPremiumUpgradable() {
		return PremiumInfo_PremiumUpgradable_DEFAULT
	}
	return *p.PremiumUpgradable
}
func (p *PremiumInfo) IsSetPremiumExpirationDate() bool {
	return p.PremiumExpirationDate != nil
}

func (p *PremiumInfo) IsSetSponsoredGroupName() bool {
	return p.SponsoredGroupName != nil
}

func (p *PremiumInfo) IsSetSponsoredGroupRole() bool {
	return p.SponsoredGroupRole != nil
}

func (p *PremiumInfo) IsSetPremiumUpgradable() bool {
	return p.PremiumUpgradable != nil
}

func (p *PremiumInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetCurrentTime bool = false
	var issetPremium bool = false
	var issetPremiumRecurring bool = false
	var issetPremiumExtendable bool = false
	var issetPremiumPending bool = false
	var issetPremiumCancellationPending bool = false
	var issetCanPurchaseUploadAllowance bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetCurrentTime = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetPremium = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetPremiumRecurring = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetPremiumExtendable = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetPremiumPending = true
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
			issetPremiumCancellationPending = true
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
			issetCanPurchaseUploadAllowance = true
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetCurrentTime {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CurrentTime is not set"))
	}
	if !issetPremium {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Premium is not set"))
	}
	if !issetPremiumRecurring {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PremiumRecurring is not set"))
	}
	if !issetPremiumExtendable {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PremiumExtendable is not set"))
	}
	if !issetPremiumPending {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PremiumPending is not set"))
	}
	if !issetPremiumCancellationPending {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PremiumCancellationPending is not set"))
	}
	if !issetCanPurchaseUploadAllowance {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CanPurchaseUploadAllowance is not set"))
	}
	return nil
}

func (p *PremiumInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Timestamp(v)
		p.CurrentTime = temp
	}
	return nil
}

func (p *PremiumInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Premium = v
	}
	return nil
}

func (p *PremiumInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PremiumRecurring = v
	}
	return nil
}

func (p *PremiumInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := Timestamp(v)
		p.PremiumExpirationDate = &temp
	}
	return nil
}

func (p *PremiumInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.PremiumExtendable = v
	}
	return nil
}

func (p *PremiumInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.PremiumPending = v
	}
	return nil
}

func (p *PremiumInfo) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.PremiumCancellationPending = v
	}
	return nil
}

func (p *PremiumInfo) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.CanPurchaseUploadAllowance = v
	}
	return nil
}

func (p *PremiumInfo) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.SponsoredGroupName = &v
	}
	return nil
}

func (p *PremiumInfo) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := SponsoredGroupRole(v)
		p.SponsoredGroupRole = &temp
	}
	return nil
}

func (p *PremiumInfo) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.PremiumUpgradable = &v
	}
	return nil
}

func (p *PremiumInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PremiumInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PremiumInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currentTime", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:currentTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CurrentTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.currentTime (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:currentTime: ", p), err)
	}
	return err
}

func (p *PremiumInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("premium", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:premium: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Premium)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.premium (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:premium: ", p), err)
	}
	return err
}

func (p *PremiumInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("premiumRecurring", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:premiumRecurring: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PremiumRecurring)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.premiumRecurring (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:premiumRecurring: ", p), err)
	}
	return err
}

func (p *PremiumInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPremiumExpirationDate() {
		if err := oprot.WriteFieldBegin("premiumExpirationDate", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:premiumExpirationDate: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.PremiumExpirationDate)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.premiumExpirationDate (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:premiumExpirationDate: ", p), err)
		}
	}
	return err
}

func (p *PremiumInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("premiumExtendable", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:premiumExtendable: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PremiumExtendable)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.premiumExtendable (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:premiumExtendable: ", p), err)
	}
	return err
}

func (p *PremiumInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("premiumPending", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:premiumPending: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PremiumPending)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.premiumPending (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:premiumPending: ", p), err)
	}
	return err
}

func (p *PremiumInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("premiumCancellationPending", thrift.BOOL, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:premiumCancellationPending: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.PremiumCancellationPending)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.premiumCancellationPending (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:premiumCancellationPending: ", p), err)
	}
	return err
}

func (p *PremiumInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("canPurchaseUploadAllowance", thrift.BOOL, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:canPurchaseUploadAllowance: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.CanPurchaseUploadAllowance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.canPurchaseUploadAllowance (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:canPurchaseUploadAllowance: ", p), err)
	}
	return err
}

func (p *PremiumInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSponsoredGroupName() {
		if err := oprot.WriteFieldBegin("sponsoredGroupName", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:sponsoredGroupName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SponsoredGroupName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sponsoredGroupName (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:sponsoredGroupName: ", p), err)
		}
	}
	return err
}

func (p *PremiumInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetSponsoredGroupRole() {
		if err := oprot.WriteFieldBegin("sponsoredGroupRole", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:sponsoredGroupRole: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.SponsoredGroupRole)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sponsoredGroupRole (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:sponsoredGroupRole: ", p), err)
		}
	}
	return err
}

func (p *PremiumInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetPremiumUpgradable() {
		if err := oprot.WriteFieldBegin("premiumUpgradable", thrift.BOOL, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:premiumUpgradable: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.PremiumUpgradable)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.premiumUpgradable (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:premiumUpgradable: ", p), err)
		}
	}
	return err
}

func (p *PremiumInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PremiumInfo(%+v)", *p)
}

//  This represents the information about a single user account.
// <dl>
//  <dt>id</dt>
//    <dd>The unique numeric identifier for the account, which will not
//    change for the lifetime of the account.
//    </dd>
//
//  <dt>username</dt>
//    <dd>The name that uniquely identifies a single user account. This name
//    may be presented by the user, along with their password, to log into
//    their account.
//    May only contain a-z, 0-9, or '-', and may not start or end with the '-'
//    <br/>
//    Length:  EDAM_USER_USERNAME_LEN_MIN - EDAM_USER_USERNAME_LEN_MAX
//    <br/>
//    Regex:  EDAM_USER_USERNAME_REGEX
//    </dd>
//
//  <dt>email</dt>
//    <dd>The email address registered for the user.  Must comply with
//    RFC 2821 and RFC 2822.<br/>
//    Third party applications that authenticate using OAuth do not have
//    access to this field.
//    Length:  EDAM_EMAIL_LEN_MIN - EDAM_EMAIL_LEN_MAX
//    <br/>
//    Regex:  EDAM_EMAIL_REGEX
//    </dd>
//
//  <dt>name</dt>
//    <dd>The printable name of the user, which may be a combination
//    of given and family names.  This is used instead of separate "first"
//    and "last" names due to variations in international name format/order.
//    May not start or end with a whitespace character.  May contain any
//    character but carriage return or newline (Unicode classes Zl and Zp).
//    <br/>
//    Length:  EDAM_USER_NAME_LEN_MIN - EDAM_USER_NAME_LEN_MAX
//    <br/>
//    Regex:  EDAM_USER_NAME_REGEX
//    </dd>
//
//  <dt>timezone</dt>
//    <dd>The zone ID for the user's default location.  If present,
//    this may be used to localize the display of any timestamp for which no
//    other timezone is available.
//    The format must be encoded as a standard zone ID such as
//    "America/Los_Angeles" or "GMT+08:00"
//    <br/>
//    Length:  EDAM_TIMEZONE_LEN_MIN - EDAM_TIMEZONE_LEN_MAX
//    <br/>
//    Regex:  EDAM_TIMEZONE_REGEX
//    </dd>
//
//  <dt>privilege</dt>
//    <dd>The level of access permitted for the user.
//    </dd>
//
//  <dt>created</dt>
//    <dd>The date and time when this user account was created in the
//    service.
//    </dd>
//
//  <dt>updated</dt>
//    <dd>The date and time when this user account was last modified
//    in the service.
//    </dd>
//
//  <dt>deleted</dt>
//    <dd>If the account has been deleted from the system (e.g. as
//    the result of a legal request by the user), the date and time of the
//    deletion will be represented here.  If not, this value will not be set.
//    </dd>
//
//  <dt>active</dt>
//    <dd>If the user account is available for login and
//    synchronization, this flag will be set to true.
//    </dd>
//
//  <dt>shardId</dt>
//    <dd>DEPRECATED - Client applications should have no need to use this field.
//    </dd>
//
//  <dt>attributes</dt>
//    <dd>If present, this will contain a list of the attributes
//    for this user account.
//    </dd>
//
//  <dt>accounting</dt>
//    <dd>Bookkeeping information for the user's subscription.
//    </dd>
//
//  <dt>premiumInfo</dt>
//    <dd>If present, this will contain a set of commerce information
//    relating to the user's premium service level.
//    </dd>
//
//  <dt>businessUserInfo</dt>
//    <dd>If present, this will contain a set of business information
//    relating to the user's business membership.  If not present, the
//    user is not currently part of a business.
//    </dd>
//  </dl>
//
// Attributes:
//  - ID
//  - Username
//  - Email
//  - Name
//  - Timezone
//  - Privilege
//  - Created
//  - Updated
//  - Deleted
//  - Active
//  - ShardId
//  - Attributes
//  - Accounting
//  - PremiumInfo
//  - BusinessUserInfo
type User struct {
	ID       *UserID `thrift:"id,1" json:"id,omitempty"`
	Username *string `thrift:"username,2" json:"username,omitempty"`
	Email    *string `thrift:"email,3" json:"email,omitempty"`
	Name     *string `thrift:"name,4" json:"name,omitempty"`
	// unused field # 5
	Timezone  *string         `thrift:"timezone,6" json:"timezone,omitempty"`
	Privilege *PrivilegeLevel `thrift:"privilege,7" json:"privilege,omitempty"`
	// unused field # 8
	Created *Timestamp `thrift:"created,9" json:"created,omitempty"`
	Updated *Timestamp `thrift:"updated,10" json:"updated,omitempty"`
	Deleted *Timestamp `thrift:"deleted,11" json:"deleted,omitempty"`
	// unused field # 12
	Active           *bool             `thrift:"active,13" json:"active,omitempty"`
	ShardId          *string           `thrift:"shardId,14" json:"shardId,omitempty"`
	Attributes       *UserAttributes   `thrift:"attributes,15" json:"attributes,omitempty"`
	Accounting       *Accounting       `thrift:"accounting,16" json:"accounting,omitempty"`
	PremiumInfo      *PremiumInfo      `thrift:"premiumInfo,17" json:"premiumInfo,omitempty"`
	BusinessUserInfo *BusinessUserInfo `thrift:"businessUserInfo,18" json:"businessUserInfo,omitempty"`
}

func NewUser() *User {
	return &User{}
}

var User_ID_DEFAULT UserID

func (p *User) GetID() UserID {
	if !p.IsSetID() {
		return User_ID_DEFAULT
	}
	return *p.ID
}

var User_Username_DEFAULT string

func (p *User) GetUsername() string {
	if !p.IsSetUsername() {
		return User_Username_DEFAULT
	}
	return *p.Username
}

var User_Email_DEFAULT string

func (p *User) GetEmail() string {
	if !p.IsSetEmail() {
		return User_Email_DEFAULT
	}
	return *p.Email
}

var User_Name_DEFAULT string

func (p *User) GetName() string {
	if !p.IsSetName() {
		return User_Name_DEFAULT
	}
	return *p.Name
}

var User_Timezone_DEFAULT string

func (p *User) GetTimezone() string {
	if !p.IsSetTimezone() {
		return User_Timezone_DEFAULT
	}
	return *p.Timezone
}

var User_Privilege_DEFAULT PrivilegeLevel

func (p *User) GetPrivilege() PrivilegeLevel {
	if !p.IsSetPrivilege() {
		return User_Privilege_DEFAULT
	}
	return *p.Privilege
}

var User_Created_DEFAULT Timestamp

func (p *User) GetCreated() Timestamp {
	if !p.IsSetCreated() {
		return User_Created_DEFAULT
	}
	return *p.Created
}

var User_Updated_DEFAULT Timestamp

func (p *User) GetUpdated() Timestamp {
	if !p.IsSetUpdated() {
		return User_Updated_DEFAULT
	}
	return *p.Updated
}

var User_Deleted_DEFAULT Timestamp

func (p *User) GetDeleted() Timestamp {
	if !p.IsSetDeleted() {
		return User_Deleted_DEFAULT
	}
	return *p.Deleted
}

var User_Active_DEFAULT bool

func (p *User) GetActive() bool {
	if !p.IsSetActive() {
		return User_Active_DEFAULT
	}
	return *p.Active
}

var User_ShardId_DEFAULT string

func (p *User) GetShardId() string {
	if !p.IsSetShardId() {
		return User_ShardId_DEFAULT
	}
	return *p.ShardId
}

var User_Attributes_DEFAULT *UserAttributes

func (p *User) GetAttributes() *UserAttributes {
	if !p.IsSetAttributes() {
		return User_Attributes_DEFAULT
	}
	return p.Attributes
}

var User_Accounting_DEFAULT *Accounting

func (p *User) GetAccounting() *Accounting {
	if !p.IsSetAccounting() {
		return User_Accounting_DEFAULT
	}
	return p.Accounting
}

var User_PremiumInfo_DEFAULT *PremiumInfo

func (p *User) GetPremiumInfo() *PremiumInfo {
	if !p.IsSetPremiumInfo() {
		return User_PremiumInfo_DEFAULT
	}
	return p.PremiumInfo
}

var User_BusinessUserInfo_DEFAULT *BusinessUserInfo

func (p *User) GetBusinessUserInfo() *BusinessUserInfo {
	if !p.IsSetBusinessUserInfo() {
		return User_BusinessUserInfo_DEFAULT
	}
	return p.BusinessUserInfo
}
func (p *User) IsSetID() bool {
	return p.ID != nil
}

func (p *User) IsSetUsername() bool {
	return p.Username != nil
}

func (p *User) IsSetEmail() bool {
	return p.Email != nil
}

func (p *User) IsSetName() bool {
	return p.Name != nil
}

func (p *User) IsSetTimezone() bool {
	return p.Timezone != nil
}

func (p *User) IsSetPrivilege() bool {
	return p.Privilege != nil
}

func (p *User) IsSetCreated() bool {
	return p.Created != nil
}

func (p *User) IsSetUpdated() bool {
	return p.Updated != nil
}

func (p *User) IsSetDeleted() bool {
	return p.Deleted != nil
}

func (p *User) IsSetActive() bool {
	return p.Active != nil
}

func (p *User) IsSetShardId() bool {
	return p.ShardId != nil
}

func (p *User) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *User) IsSetAccounting() bool {
	return p.Accounting != nil
}

func (p *User) IsSetPremiumInfo() bool {
	return p.PremiumInfo != nil
}

func (p *User) IsSetBusinessUserInfo() bool {
	return p.BusinessUserInfo != nil
}

func (p *User) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *User) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := UserID(v)
		p.ID = &temp
	}
	return nil
}

func (p *User) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Username = &v
	}
	return nil
}

func (p *User) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Email = &v
	}
	return nil
}

func (p *User) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *User) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Timezone = &v
	}
	return nil
}

func (p *User) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := PrivilegeLevel(v)
		p.Privilege = &temp
	}
	return nil
}

func (p *User) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		temp := Timestamp(v)
		p.Created = &temp
	}
	return nil
}

func (p *User) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := Timestamp(v)
		p.Updated = &temp
	}
	return nil
}

func (p *User) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		temp := Timestamp(v)
		p.Deleted = &temp
	}
	return nil
}

func (p *User) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Active = &v
	}
	return nil
}

func (p *User) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.ShardId = &v
	}
	return nil
}

func (p *User) readField15(iprot thrift.TProtocol) error {
	p.Attributes = &UserAttributes{}
	if err := p.Attributes.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Attributes), err)
	}
	return nil
}

func (p *User) readField16(iprot thrift.TProtocol) error {
	p.Accounting = &Accounting{}
	if err := p.Accounting.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Accounting), err)
	}
	return nil
}

func (p *User) readField17(iprot thrift.TProtocol) error {
	p.PremiumInfo = &PremiumInfo{}
	if err := p.PremiumInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PremiumInfo), err)
	}
	return nil
}

func (p *User) readField18(iprot thrift.TProtocol) error {
	p.BusinessUserInfo = &BusinessUserInfo{}
	if err := p.BusinessUserInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BusinessUserInfo), err)
	}
	return nil
}

func (p *User) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("User"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *User) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
		}
	}
	return err
}

func (p *User) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Username)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err)
		}
	}
	return err
}

func (p *User) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmail() {
		if err := oprot.WriteFieldBegin("email", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:email: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Email)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.email (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:email: ", p), err)
		}
	}
	return err
}

func (p *User) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:name: ", p), err)
		}
	}
	return err
}

func (p *User) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimezone() {
		if err := oprot.WriteFieldBegin("timezone", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:timezone: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Timezone)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timezone (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:timezone: ", p), err)
		}
	}
	return err
}

func (p *User) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivilege() {
		if err := oprot.WriteFieldBegin("privilege", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:privilege: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Privilege)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.privilege (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:privilege: ", p), err)
		}
	}
	return err
}

func (p *User) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreated() {
		if err := oprot.WriteFieldBegin("created", thrift.I64, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:created: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Created)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.created (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:created: ", p), err)
		}
	}
	return err
}

func (p *User) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdated() {
		if err := oprot.WriteFieldBegin("updated", thrift.I64, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:updated: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Updated)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updated (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:updated: ", p), err)
		}
	}
	return err
}

func (p *User) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeleted() {
		if err := oprot.WriteFieldBegin("deleted", thrift.I64, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:deleted: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Deleted)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.deleted (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:deleted: ", p), err)
		}
	}
	return err
}

func (p *User) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetActive() {
		if err := oprot.WriteFieldBegin("active", thrift.BOOL, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:active: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Active)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.active (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:active: ", p), err)
		}
	}
	return err
}

func (p *User) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetShardId() {
		if err := oprot.WriteFieldBegin("shardId", thrift.STRING, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:shardId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ShardId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.shardId (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:shardId: ", p), err)
		}
	}
	return err
}

func (p *User) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.STRUCT, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:attributes: ", p), err)
		}
		if err := p.Attributes.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Attributes), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:attributes: ", p), err)
		}
	}
	return err
}

func (p *User) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccounting() {
		if err := oprot.WriteFieldBegin("accounting", thrift.STRUCT, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:accounting: ", p), err)
		}
		if err := p.Accounting.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Accounting), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:accounting: ", p), err)
		}
	}
	return err
}

func (p *User) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetPremiumInfo() {
		if err := oprot.WriteFieldBegin("premiumInfo", thrift.STRUCT, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:premiumInfo: ", p), err)
		}
		if err := p.PremiumInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PremiumInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:premiumInfo: ", p), err)
		}
	}
	return err
}

func (p *User) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetBusinessUserInfo() {
		if err := oprot.WriteFieldBegin("businessUserInfo", thrift.STRUCT, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:businessUserInfo: ", p), err)
		}
		if err := p.BusinessUserInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BusinessUserInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:businessUserInfo: ", p), err)
		}
	}
	return err
}

func (p *User) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("User(%+v)", *p)
}

//  A tag within a user's account is a unique name which may be organized
//  a simple hierarchy.
// <dl>
//  <dt>guid</dt>
//    <dd>The unique identifier of this tag. Will be set by the service,
//    so may be omitted by the client when creating the Tag.
//    <br/>
//    Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
//    <br/>
//    Regex:  EDAM_GUID_REGEX
//    </dd>
//
//  <dt>name</dt>
//    <dd>A sequence of characters representing the tag's identifier.
//    Case is preserved, but is ignored for comparisons.
//    This means that an account may only have one tag with a given name, via
//    case-insensitive comparison, so an account may not have both "food" and
//    "Food" tags.
//    May not contain a comma (','), and may not begin or end with a space.
//    <br/>
//    Length:  EDAM_TAG_NAME_LEN_MIN - EDAM_TAG_NAME_LEN_MAX
//    <br/>
//    Regex:  EDAM_TAG_NAME_REGEX
//    </dd>
//
//  <dt>parentGuid</dt>
//    <dd>If this is set, then this is the GUID of the tag that
//    holds this tag within the tag organizational hierarchy.  If this is
//    not set, then the tag has no parent and it is a "top level" tag.
//    Cycles are not allowed (e.g. a->parent->parent == a) and will be
//    rejected by the service.
//    <br/>
//    Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
//    <br/>
//    Regex:  EDAM_GUID_REGEX
//    </dd>
//
//  <dt>updateSequenceNum</dt>
//    <dd>A number identifying the last transaction to
//    modify the state of this object.  The USN values are sequential within an
//    account, and can be used to compare the order of modifications within the
//    service.
//    </dd>
//  </dl>
//
// Attributes:
//  - GUID
//  - Name
//  - ParentGuid
//  - UpdateSequenceNum
type Tag struct {
	GUID              *GUID   `thrift:"guid,1" json:"guid,omitempty"`
	Name              *string `thrift:"name,2" json:"name,omitempty"`
	ParentGuid        *GUID   `thrift:"parentGuid,3" json:"parentGuid,omitempty"`
	UpdateSequenceNum *int32  `thrift:"updateSequenceNum,4" json:"updateSequenceNum,omitempty"`
}

func NewTag() *Tag {
	return &Tag{}
}

var Tag_GUID_DEFAULT GUID

func (p *Tag) GetGUID() GUID {
	if !p.IsSetGUID() {
		return Tag_GUID_DEFAULT
	}
	return *p.GUID
}

var Tag_Name_DEFAULT string

func (p *Tag) GetName() string {
	if !p.IsSetName() {
		return Tag_Name_DEFAULT
	}
	return *p.Name
}

var Tag_ParentGuid_DEFAULT GUID

func (p *Tag) GetParentGuid() GUID {
	if !p.IsSetParentGuid() {
		return Tag_ParentGuid_DEFAULT
	}
	return *p.ParentGuid
}

var Tag_UpdateSequenceNum_DEFAULT int32

func (p *Tag) GetUpdateSequenceNum() int32 {
	if !p.IsSetUpdateSequenceNum() {
		return Tag_UpdateSequenceNum_DEFAULT
	}
	return *p.UpdateSequenceNum
}
func (p *Tag) IsSetGUID() bool {
	return p.GUID != nil
}

func (p *Tag) IsSetName() bool {
	return p.Name != nil
}

func (p *Tag) IsSetParentGuid() bool {
	return p.ParentGuid != nil
}

func (p *Tag) IsSetUpdateSequenceNum() bool {
	return p.UpdateSequenceNum != nil
}

func (p *Tag) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Tag) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := GUID(v)
		p.GUID = &temp
	}
	return nil
}

func (p *Tag) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *Tag) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := GUID(v)
		p.ParentGuid = &temp
	}
	return nil
}

func (p *Tag) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.UpdateSequenceNum = &v
	}
	return nil
}

func (p *Tag) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Tag"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Tag) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGUID() {
		if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:guid: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.guid (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:guid: ", p), err)
		}
	}
	return err
}

func (p *Tag) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
		}
	}
	return err
}

func (p *Tag) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetParentGuid() {
		if err := oprot.WriteFieldBegin("parentGuid", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parentGuid: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ParentGuid)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.parentGuid (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parentGuid: ", p), err)
		}
	}
	return err
}

func (p *Tag) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateSequenceNum() {
		if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:updateSequenceNum: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.UpdateSequenceNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updateSequenceNum (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:updateSequenceNum: ", p), err)
		}
	}
	return err
}

func (p *Tag) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Tag(%+v)", *p)
}

// A structure that wraps a map of name/value pairs whose values are not
// always present in the structure in order to reduce space when obtaining
// batches of entities that contain the map.
//
// When the server provides the client with a LazyMap, it will fill in either
// the keysOnly field or the fullMap field, but never both, based on the API
// and parameters.
//
// When a client provides a LazyMap to the server as part of an update to
// an object, the server will only update the LazyMap if the fullMap field is
// set. If the fullMap field is not set, the server will not make any changes
// to the map.
//
// Check the API documentation of the individual calls involving the LazyMap
// for full details including the constraints of the names and values of the
// map.
//
// <dl>
// <dt>keysOnly</dt>
//   <dd>The set of keys for the map.  This field is ignored by the
//       server when set.
//   </dd>
//
// <dt>fullMap</dt>
//   <dd>The complete map, including all keys and values.
//   </dd>
// </dl>
//
// Attributes:
//  - KeysOnly
//  - FullMap
type LazyMap struct {
	KeysOnly map[string]bool   `thrift:"keysOnly,1" json:"keysOnly,omitempty"`
	FullMap  map[string]string `thrift:"fullMap,2" json:"fullMap,omitempty"`
}

func NewLazyMap() *LazyMap {
	return &LazyMap{}
}

var LazyMap_KeysOnly_DEFAULT map[string]bool

func (p *LazyMap) GetKeysOnly() map[string]bool {
	return p.KeysOnly
}

var LazyMap_FullMap_DEFAULT map[string]string

func (p *LazyMap) GetFullMap() map[string]string {
	return p.FullMap
}
func (p *LazyMap) IsSetKeysOnly() bool {
	return p.KeysOnly != nil
}

func (p *LazyMap) IsSetFullMap() bool {
	return p.FullMap != nil
}

func (p *LazyMap) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LazyMap) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.KeysOnly = tSet
	for i := 0; i < size; i++ {
		var _elem2 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem2 = v
		}
		p.KeysOnly[_elem2] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *LazyMap) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.FullMap = tMap
	for i := 0; i < size; i++ {
		var _key3 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key3 = v
		}
		var _val4 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val4 = v
		}
		p.FullMap[_key3] = _val4
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *LazyMap) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LazyMap"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LazyMap) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeysOnly() {
		if err := oprot.WriteFieldBegin("keysOnly", thrift.SET, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keysOnly: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(p.KeysOnly)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.KeysOnly {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keysOnly: ", p), err)
		}
	}
	return err
}

func (p *LazyMap) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFullMap() {
		if err := oprot.WriteFieldBegin("fullMap", thrift.MAP, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fullMap: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.FullMap)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.FullMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fullMap: ", p), err)
		}
	}
	return err
}

func (p *LazyMap) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LazyMap(%+v)", *p)
}

// Structure holding the optional attributes of a Resource
// <dl>
// <dt>sourceURL</dt>
//   <dd>the original location where the resource was hosted
//   <br/>
//    Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
//   </dd>
//
// <dt>timestamp</dt>
//   <dd>the date and time that is associated with this resource
//   (e.g. the time embedded in an image from a digital camera with a clock)
//   </dd>
//
// <dt>latitude</dt>
//   <dd>the latitude where the resource was captured
//   </dd>
//
// <dt>longitude</dt>
//   <dd>the longitude where the resource was captured
//   </dd>
//
// <dt>altitude</dt>
//   <dd>the altitude where the resource was captured
//   </dd>
//
// <dt>cameraMake</dt>
//   <dd>information about an image's camera, e.g. as embedded in
//   the image's EXIF data
//   <br/>
//   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
//   </dd>
//
// <dt>cameraModel</dt>
//   <dd>information about an image's camera, e.g. as embedded
//   in the image's EXIF data
//   <br/>
//   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
//   </dd>
//
// <dt>clientWillIndex</dt>
//   <dd>if true, then the original client that submitted
//   the resource plans to submit the recognition index for this resource at a
//   later time.
//   </dd>
//
// <dt>recoType</dt>
//   <dd>DEPRECATED - this field is no longer set by the service, so should
//     be ignored.
//   </dd>
//
// <dt>fileName</dt>
//   <dd>if the resource came from a source that provided an
//   explicit file name, the original name will be stored here.  Many resources
//   come from unnamed sources, so this will not always be set.
//   </dd>
//
// <dt>attachment</dt>
//   <dd>this will be true if the resource should be displayed as an attachment,
//   or false if the resource should be displayed inline (if possible).
//   </dd>
//
// <dt>applicationData</dt>
// <dd>Provides a location for applications to store a relatively small
// (4kb) blob of data associated with a Resource that is not visible to the user
// and that is opaque to the Evernote service. A single application may use at most
// one entry in this map, using its API consumer key as the map key. See the
// documentation for LazyMap for a description of when the actual map values
// are returned by the service.
// <p>To safely add or modify your application's entry in the map, use
// NoteStore.setResourceApplicationDataEntry. To safely remove your application's
// entry from the map, use NoteStore.unsetResourceApplicationDataEntry.</p>
// Minimum length of a name (key): EDAM_APPLICATIONDATA_NAME_LEN_MIN
// <br/>
// Sum max size of key and value: EDAM_APPLICATIONDATA_ENTRY_LEN_MAX
// <br/>
// Syntax regex for name (key): EDAM_APPLICATIONDATA_NAME_REGEX
// </dd>
//
// </dl>
//
// Attributes:
//  - SourceURL
//  - Timestamp
//  - Latitude
//  - Longitude
//  - Altitude
//  - CameraMake
//  - CameraModel
//  - ClientWillIndex
//  - RecoType
//  - FileName
//  - Attachment
//  - ApplicationData
type ResourceAttributes struct {
	SourceURL       *string    `thrift:"sourceURL,1" json:"sourceURL,omitempty"`
	Timestamp       *Timestamp `thrift:"timestamp,2" json:"timestamp,omitempty"`
	Latitude        *float64   `thrift:"latitude,3" json:"latitude,omitempty"`
	Longitude       *float64   `thrift:"longitude,4" json:"longitude,omitempty"`
	Altitude        *float64   `thrift:"altitude,5" json:"altitude,omitempty"`
	CameraMake      *string    `thrift:"cameraMake,6" json:"cameraMake,omitempty"`
	CameraModel     *string    `thrift:"cameraModel,7" json:"cameraModel,omitempty"`
	ClientWillIndex *bool      `thrift:"clientWillIndex,8" json:"clientWillIndex,omitempty"`
	RecoType        *string    `thrift:"recoType,9" json:"recoType,omitempty"`
	FileName        *string    `thrift:"fileName,10" json:"fileName,omitempty"`
	Attachment      *bool      `thrift:"attachment,11" json:"attachment,omitempty"`
	ApplicationData *LazyMap   `thrift:"applicationData,12" json:"applicationData,omitempty"`
}

func NewResourceAttributes() *ResourceAttributes {
	return &ResourceAttributes{}
}

var ResourceAttributes_SourceURL_DEFAULT string

func (p *ResourceAttributes) GetSourceURL() string {
	if !p.IsSetSourceURL() {
		return ResourceAttributes_SourceURL_DEFAULT
	}
	return *p.SourceURL
}

var ResourceAttributes_Timestamp_DEFAULT Timestamp

func (p *ResourceAttributes) GetTimestamp() Timestamp {
	if !p.IsSetTimestamp() {
		return ResourceAttributes_Timestamp_DEFAULT
	}
	return *p.Timestamp
}

var ResourceAttributes_Latitude_DEFAULT float64

func (p *ResourceAttributes) GetLatitude() float64 {
	if !p.IsSetLatitude() {
		return ResourceAttributes_Latitude_DEFAULT
	}
	return *p.Latitude
}

var ResourceAttributes_Longitude_DEFAULT float64

func (p *ResourceAttributes) GetLongitude() float64 {
	if !p.IsSetLongitude() {
		return ResourceAttributes_Longitude_DEFAULT
	}
	return *p.Longitude
}

var ResourceAttributes_Altitude_DEFAULT float64

func (p *ResourceAttributes) GetAltitude() float64 {
	if !p.IsSetAltitude() {
		return ResourceAttributes_Altitude_DEFAULT
	}
	return *p.Altitude
}

var ResourceAttributes_CameraMake_DEFAULT string

func (p *ResourceAttributes) GetCameraMake() string {
	if !p.IsSetCameraMake() {
		return ResourceAttributes_CameraMake_DEFAULT
	}
	return *p.CameraMake
}

var ResourceAttributes_CameraModel_DEFAULT string

func (p *ResourceAttributes) GetCameraModel() string {
	if !p.IsSetCameraModel() {
		return ResourceAttributes_CameraModel_DEFAULT
	}
	return *p.CameraModel
}

var ResourceAttributes_ClientWillIndex_DEFAULT bool

func (p *ResourceAttributes) GetClientWillIndex() bool {
	if !p.IsSetClientWillIndex() {
		return ResourceAttributes_ClientWillIndex_DEFAULT
	}
	return *p.ClientWillIndex
}

var ResourceAttributes_RecoType_DEFAULT string

func (p *ResourceAttributes) GetRecoType() string {
	if !p.IsSetRecoType() {
		return ResourceAttributes_RecoType_DEFAULT
	}
	return *p.RecoType
}

var ResourceAttributes_FileName_DEFAULT string

func (p *ResourceAttributes) GetFileName() string {
	if !p.IsSetFileName() {
		return ResourceAttributes_FileName_DEFAULT
	}
	return *p.FileName
}

var ResourceAttributes_Attachment_DEFAULT bool

func (p *ResourceAttributes) GetAttachment() bool {
	if !p.IsSetAttachment() {
		return ResourceAttributes_Attachment_DEFAULT
	}
	return *p.Attachment
}

var ResourceAttributes_ApplicationData_DEFAULT *LazyMap

func (p *ResourceAttributes) GetApplicationData() *LazyMap {
	if !p.IsSetApplicationData() {
		return ResourceAttributes_ApplicationData_DEFAULT
	}
	return p.ApplicationData
}
func (p *ResourceAttributes) IsSetSourceURL() bool {
	return p.SourceURL != nil
}

func (p *ResourceAttributes) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *ResourceAttributes) IsSetLatitude() bool {
	return p.Latitude != nil
}

func (p *ResourceAttributes) IsSetLongitude() bool {
	return p.Longitude != nil
}

func (p *ResourceAttributes) IsSetAltitude() bool {
	return p.Altitude != nil
}

func (p *ResourceAttributes) IsSetCameraMake() bool {
	return p.CameraMake != nil
}

func (p *ResourceAttributes) IsSetCameraModel() bool {
	return p.CameraModel != nil
}

func (p *ResourceAttributes) IsSetClientWillIndex() bool {
	return p.ClientWillIndex != nil
}

func (p *ResourceAttributes) IsSetRecoType() bool {
	return p.RecoType != nil
}

func (p *ResourceAttributes) IsSetFileName() bool {
	return p.FileName != nil
}

func (p *ResourceAttributes) IsSetAttachment() bool {
	return p.Attachment != nil
}

func (p *ResourceAttributes) IsSetApplicationData() bool {
	return p.ApplicationData != nil
}

func (p *ResourceAttributes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ResourceAttributes) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SourceURL = &v
	}
	return nil
}

func (p *ResourceAttributes) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Timestamp(v)
		p.Timestamp = &temp
	}
	return nil
}

func (p *ResourceAttributes) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Latitude = &v
	}
	return nil
}

func (p *ResourceAttributes) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Longitude = &v
	}
	return nil
}

func (p *ResourceAttributes) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Altitude = &v
	}
	return nil
}

func (p *ResourceAttributes) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.CameraMake = &v
	}
	return nil
}

func (p *ResourceAttributes) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.CameraModel = &v
	}
	return nil
}

func (p *ResourceAttributes) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.ClientWillIndex = &v
	}
	return nil
}

func (p *ResourceAttributes) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.RecoType = &v
	}
	return nil
}

func (p *ResourceAttributes) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.FileName = &v
	}
	return nil
}

func (p *ResourceAttributes) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Attachment = &v
	}
	return nil
}

func (p *ResourceAttributes) readField12(iprot thrift.TProtocol) error {
	p.ApplicationData = &LazyMap{}
	if err := p.ApplicationData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ApplicationData), err)
	}
	return nil
}

func (p *ResourceAttributes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ResourceAttributes"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ResourceAttributes) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceURL() {
		if err := oprot.WriteFieldBegin("sourceURL", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sourceURL: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SourceURL)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sourceURL (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sourceURL: ", p), err)
		}
	}
	return err
}

func (p *ResourceAttributes) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timestamp: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timestamp (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timestamp: ", p), err)
		}
	}
	return err
}

func (p *ResourceAttributes) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLatitude() {
		if err := oprot.WriteFieldBegin("latitude", thrift.DOUBLE, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:latitude: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.Latitude)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.latitude (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:latitude: ", p), err)
		}
	}
	return err
}

func (p *ResourceAttributes) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetLongitude() {
		if err := oprot.WriteFieldBegin("longitude", thrift.DOUBLE, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:longitude: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.Longitude)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.longitude (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:longitude: ", p), err)
		}
	}
	return err
}

func (p *ResourceAttributes) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAltitude() {
		if err := oprot.WriteFieldBegin("altitude", thrift.DOUBLE, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:altitude: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.Altitude)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.altitude (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:altitude: ", p), err)
		}
	}
	return err
}

func (p *ResourceAttributes) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCameraMake() {
		if err := oprot.WriteFieldBegin("cameraMake", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:cameraMake: ", p), err)
		}
		if err := oprot.WriteString(string(*p.CameraMake)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cameraMake (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:cameraMake: ", p), err)
		}
	}
	return err
}

func (p *ResourceAttributes) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCameraModel() {
		if err := oprot.WriteFieldBegin("cameraModel", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:cameraModel: ", p), err)
		}
		if err := oprot.WriteString(string(*p.CameraModel)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.cameraModel (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:cameraModel: ", p), err)
		}
	}
	return err
}

func (p *ResourceAttributes) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetClientWillIndex() {
		if err := oprot.WriteFieldBegin("clientWillIndex", thrift.BOOL, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:clientWillIndex: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.ClientWillIndex)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.clientWillIndex (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:clientWillIndex: ", p), err)
		}
	}
	return err
}

func (p *ResourceAttributes) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecoType() {
		if err := oprot.WriteFieldBegin("recoType", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:recoType: ", p), err)
		}
		if err := oprot.WriteString(string(*p.RecoType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.recoType (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:recoType: ", p), err)
		}
	}
	return err
}

func (p *ResourceAttributes) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileName() {
		if err := oprot.WriteFieldBegin("fileName", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:fileName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.FileName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fileName (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:fileName: ", p), err)
		}
	}
	return err
}

func (p *ResourceAttributes) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttachment() {
		if err := oprot.WriteFieldBegin("attachment", thrift.BOOL, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:attachment: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Attachment)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.attachment (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:attachment: ", p), err)
		}
	}
	return err
}

func (p *ResourceAttributes) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetApplicationData() {
		if err := oprot.WriteFieldBegin("applicationData", thrift.STRUCT, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:applicationData: ", p), err)
		}
		if err := p.ApplicationData.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ApplicationData), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:applicationData: ", p), err)
		}
	}
	return err
}

func (p *ResourceAttributes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResourceAttributes(%+v)", *p)
}

// Every media file that is embedded or attached to a note is represented
// through a Resource entry.
// <dl>
// <dt>guid</dt>
//   <dd>The unique identifier of this resource.  Will be set whenever
//   a resource is retrieved from the service, but may be null when a client
//   is creating a resource.
//   <br/>
//   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
//   <br/>
//   Regex:  EDAM_GUID_REGEX
//   </dd>
//
// <dt>noteGuid</dt>
//   <dd>The unique identifier of the Note that holds this
//   Resource. Will be set whenever the resource is retrieved from the service,
//   but may be null when a client is creating a resource.
//   <br/>
//   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
//   <br/>
//   Regex:  EDAM_GUID_REGEX
//   </dd>
//
// <dt>data</dt>
//   <dd>The contents of the resource.
//   Maximum length:  The data.body is limited to EDAM_RESOURCE_SIZE_MAX_FREE
//   for free accounts and EDAM_RESOURCE_SIZE_MAX_PREMIUM for premium accounts.
//   </dd>
//
// <dt>mime</dt>
//   <dd>The MIME type for the embedded resource.  E.g. "image/gif"
//   <br/>
//   Length:  EDAM_MIME_LEN_MIN - EDAM_MIME_LEN_MAX
//   <br/>
//   Regex:  EDAM_MIME_REGEX
//   </dd>
//
// <dt>width</dt>
//   <dd>If set, this contains the display width of this resource, in
//   pixels.
//   </dd>
//
// <dt>height</dt>
//   <dd>If set, this contains the display height of this resource,
//   in pixels.
//   </dd>
//
// <dt>duration</dt>
//   <dd>DEPRECATED: ignored.
//   </dd>
//
// <dt>active</dt>
//   <dd>DEPRECATED: ignored.
//   </dd>
//
// <dt>recognition</dt>
//   <dd>If set, this will hold the encoded data that provides
//   information on search and recognition within this resource.
//   </dd>
//
// <dt>attributes</dt>
//   <dd>A list of the attributes for this resource.
//   </dd>
//
// <dt>updateSequenceNum</dt>
//   <dd>A number identifying the last transaction to
//   modify the state of this object. The USN values are sequential within an
//   account, and can be used to compare the order of modifications within the
//   service.
//   </dd>
//
// <dt>alternateData</dt>
//   <dd>Some Resources may be assigned an alternate data format by the service
//   which may be more appropriate for indexing or rendering than the original
//   data provided by the user.  In these cases, the alternate data form will
//   be available via this Data element.  If a Resource has no alternate form,
//   this field will be unset.</dd>
// </dl>
//
// Attributes:
//  - GUID
//  - NoteGuid
//  - Data
//  - Mime
//  - Width
//  - Height
//  - Duration
//  - Active
//  - Recognition
//  - Attributes
//  - UpdateSequenceNum
//  - AlternateData
type Resource struct {
	GUID        *GUID   `thrift:"guid,1" json:"guid,omitempty"`
	NoteGuid    *GUID   `thrift:"noteGuid,2" json:"noteGuid,omitempty"`
	Data        *Data   `thrift:"data,3" json:"data,omitempty"`
	Mime        *string `thrift:"mime,4" json:"mime,omitempty"`
	Width       *int16  `thrift:"width,5" json:"width,omitempty"`
	Height      *int16  `thrift:"height,6" json:"height,omitempty"`
	Duration    *int16  `thrift:"duration,7" json:"duration,omitempty"`
	Active      *bool   `thrift:"active,8" json:"active,omitempty"`
	Recognition *Data   `thrift:"recognition,9" json:"recognition,omitempty"`
	// unused field # 10
	Attributes        *ResourceAttributes `thrift:"attributes,11" json:"attributes,omitempty"`
	UpdateSequenceNum *int32              `thrift:"updateSequenceNum,12" json:"updateSequenceNum,omitempty"`
	AlternateData     *Data               `thrift:"alternateData,13" json:"alternateData,omitempty"`
}

func NewResource() *Resource {
	return &Resource{}
}

var Resource_GUID_DEFAULT GUID

func (p *Resource) GetGUID() GUID {
	if !p.IsSetGUID() {
		return Resource_GUID_DEFAULT
	}
	return *p.GUID
}

var Resource_NoteGuid_DEFAULT GUID

func (p *Resource) GetNoteGuid() GUID {
	if !p.IsSetNoteGuid() {
		return Resource_NoteGuid_DEFAULT
	}
	return *p.NoteGuid
}

var Resource_Data_DEFAULT *Data

func (p *Resource) GetData() *Data {
	if !p.IsSetData() {
		return Resource_Data_DEFAULT
	}
	return p.Data
}

var Resource_Mime_DEFAULT string

func (p *Resource) GetMime() string {
	if !p.IsSetMime() {
		return Resource_Mime_DEFAULT
	}
	return *p.Mime
}

var Resource_Width_DEFAULT int16

func (p *Resource) GetWidth() int16 {
	if !p.IsSetWidth() {
		return Resource_Width_DEFAULT
	}
	return *p.Width
}

var Resource_Height_DEFAULT int16

func (p *Resource) GetHeight() int16 {
	if !p.IsSetHeight() {
		return Resource_Height_DEFAULT
	}
	return *p.Height
}

var Resource_Duration_DEFAULT int16

func (p *Resource) GetDuration() int16 {
	if !p.IsSetDuration() {
		return Resource_Duration_DEFAULT
	}
	return *p.Duration
}

var Resource_Active_DEFAULT bool

func (p *Resource) GetActive() bool {
	if !p.IsSetActive() {
		return Resource_Active_DEFAULT
	}
	return *p.Active
}

var Resource_Recognition_DEFAULT *Data

func (p *Resource) GetRecognition() *Data {
	if !p.IsSetRecognition() {
		return Resource_Recognition_DEFAULT
	}
	return p.Recognition
}

var Resource_Attributes_DEFAULT *ResourceAttributes

func (p *Resource) GetAttributes() *ResourceAttributes {
	if !p.IsSetAttributes() {
		return Resource_Attributes_DEFAULT
	}
	return p.Attributes
}

var Resource_UpdateSequenceNum_DEFAULT int32

func (p *Resource) GetUpdateSequenceNum() int32 {
	if !p.IsSetUpdateSequenceNum() {
		return Resource_UpdateSequenceNum_DEFAULT
	}
	return *p.UpdateSequenceNum
}

var Resource_AlternateData_DEFAULT *Data

func (p *Resource) GetAlternateData() *Data {
	if !p.IsSetAlternateData() {
		return Resource_AlternateData_DEFAULT
	}
	return p.AlternateData
}
func (p *Resource) IsSetGUID() bool {
	return p.GUID != nil
}

func (p *Resource) IsSetNoteGuid() bool {
	return p.NoteGuid != nil
}

func (p *Resource) IsSetData() bool {
	return p.Data != nil
}

func (p *Resource) IsSetMime() bool {
	return p.Mime != nil
}

func (p *Resource) IsSetWidth() bool {
	return p.Width != nil
}

func (p *Resource) IsSetHeight() bool {
	return p.Height != nil
}

func (p *Resource) IsSetDuration() bool {
	return p.Duration != nil
}

func (p *Resource) IsSetActive() bool {
	return p.Active != nil
}

func (p *Resource) IsSetRecognition() bool {
	return p.Recognition != nil
}

func (p *Resource) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *Resource) IsSetUpdateSequenceNum() bool {
	return p.UpdateSequenceNum != nil
}

func (p *Resource) IsSetAlternateData() bool {
	return p.AlternateData != nil
}

func (p *Resource) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Resource) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := GUID(v)
		p.GUID = &temp
	}
	return nil
}

func (p *Resource) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := GUID(v)
		p.NoteGuid = &temp
	}
	return nil
}

func (p *Resource) readField3(iprot thrift.TProtocol) error {
	p.Data = &Data{}
	if err := p.Data.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
	}
	return nil
}

func (p *Resource) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Mime = &v
	}
	return nil
}

func (p *Resource) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Width = &v
	}
	return nil
}

func (p *Resource) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Height = &v
	}
	return nil
}

func (p *Resource) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Duration = &v
	}
	return nil
}

func (p *Resource) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Active = &v
	}
	return nil
}

func (p *Resource) readField9(iprot thrift.TProtocol) error {
	p.Recognition = &Data{}
	if err := p.Recognition.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Recognition), err)
	}
	return nil
}

func (p *Resource) readField11(iprot thrift.TProtocol) error {
	p.Attributes = &ResourceAttributes{}
	if err := p.Attributes.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Attributes), err)
	}
	return nil
}

func (p *Resource) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.UpdateSequenceNum = &v
	}
	return nil
}

func (p *Resource) readField13(iprot thrift.TProtocol) error {
	p.AlternateData = &Data{}
	if err := p.AlternateData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AlternateData), err)
	}
	return nil
}

func (p *Resource) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Resource"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Resource) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGUID() {
		if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:guid: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.guid (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:guid: ", p), err)
		}
	}
	return err
}

func (p *Resource) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoteGuid() {
		if err := oprot.WriteFieldBegin("noteGuid", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:noteGuid: ", p), err)
		}
		if err := oprot.WriteString(string(*p.NoteGuid)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noteGuid (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:noteGuid: ", p), err)
		}
	}
	return err
}

func (p *Resource) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err)
		}
		if err := p.Data.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err)
		}
	}
	return err
}

func (p *Resource) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMime() {
		if err := oprot.WriteFieldBegin("mime", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mime: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Mime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mime (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mime: ", p), err)
		}
	}
	return err
}

func (p *Resource) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetWidth() {
		if err := oprot.WriteFieldBegin("width", thrift.I16, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:width: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.Width)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.width (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:width: ", p), err)
		}
	}
	return err
}

func (p *Resource) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetHeight() {
		if err := oprot.WriteFieldBegin("height", thrift.I16, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:height: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.Height)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.height (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:height: ", p), err)
		}
	}
	return err
}

func (p *Resource) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDuration() {
		if err := oprot.WriteFieldBegin("duration", thrift.I16, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:duration: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.Duration)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.duration (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:duration: ", p), err)
		}
	}
	return err
}

func (p *Resource) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetActive() {
		if err := oprot.WriteFieldBegin("active", thrift.BOOL, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:active: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Active)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.active (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:active: ", p), err)
		}
	}
	return err
}

func (p *Resource) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecognition() {
		if err := oprot.WriteFieldBegin("recognition", thrift.STRUCT, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:recognition: ", p), err)
		}
		if err := p.Recognition.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Recognition), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:recognition: ", p), err)
		}
	}
	return err
}

func (p *Resource) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.STRUCT, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:attributes: ", p), err)
		}
		if err := p.Attributes.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Attributes), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:attributes: ", p), err)
		}
	}
	return err
}

func (p *Resource) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateSequenceNum() {
		if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:updateSequenceNum: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.UpdateSequenceNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updateSequenceNum (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:updateSequenceNum: ", p), err)
		}
	}
	return err
}

func (p *Resource) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetAlternateData() {
		if err := oprot.WriteFieldBegin("alternateData", thrift.STRUCT, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:alternateData: ", p), err)
		}
		if err := p.AlternateData.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AlternateData), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:alternateData: ", p), err)
		}
	}
	return err
}

func (p *Resource) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Resource(%+v)", *p)
}

// The list of optional attributes that can be stored on a note.
// <dl>
// <dt>subjectDate</dt>
//   <dd>time that the note refers to
//   </dd>
//
// <dt>latitude</dt>
//   <dd>the latitude where the note was taken
//   </dd>
//
// <dt>longitude</dt>
//   <dd>the longitude where the note was taken
//   </dd>
//
// <dt>altitude</dt>
//   <dd>the altitude where the note was taken
//   </dd>
//
// <dt>author</dt>
//   <dd>the author of the content of the note
//   <br/>
//   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
//   </dd>
//
// <dt>source</dt>
//   <dd>the method that the note was added to the account, if the
//   note wasn't directly authored in an Evernote desktop client.
//   <br/>
//   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
//   </dd>
//
// <dt>sourceURL</dt>
//   <dd>the original location where the resource was hosted. For web clips,
//   this will be the URL of the page that was clipped.
//   <br/>
//   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
//   </dd>
//
// <dt>sourceApplication</dt>
//   <dd>an identifying string for the application that
//   created this note.  This string does not have a guaranteed syntax or
//   structure -- it is intended for human inspection and tracking.
//   <br/>
//   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
//   </dd>
//
// <dt>shareDate</dt>
//  <dd>The date and time when this note was directly shared via its own URL.
//  This is only set on notes that were individually shared - it is independent
//  of any notebook-level sharing of the containing notebook. This field
//  is treated as "read-only" for clients; the server will ignore changes
//  to this field from an external client.
//  </dd>
//
// <dt>reminderOrder</dt>
// <dd>The set of notes with this parameter set are considered
// "reminders" and are to be treated specially by clients to give them
// higher UI prominence within a notebook.  The value is used to sort
// the reminder notes within the notebook with higher values
// representing greater prominence.  Outside of the context of a
// notebook, the value of this parameter is undefined.  The value is
// not intended to be compared to the values of reminder notes in
// other notebooks.  In order to allow clients to place a note at a
// higher precedence than other notes, you should never set a value
// greater than the current time (as defined for a Timetstamp). To
// place a note at higher precedence than existing notes, set the
// value to the current time as defined for a timestamp (milliseconds
// since the epoch).  Synchronizing clients must remember the time when
// the update was performed, using the local clock on the client,
// and use that value when they later upload the note to the service.
// Clients must not set the reminderOrder to the reminderTime as the
// reminderTime could be in the future.  Those two fields are never
// intended to be related.  The correct value for reminderOrder field
// for new notes is the "current" time when the user indicated that
// the note is a reminder.  Clients may implement a separate
// "sort by date" feature to show notes ordered by reminderTime.
// Whenever a reminderDoneTime or reminderTime is set but a
// reminderOrder is not set, the server will fill in the current
// server time for the reminderOrder field.</dd>
//
// <dt>reminderDoneTime</dt>
// <dd>The date and time when a user dismissed/"marked done" the reminder
// on the note.  Users typically do not manually set this value directly
// as it is set to the time when the user dismissed/"marked done" the
// reminder.</dd>
//
// <dt>reminderTime</dt>
// <dd>The date and time a user has selected to be reminded of the note.
// A note with this value set is known as a "reminder" and the user can
// be reminded, via e-mail or client-specific notifications, of the note
// when the time is reached or about to be reached.  When a user sets
// a reminder time on a note that has a reminder done time, and that
// reminder time is in the future, then the reminder done time should be
// cleared.  This should happen regardless of any existing reminder time
// that may have previously existed on the note.</dd>
//
// <dt>placeName</dt>
// <dd>Allows the user to assign a human-readable location name associated
// with a note. Users may assign values like 'Home' and 'Work'. Place
// names may also be populated with values from geonames database
// (e.g., a restaurant name). Applications are encouraged to normalize values
// so that grouping values by place name provides a useful result. Applications
// MUST NOT automatically add place name values based on geolocation without
// confirmation from the user; that is, the value in this field should be
// more useful than a simple automated lookup based on the note's latitude
// and longitude.</dd>
//
// <dt>contentClass</dt>
// <dd>The class (or type) of note. This field is used to indicate to
// clients that special structured information is represented within
// the note such that special rules apply when making
// modifications. If contentClass is set and the client
// application does not specifically support the specified class,
// the client MUST treat the note as read-only. In this case, the
// client MAY modify the note's notebook and tags via the
// Note.notebookGuid and Note.tagGuids fields.  The client MAY also
// modify the reminderOrder field as well as the reminderTime and
// reminderDoneTime fields.
// <p>Applications should set contentClass only when they are creating notes
// that contain structured information that needs to be maintained in order
// for the user to be able to use the note within that application.
// Setting contentClass makes a note read-only in other applications, so
// there is a trade-off when an application chooses to use contentClass.
// Applications that set contentClass when creating notes must use a contentClass
// string of the form <i>CompanyName.ApplicationName</i> to ensure uniqueness.</p>
// Length restrictions: EDAM_NOTE_CONTENT_CLASS_LEN_MIN, EDAM_NOTE_CONTENT_CLASS_LEN_MAX
// <br/>
// Regex: EDAM_NOTE_CONTENT_CLASS_REGEX
// </dd>
//
// <dt>applicationData</dt>
// <dd>Provides a location for applications to store a relatively small
// (4kb) blob of data that is not meant to be visible to the user and
// that is opaque to the Evernote service. A single application may use at most
// one entry in this map, using its API consumer key as the map key. See the
// documentation for LazyMap for a description of when the actual map values
// are returned by the service.
// <p>To safely add or modify your application's entry in the map, use
// NoteStore.setNoteApplicationDataEntry. To safely remove your application's
// entry from the map, use NoteStore.unsetNoteApplicationDataEntry.</p>
// Minimum length of a name (key): EDAM_APPLICATIONDATA_NAME_LEN_MIN
// <br/>
// Sum max size of key and value: EDAM_APPLICATIONDATA_ENTRY_LEN_MAX
// <br/>
// Syntax regex for name (key): EDAM_APPLICATIONDATA_NAME_REGEX
// </dd>
//
// <dt>creatorId</dt>
// <dd>The numeric user ID of the user who originally created the note.</dd>
//
// <dt>lastEditedBy</dt>
// <dd>An indication of who made the last change to the note.  If you are
// accessing the note via a shared notebook to which you have modification
// rights, or if you are the owner of the notebook to which the note belongs,
// then you have access to the value.  In this case, the value will be
// unset if the owner of the notebook containing the note was the last to
// make the modification, else it will be a string describing the
// guest who made the last edit.  If you do not have access to this value,
// it will be left unset.  This field is read-only by clients.  The server
// will ignore all values set by clients into this field.</dd>
//
// <dt>lastEditorId</dt>
// <dd>The numeric user ID of the user described in lastEditedBy.</dd>
//
// <dt>classifications</dt>
// <dd>A map of classifications applied to the note by clients or by the
// Evernote service. The key is the string name of the classification type,
// and the value is a constant that begins with CLASSIFICATION_.</dd>
//
// </dl>
//
// Attributes:
//  - SubjectDate
//  - Latitude
//  - Longitude
//  - Altitude
//  - Author
//  - Source
//  - SourceURL
//  - SourceApplication
//  - ShareDate
//  - ReminderOrder
//  - ReminderDoneTime
//  - ReminderTime
//  - PlaceName
//  - ContentClass
//  - ApplicationData
//  - LastEditedBy
//  - Classifications
//  - CreatorId
//  - LastEditorId
type NoteAttributes struct {
	SubjectDate *Timestamp `thrift:"subjectDate,1" json:"subjectDate,omitempty"`
	// unused fields # 2 to 9
	Latitude          *float64   `thrift:"latitude,10" json:"latitude,omitempty"`
	Longitude         *float64   `thrift:"longitude,11" json:"longitude,omitempty"`
	Altitude          *float64   `thrift:"altitude,12" json:"altitude,omitempty"`
	Author            *string    `thrift:"author,13" json:"author,omitempty"`
	Source            *string    `thrift:"source,14" json:"source,omitempty"`
	SourceURL         *string    `thrift:"sourceURL,15" json:"sourceURL,omitempty"`
	SourceApplication *string    `thrift:"sourceApplication,16" json:"sourceApplication,omitempty"`
	ShareDate         *Timestamp `thrift:"shareDate,17" json:"shareDate,omitempty"`
	ReminderOrder     *int64     `thrift:"reminderOrder,18" json:"reminderOrder,omitempty"`
	ReminderDoneTime  *Timestamp `thrift:"reminderDoneTime,19" json:"reminderDoneTime,omitempty"`
	ReminderTime      *Timestamp `thrift:"reminderTime,20" json:"reminderTime,omitempty"`
	PlaceName         *string    `thrift:"placeName,21" json:"placeName,omitempty"`
	ContentClass      *string    `thrift:"contentClass,22" json:"contentClass,omitempty"`
	ApplicationData   *LazyMap   `thrift:"applicationData,23" json:"applicationData,omitempty"`
	LastEditedBy      *string    `thrift:"lastEditedBy,24" json:"lastEditedBy,omitempty"`
	// unused field # 25
	Classifications map[string]string `thrift:"classifications,26" json:"classifications,omitempty"`
	CreatorId       *UserID           `thrift:"creatorId,27" json:"creatorId,omitempty"`
	LastEditorId    *UserID           `thrift:"lastEditorId,28" json:"lastEditorId,omitempty"`
}

func NewNoteAttributes() *NoteAttributes {
	return &NoteAttributes{}
}

var NoteAttributes_SubjectDate_DEFAULT Timestamp

func (p *NoteAttributes) GetSubjectDate() Timestamp {
	if !p.IsSetSubjectDate() {
		return NoteAttributes_SubjectDate_DEFAULT
	}
	return *p.SubjectDate
}

var NoteAttributes_Latitude_DEFAULT float64

func (p *NoteAttributes) GetLatitude() float64 {
	if !p.IsSetLatitude() {
		return NoteAttributes_Latitude_DEFAULT
	}
	return *p.Latitude
}

var NoteAttributes_Longitude_DEFAULT float64

func (p *NoteAttributes) GetLongitude() float64 {
	if !p.IsSetLongitude() {
		return NoteAttributes_Longitude_DEFAULT
	}
	return *p.Longitude
}

var NoteAttributes_Altitude_DEFAULT float64

func (p *NoteAttributes) GetAltitude() float64 {
	if !p.IsSetAltitude() {
		return NoteAttributes_Altitude_DEFAULT
	}
	return *p.Altitude
}

var NoteAttributes_Author_DEFAULT string

func (p *NoteAttributes) GetAuthor() string {
	if !p.IsSetAuthor() {
		return NoteAttributes_Author_DEFAULT
	}
	return *p.Author
}

var NoteAttributes_Source_DEFAULT string

func (p *NoteAttributes) GetSource() string {
	if !p.IsSetSource() {
		return NoteAttributes_Source_DEFAULT
	}
	return *p.Source
}

var NoteAttributes_SourceURL_DEFAULT string

func (p *NoteAttributes) GetSourceURL() string {
	if !p.IsSetSourceURL() {
		return NoteAttributes_SourceURL_DEFAULT
	}
	return *p.SourceURL
}

var NoteAttributes_SourceApplication_DEFAULT string

func (p *NoteAttributes) GetSourceApplication() string {
	if !p.IsSetSourceApplication() {
		return NoteAttributes_SourceApplication_DEFAULT
	}
	return *p.SourceApplication
}

var NoteAttributes_ShareDate_DEFAULT Timestamp

func (p *NoteAttributes) GetShareDate() Timestamp {
	if !p.IsSetShareDate() {
		return NoteAttributes_ShareDate_DEFAULT
	}
	return *p.ShareDate
}

var NoteAttributes_ReminderOrder_DEFAULT int64

func (p *NoteAttributes) GetReminderOrder() int64 {
	if !p.IsSetReminderOrder() {
		return NoteAttributes_ReminderOrder_DEFAULT
	}
	return *p.ReminderOrder
}

var NoteAttributes_ReminderDoneTime_DEFAULT Timestamp

func (p *NoteAttributes) GetReminderDoneTime() Timestamp {
	if !p.IsSetReminderDoneTime() {
		return NoteAttributes_ReminderDoneTime_DEFAULT
	}
	return *p.ReminderDoneTime
}

var NoteAttributes_ReminderTime_DEFAULT Timestamp

func (p *NoteAttributes) GetReminderTime() Timestamp {
	if !p.IsSetReminderTime() {
		return NoteAttributes_ReminderTime_DEFAULT
	}
	return *p.ReminderTime
}

var NoteAttributes_PlaceName_DEFAULT string

func (p *NoteAttributes) GetPlaceName() string {
	if !p.IsSetPlaceName() {
		return NoteAttributes_PlaceName_DEFAULT
	}
	return *p.PlaceName
}

var NoteAttributes_ContentClass_DEFAULT string

func (p *NoteAttributes) GetContentClass() string {
	if !p.IsSetContentClass() {
		return NoteAttributes_ContentClass_DEFAULT
	}
	return *p.ContentClass
}

var NoteAttributes_ApplicationData_DEFAULT *LazyMap

func (p *NoteAttributes) GetApplicationData() *LazyMap {
	if !p.IsSetApplicationData() {
		return NoteAttributes_ApplicationData_DEFAULT
	}
	return p.ApplicationData
}

var NoteAttributes_LastEditedBy_DEFAULT string

func (p *NoteAttributes) GetLastEditedBy() string {
	if !p.IsSetLastEditedBy() {
		return NoteAttributes_LastEditedBy_DEFAULT
	}
	return *p.LastEditedBy
}

var NoteAttributes_Classifications_DEFAULT map[string]string

func (p *NoteAttributes) GetClassifications() map[string]string {
	return p.Classifications
}

var NoteAttributes_CreatorId_DEFAULT UserID

func (p *NoteAttributes) GetCreatorId() UserID {
	if !p.IsSetCreatorId() {
		return NoteAttributes_CreatorId_DEFAULT
	}
	return *p.CreatorId
}

var NoteAttributes_LastEditorId_DEFAULT UserID

func (p *NoteAttributes) GetLastEditorId() UserID {
	if !p.IsSetLastEditorId() {
		return NoteAttributes_LastEditorId_DEFAULT
	}
	return *p.LastEditorId
}
func (p *NoteAttributes) IsSetSubjectDate() bool {
	return p.SubjectDate != nil
}

func (p *NoteAttributes) IsSetLatitude() bool {
	return p.Latitude != nil
}

func (p *NoteAttributes) IsSetLongitude() bool {
	return p.Longitude != nil
}

func (p *NoteAttributes) IsSetAltitude() bool {
	return p.Altitude != nil
}

func (p *NoteAttributes) IsSetAuthor() bool {
	return p.Author != nil
}

func (p *NoteAttributes) IsSetSource() bool {
	return p.Source != nil
}

func (p *NoteAttributes) IsSetSourceURL() bool {
	return p.SourceURL != nil
}

func (p *NoteAttributes) IsSetSourceApplication() bool {
	return p.SourceApplication != nil
}

func (p *NoteAttributes) IsSetShareDate() bool {
	return p.ShareDate != nil
}

func (p *NoteAttributes) IsSetReminderOrder() bool {
	return p.ReminderOrder != nil
}

func (p *NoteAttributes) IsSetReminderDoneTime() bool {
	return p.ReminderDoneTime != nil
}

func (p *NoteAttributes) IsSetReminderTime() bool {
	return p.ReminderTime != nil
}

func (p *NoteAttributes) IsSetPlaceName() bool {
	return p.PlaceName != nil
}

func (p *NoteAttributes) IsSetContentClass() bool {
	return p.ContentClass != nil
}

func (p *NoteAttributes) IsSetApplicationData() bool {
	return p.ApplicationData != nil
}

func (p *NoteAttributes) IsSetLastEditedBy() bool {
	return p.LastEditedBy != nil
}

func (p *NoteAttributes) IsSetClassifications() bool {
	return p.Classifications != nil
}

func (p *NoteAttributes) IsSetCreatorId() bool {
	return p.CreatorId != nil
}

func (p *NoteAttributes) IsSetLastEditorId() bool {
	return p.LastEditorId != nil
}

func (p *NoteAttributes) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.readField24(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.readField26(iprot); err != nil {
				return err
			}
		case 27:
			if err := p.readField27(iprot); err != nil {
				return err
			}
		case 28:
			if err := p.readField28(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoteAttributes) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Timestamp(v)
		p.SubjectDate = &temp
	}
	return nil
}

func (p *NoteAttributes) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Latitude = &v
	}
	return nil
}

func (p *NoteAttributes) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Longitude = &v
	}
	return nil
}

func (p *NoteAttributes) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Altitude = &v
	}
	return nil
}

func (p *NoteAttributes) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Author = &v
	}
	return nil
}

func (p *NoteAttributes) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Source = &v
	}
	return nil
}

func (p *NoteAttributes) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.SourceURL = &v
	}
	return nil
}

func (p *NoteAttributes) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.SourceApplication = &v
	}
	return nil
}

func (p *NoteAttributes) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		temp := Timestamp(v)
		p.ShareDate = &temp
	}
	return nil
}

func (p *NoteAttributes) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.ReminderOrder = &v
	}
	return nil
}

func (p *NoteAttributes) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		temp := Timestamp(v)
		p.ReminderDoneTime = &temp
	}
	return nil
}

func (p *NoteAttributes) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		temp := Timestamp(v)
		p.ReminderTime = &temp
	}
	return nil
}

func (p *NoteAttributes) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.PlaceName = &v
	}
	return nil
}

func (p *NoteAttributes) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.ContentClass = &v
	}
	return nil
}

func (p *NoteAttributes) readField23(iprot thrift.TProtocol) error {
	p.ApplicationData = &LazyMap{}
	if err := p.ApplicationData.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ApplicationData), err)
	}
	return nil
}

func (p *NoteAttributes) readField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		p.LastEditedBy = &v
	}
	return nil
}

func (p *NoteAttributes) readField26(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Classifications = tMap
	for i := 0; i < size; i++ {
		var _key5 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key5 = v
		}
		var _val6 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val6 = v
		}
		p.Classifications[_key5] = _val6
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *NoteAttributes) readField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 27: ", err)
	} else {
		temp := UserID(v)
		p.CreatorId = &temp
	}
	return nil
}

func (p *NoteAttributes) readField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 28: ", err)
	} else {
		temp := UserID(v)
		p.LastEditorId = &temp
	}
	return nil
}

func (p *NoteAttributes) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoteAttributes"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField27(oprot); err != nil {
		return err
	}
	if err := p.writeField28(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoteAttributes) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubjectDate() {
		if err := oprot.WriteFieldBegin("subjectDate", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:subjectDate: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.SubjectDate)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.subjectDate (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:subjectDate: ", p), err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetLatitude() {
		if err := oprot.WriteFieldBegin("latitude", thrift.DOUBLE, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:latitude: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.Latitude)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.latitude (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:latitude: ", p), err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetLongitude() {
		if err := oprot.WriteFieldBegin("longitude", thrift.DOUBLE, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:longitude: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.Longitude)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.longitude (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:longitude: ", p), err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetAltitude() {
		if err := oprot.WriteFieldBegin("altitude", thrift.DOUBLE, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:altitude: ", p), err)
		}
		if err := oprot.WriteDouble(float64(*p.Altitude)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.altitude (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:altitude: ", p), err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthor() {
		if err := oprot.WriteFieldBegin("author", thrift.STRING, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:author: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Author)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.author (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:author: ", p), err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetSource() {
		if err := oprot.WriteFieldBegin("source", thrift.STRING, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:source: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Source)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.source (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:source: ", p), err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceURL() {
		if err := oprot.WriteFieldBegin("sourceURL", thrift.STRING, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:sourceURL: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SourceURL)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sourceURL (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:sourceURL: ", p), err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceApplication() {
		if err := oprot.WriteFieldBegin("sourceApplication", thrift.STRING, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:sourceApplication: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SourceApplication)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sourceApplication (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:sourceApplication: ", p), err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetShareDate() {
		if err := oprot.WriteFieldBegin("shareDate", thrift.I64, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:shareDate: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ShareDate)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.shareDate (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:shareDate: ", p), err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetReminderOrder() {
		if err := oprot.WriteFieldBegin("reminderOrder", thrift.I64, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:reminderOrder: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ReminderOrder)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.reminderOrder (18) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:reminderOrder: ", p), err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetReminderDoneTime() {
		if err := oprot.WriteFieldBegin("reminderDoneTime", thrift.I64, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:reminderDoneTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ReminderDoneTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.reminderDoneTime (19) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:reminderDoneTime: ", p), err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetReminderTime() {
		if err := oprot.WriteFieldBegin("reminderTime", thrift.I64, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:reminderTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ReminderTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.reminderTime (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:reminderTime: ", p), err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlaceName() {
		if err := oprot.WriteFieldBegin("placeName", thrift.STRING, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:placeName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PlaceName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.placeName (21) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:placeName: ", p), err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentClass() {
		if err := oprot.WriteFieldBegin("contentClass", thrift.STRING, 22); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:contentClass: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ContentClass)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.contentClass (22) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 22:contentClass: ", p), err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetApplicationData() {
		if err := oprot.WriteFieldBegin("applicationData", thrift.STRUCT, 23); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:applicationData: ", p), err)
		}
		if err := p.ApplicationData.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ApplicationData), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 23:applicationData: ", p), err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastEditedBy() {
		if err := oprot.WriteFieldBegin("lastEditedBy", thrift.STRING, 24); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:lastEditedBy: ", p), err)
		}
		if err := oprot.WriteString(string(*p.LastEditedBy)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lastEditedBy (24) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 24:lastEditedBy: ", p), err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetClassifications() {
		if err := oprot.WriteFieldBegin("classifications", thrift.MAP, 26); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:classifications: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Classifications)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Classifications {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 26:classifications: ", p), err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField27(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatorId() {
		if err := oprot.WriteFieldBegin("creatorId", thrift.I32, 27); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:creatorId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.CreatorId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.creatorId (27) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 27:creatorId: ", p), err)
		}
	}
	return err
}

func (p *NoteAttributes) writeField28(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastEditorId() {
		if err := oprot.WriteFieldBegin("lastEditorId", thrift.I32, 28); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:lastEditorId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.LastEditorId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lastEditorId (28) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 28:lastEditorId: ", p), err)
		}
	}
	return err
}

func (p *NoteAttributes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoteAttributes(%+v)", *p)
}

// Represents a single note in the user's account.
//
// <dl>
// <dt>guid</dt>
//   <dd>The unique identifier of this note.  Will be set by the
//   server, but will be omitted by clients calling NoteStore.createNote()
//   <br/>
//   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
//   <br/>
//   Regex:  EDAM_GUID_REGEX
//   </dd>
//
// <dt>title</dt>
//   <dd>The subject of the note.  Can't begin or end with a space.
//   <br/>
//   Length:  EDAM_NOTE_TITLE_LEN_MIN - EDAM_NOTE_TITLE_LEN_MAX
//   <br/>
//   Regex:  EDAM_NOTE_TITLE_REGEX
//   </dd>
//
// <dt>content</dt>
//   <dd>The XHTML block that makes up the note.  This is
//   the canonical form of the note's contents, so will include abstract
//   Evernote tags for internal resource references.  A client may create
//   a separate transformed version of this content for internal presentation,
//   but the same canonical bytes should be used for transmission and
//   comparison unless the user chooses to modify their content.
//   <br/>
//   Length:  EDAM_NOTE_CONTENT_LEN_MIN - EDAM_NOTE_CONTENT_LEN_MAX
//   </dd>
//
// <dt>contentHash</dt>
//   <dd>The binary MD5 checksum of the UTF-8 encoded content
//   body. This will always be set by the server, but clients may choose to omit
//   this when they submit a note with content.
//   <br/>
//   Length:  EDAM_HASH_LEN (exactly)
//   </dd>
//
// <dt>contentLength</dt>
//   <dd>The number of Unicode characters in the content of
//   the note.  This will always be set by the service, but clients may choose
//   to omit this value when they submit a Note.
//   </dd>
//
// <dt>created</dt>
//   <dd>The date and time when the note was created in one of the
//   clients.  In most cases, this will match the user's sense of when
//   the note was created, and ordering between notes will be based on
//   ordering of this field.  However, this is not a "reliable" timestamp
//   if a client has an incorrect clock, so it cannot provide a true absolute
//   ordering between notes.  Notes created directly through the service
//   (e.g. via the web GUI) will have an absolutely ordered "created" value.
//   </dd>
//
// <dt>updated</dt>
//   <dd>The date and time when the note was last modified in one of
//   the clients.  In most cases, this will match the user's sense of when
//   the note was modified, but this field may not be absolutely reliable
//   due to the possibility of client clock errors.
//   </dd>
//
// <dt>deleted</dt>
//   <dd>If present, the note is considered "deleted", and this
//   stores the date and time when the note was deleted by one of the clients.
//   In most cases, this will match the user's sense of when the note was
//   deleted, but this field may be unreliable due to the possibility of
//   client clock errors.
//   </dd>
//
// <dt>active</dt>
//   <dd>If the note is available for normal actions and viewing,
//   this flag will be set to true.
//   </dd>
//
// <dt>updateSequenceNum</dt>
//   <dd>A number identifying the last transaction to
//   modify the state of this note (including changes to the note's attributes
//   or resources).  The USN values are sequential within an account,
//   and can be used to compare the order of modifications within the service.
//   </dd>
//
// <dt>notebookGuid</dt>
//   <dd>The unique identifier of the notebook that contains
//   this note.  If no notebookGuid is provided on a call to createNote(), the
//   default notebook will be used instead.
//   <br/>
//   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
//   <br/>
//   Regex:  EDAM_GUID_REGEX
//   </dd>
//
// <dt>tagGuids</dt>
//   <dd>A list of the GUID identifiers for tags that are applied to this note.
//   This may be provided in a call to createNote() to unambiguously declare
//   the tags that should be assigned to the new note.  Alternately, clients
//   may pass the names of desired tags via the 'tagNames' field during
//   note creation.
//   If the list of tags are omitted on a call to createNote(), then
//   the server will assume that no changes have been made to the resources.
//   Maximum:  EDAM_NOTE_TAGS_MAX tags per note
//   </dd>
//
// <dt>resources</dt>
//   <dd>The list of resources that are embedded within this note.
//   If the list of resources are omitted on a call to updateNote(), then
//   the server will assume that no changes have been made to the resources.
//   The binary contents of the resources must be provided when the resource
//   is first sent to the service, but it will be omitted by the service when
//   the Note is returned in the future.
//   Maximum:  EDAM_NOTE_RESOURCES_MAX resources per note
//   </dd>
//
// <dt>attributes</dt>
//   <dd>A list of the attributes for this note.
//   If the list of attributes are omitted on a call to updateNote(), then
//   the server will assume that no changes have been made to the resources.
//   </dd>
//
// <dt>tagNames</dt>
//   <dd>May be provided by clients during calls to createNote() as an
//   alternative to providing the tagGuids of existing tags.  If any tagNames
//   are provided during createNote(), these will be found, or created if they
//   don't already exist.  Created tags will have no parent (they will be at
//   the top level of the tag panel).
//   </dd>
// </dl>
//
// Attributes:
//  - GUID
//  - Title
//  - Content
//  - ContentHash
//  - ContentLength
//  - Created
//  - Updated
//  - Deleted
//  - Active
//  - UpdateSequenceNum
//  - NotebookGuid
//  - TagGuids
//  - Resources
//  - Attributes
//  - TagNames
type Note struct {
	GUID              *GUID           `thrift:"guid,1" json:"guid,omitempty"`
	Title             *string         `thrift:"title,2" json:"title,omitempty"`
	Content           *string         `thrift:"content,3" json:"content,omitempty"`
	ContentHash       []byte          `thrift:"contentHash,4" json:"contentHash,omitempty"`
	ContentLength     *int32          `thrift:"contentLength,5" json:"contentLength,omitempty"`
	Created           *Timestamp      `thrift:"created,6" json:"created,omitempty"`
	Updated           *Timestamp      `thrift:"updated,7" json:"updated,omitempty"`
	Deleted           *Timestamp      `thrift:"deleted,8" json:"deleted,omitempty"`
	Active            *bool           `thrift:"active,9" json:"active,omitempty"`
	UpdateSequenceNum *int32          `thrift:"updateSequenceNum,10" json:"updateSequenceNum,omitempty"`
	NotebookGuid      *string         `thrift:"notebookGuid,11" json:"notebookGuid,omitempty"`
	TagGuids          []string        `thrift:"tagGuids,12" json:"tagGuids,omitempty"`
	Resources         []*Resource     `thrift:"resources,13" json:"resources,omitempty"`
	Attributes        *NoteAttributes `thrift:"attributes,14" json:"attributes,omitempty"`
	TagNames          []string        `thrift:"tagNames,15" json:"tagNames,omitempty"`
}

func NewNote() *Note {
	return &Note{}
}

var Note_GUID_DEFAULT GUID

func (p *Note) GetGUID() GUID {
	if !p.IsSetGUID() {
		return Note_GUID_DEFAULT
	}
	return *p.GUID
}

var Note_Title_DEFAULT string

func (p *Note) GetTitle() string {
	if !p.IsSetTitle() {
		return Note_Title_DEFAULT
	}
	return *p.Title
}

var Note_Content_DEFAULT string

func (p *Note) GetContent() string {
	if !p.IsSetContent() {
		return Note_Content_DEFAULT
	}
	return *p.Content
}

var Note_ContentHash_DEFAULT []byte

func (p *Note) GetContentHash() []byte {
	return p.ContentHash
}

var Note_ContentLength_DEFAULT int32

func (p *Note) GetContentLength() int32 {
	if !p.IsSetContentLength() {
		return Note_ContentLength_DEFAULT
	}
	return *p.ContentLength
}

var Note_Created_DEFAULT Timestamp

func (p *Note) GetCreated() Timestamp {
	if !p.IsSetCreated() {
		return Note_Created_DEFAULT
	}
	return *p.Created
}

var Note_Updated_DEFAULT Timestamp

func (p *Note) GetUpdated() Timestamp {
	if !p.IsSetUpdated() {
		return Note_Updated_DEFAULT
	}
	return *p.Updated
}

var Note_Deleted_DEFAULT Timestamp

func (p *Note) GetDeleted() Timestamp {
	if !p.IsSetDeleted() {
		return Note_Deleted_DEFAULT
	}
	return *p.Deleted
}

var Note_Active_DEFAULT bool

func (p *Note) GetActive() bool {
	if !p.IsSetActive() {
		return Note_Active_DEFAULT
	}
	return *p.Active
}

var Note_UpdateSequenceNum_DEFAULT int32

func (p *Note) GetUpdateSequenceNum() int32 {
	if !p.IsSetUpdateSequenceNum() {
		return Note_UpdateSequenceNum_DEFAULT
	}
	return *p.UpdateSequenceNum
}

var Note_NotebookGuid_DEFAULT string

func (p *Note) GetNotebookGuid() string {
	if !p.IsSetNotebookGuid() {
		return Note_NotebookGuid_DEFAULT
	}
	return *p.NotebookGuid
}

var Note_TagGuids_DEFAULT []string

func (p *Note) GetTagGuids() []string {
	return p.TagGuids
}

var Note_Resources_DEFAULT []*Resource

func (p *Note) GetResources() []*Resource {
	return p.Resources
}

var Note_Attributes_DEFAULT *NoteAttributes

func (p *Note) GetAttributes() *NoteAttributes {
	if !p.IsSetAttributes() {
		return Note_Attributes_DEFAULT
	}
	return p.Attributes
}

var Note_TagNames_DEFAULT []string

func (p *Note) GetTagNames() []string {
	return p.TagNames
}
func (p *Note) IsSetGUID() bool {
	return p.GUID != nil
}

func (p *Note) IsSetTitle() bool {
	return p.Title != nil
}

func (p *Note) IsSetContent() bool {
	return p.Content != nil
}

func (p *Note) IsSetContentHash() bool {
	return p.ContentHash != nil
}

func (p *Note) IsSetContentLength() bool {
	return p.ContentLength != nil
}

func (p *Note) IsSetCreated() bool {
	return p.Created != nil
}

func (p *Note) IsSetUpdated() bool {
	return p.Updated != nil
}

func (p *Note) IsSetDeleted() bool {
	return p.Deleted != nil
}

func (p *Note) IsSetActive() bool {
	return p.Active != nil
}

func (p *Note) IsSetUpdateSequenceNum() bool {
	return p.UpdateSequenceNum != nil
}

func (p *Note) IsSetNotebookGuid() bool {
	return p.NotebookGuid != nil
}

func (p *Note) IsSetTagGuids() bool {
	return p.TagGuids != nil
}

func (p *Note) IsSetResources() bool {
	return p.Resources != nil
}

func (p *Note) IsSetAttributes() bool {
	return p.Attributes != nil
}

func (p *Note) IsSetTagNames() bool {
	return p.TagNames != nil
}

func (p *Note) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Note) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := GUID(v)
		p.GUID = &temp
	}
	return nil
}

func (p *Note) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Title = &v
	}
	return nil
}

func (p *Note) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Content = &v
	}
	return nil
}

func (p *Note) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ContentHash = v
	}
	return nil
}

func (p *Note) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ContentLength = &v
	}
	return nil
}

func (p *Note) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := Timestamp(v)
		p.Created = &temp
	}
	return nil
}

func (p *Note) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := Timestamp(v)
		p.Updated = &temp
	}
	return nil
}

func (p *Note) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := Timestamp(v)
		p.Deleted = &temp
	}
	return nil
}

func (p *Note) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Active = &v
	}
	return nil
}

func (p *Note) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.UpdateSequenceNum = &v
	}
	return nil
}

func (p *Note) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.NotebookGuid = &v
	}
	return nil
}

func (p *Note) readField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.TagGuids = tSlice
	for i := 0; i < size; i++ {
		var _elem7 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem7 = v
		}
		p.TagGuids = append(p.TagGuids, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Note) readField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Resource, 0, size)
	p.Resources = tSlice
	for i := 0; i < size; i++ {
		_elem8 := &Resource{}
		if err := _elem8.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
		}
		p.Resources = append(p.Resources, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Note) readField14(iprot thrift.TProtocol) error {
	p.Attributes = &NoteAttributes{}
	if err := p.Attributes.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Attributes), err)
	}
	return nil
}

func (p *Note) readField15(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.TagNames = tSlice
	for i := 0; i < size; i++ {
		var _elem9 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem9 = v
		}
		p.TagNames = append(p.TagNames, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Note) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Note"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Note) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGUID() {
		if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:guid: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.guid (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:guid: ", p), err)
		}
	}
	return err
}

func (p *Note) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Title)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err)
		}
	}
	return err
}

func (p *Note) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err := oprot.WriteFieldBegin("content", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:content: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Content)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.content (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:content: ", p), err)
		}
	}
	return err
}

func (p *Note) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentHash() {
		if err := oprot.WriteFieldBegin("contentHash", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:contentHash: ", p), err)
		}
		if err := oprot.WriteBinary(p.ContentHash); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.contentHash (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:contentHash: ", p), err)
		}
	}
	return err
}

func (p *Note) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentLength() {
		if err := oprot.WriteFieldBegin("contentLength", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:contentLength: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ContentLength)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.contentLength (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:contentLength: ", p), err)
		}
	}
	return err
}

func (p *Note) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreated() {
		if err := oprot.WriteFieldBegin("created", thrift.I64, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:created: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Created)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.created (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:created: ", p), err)
		}
	}
	return err
}

func (p *Note) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdated() {
		if err := oprot.WriteFieldBegin("updated", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:updated: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Updated)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updated (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:updated: ", p), err)
		}
	}
	return err
}

func (p *Note) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeleted() {
		if err := oprot.WriteFieldBegin("deleted", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:deleted: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Deleted)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.deleted (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:deleted: ", p), err)
		}
	}
	return err
}

func (p *Note) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetActive() {
		if err := oprot.WriteFieldBegin("active", thrift.BOOL, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:active: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Active)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.active (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:active: ", p), err)
		}
	}
	return err
}

func (p *Note) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateSequenceNum() {
		if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:updateSequenceNum: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.UpdateSequenceNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updateSequenceNum (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:updateSequenceNum: ", p), err)
		}
	}
	return err
}

func (p *Note) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotebookGuid() {
		if err := oprot.WriteFieldBegin("notebookGuid", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:notebookGuid: ", p), err)
		}
		if err := oprot.WriteString(string(*p.NotebookGuid)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.notebookGuid (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:notebookGuid: ", p), err)
		}
	}
	return err
}

func (p *Note) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagGuids() {
		if err := oprot.WriteFieldBegin("tagGuids", thrift.LIST, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:tagGuids: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.TagGuids)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.TagGuids {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:tagGuids: ", p), err)
		}
	}
	return err
}

func (p *Note) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetResources() {
		if err := oprot.WriteFieldBegin("resources", thrift.LIST, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:resources: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Resources)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Resources {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:resources: ", p), err)
		}
	}
	return err
}

func (p *Note) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttributes() {
		if err := oprot.WriteFieldBegin("attributes", thrift.STRUCT, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:attributes: ", p), err)
		}
		if err := p.Attributes.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Attributes), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:attributes: ", p), err)
		}
	}
	return err
}

func (p *Note) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagNames() {
		if err := oprot.WriteFieldBegin("tagNames", thrift.LIST, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:tagNames: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.TagNames)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.TagNames {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:tagNames: ", p), err)
		}
	}
	return err
}

func (p *Note) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Note(%+v)", *p)
}

// If a Notebook has been opened to the public, the Notebook will have a
// reference to one of these structures, which gives the location and optional
// description of the externally-visible public Notebook.
// <dl>
// <dt>uri</dt>
//   <dd>If this field is present, then the notebook is published for
//   mass consumption on the Internet under the provided URI, which is
//   relative to a defined base publishing URI defined by the service.
//   This field can only be modified via the web service GUI ... publishing
//   cannot be modified via an offline client.
//   <br/>
//   Length:  EDAM_PUBLISHING_URI_LEN_MIN - EDAM_PUBLISHING_URI_LEN_MAX
//   <br/>
//   Regex:  EDAM_PUBLISHING_URI_REGEX
//   </dd>
//
// <dt>order</dt>
//   <dd>When the notes are publicly displayed, they will be sorted
//   based on the requested criteria.
//   </dd>
//
// <dt>ascending</dt>
//   <dd>If this is set to true, then the public notes will be
//   displayed in ascending order (e.g. from oldest to newest).  Otherwise,
//   the notes will be displayed in descending order (e.g. newest to oldest).
//   </dd>
//
// <dt>publicDescription</dt>
//   <dd>This field may be used to provide a short
//   description of the notebook, which may be displayed when (e.g.) the
//   notebook is shown in a public view.  Can't begin or end with a space.
//   <br/>
//   Length:  EDAM_PUBLISHING_DESCRIPTION_LEN_MIN -
//            EDAM_PUBLISHING_DESCRIPTION_LEN_MAX
//   <br/>
//   Regex:  EDAM_PUBLISHING_DESCRIPTION_REGEX
//   </dd>
//
// </dl>
//
// Attributes:
//  - URI
//  - Order
//  - Ascending
//  - PublicDescription
type Publishing struct {
	URI               *string        `thrift:"uri,1" json:"uri,omitempty"`
	Order             *NoteSortOrder `thrift:"order,2" json:"order,omitempty"`
	Ascending         *bool          `thrift:"ascending,3" json:"ascending,omitempty"`
	PublicDescription *string        `thrift:"publicDescription,4" json:"publicDescription,omitempty"`
}

func NewPublishing() *Publishing {
	return &Publishing{}
}

var Publishing_URI_DEFAULT string

func (p *Publishing) GetURI() string {
	if !p.IsSetURI() {
		return Publishing_URI_DEFAULT
	}
	return *p.URI
}

var Publishing_Order_DEFAULT NoteSortOrder

func (p *Publishing) GetOrder() NoteSortOrder {
	if !p.IsSetOrder() {
		return Publishing_Order_DEFAULT
	}
	return *p.Order
}

var Publishing_Ascending_DEFAULT bool

func (p *Publishing) GetAscending() bool {
	if !p.IsSetAscending() {
		return Publishing_Ascending_DEFAULT
	}
	return *p.Ascending
}

var Publishing_PublicDescription_DEFAULT string

func (p *Publishing) GetPublicDescription() string {
	if !p.IsSetPublicDescription() {
		return Publishing_PublicDescription_DEFAULT
	}
	return *p.PublicDescription
}
func (p *Publishing) IsSetURI() bool {
	return p.URI != nil
}

func (p *Publishing) IsSetOrder() bool {
	return p.Order != nil
}

func (p *Publishing) IsSetAscending() bool {
	return p.Ascending != nil
}

func (p *Publishing) IsSetPublicDescription() bool {
	return p.PublicDescription != nil
}

func (p *Publishing) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Publishing) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.URI = &v
	}
	return nil
}

func (p *Publishing) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := NoteSortOrder(v)
		p.Order = &temp
	}
	return nil
}

func (p *Publishing) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Ascending = &v
	}
	return nil
}

func (p *Publishing) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.PublicDescription = &v
	}
	return nil
}

func (p *Publishing) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Publishing"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Publishing) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetURI() {
		if err := oprot.WriteFieldBegin("uri", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uri: ", p), err)
		}
		if err := oprot.WriteString(string(*p.URI)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.uri (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uri: ", p), err)
		}
	}
	return err
}

func (p *Publishing) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrder() {
		if err := oprot.WriteFieldBegin("order", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:order: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Order)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.order (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:order: ", p), err)
		}
	}
	return err
}

func (p *Publishing) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAscending() {
		if err := oprot.WriteFieldBegin("ascending", thrift.BOOL, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ascending: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Ascending)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.ascending (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ascending: ", p), err)
		}
	}
	return err
}

func (p *Publishing) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPublicDescription() {
		if err := oprot.WriteFieldBegin("publicDescription", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:publicDescription: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PublicDescription)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.publicDescription (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:publicDescription: ", p), err)
		}
	}
	return err
}

func (p *Publishing) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Publishing(%+v)", *p)
}

// If a Notebook contained in an Evernote Business account has been published
// the to business library, the Notebook will have a reference to one of these
// structures, which specifies how the Notebook will be represented in the
// library.
//
// <dl>
// <dt>notebookDescription</dt>
//   <dd>A short description of the notebook's content that will be displayed
//       in the business library user interface. The description may not begin
//       or end with whitespace.
//   <br/>
//   Length: EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_LEN_MIN -
//           EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_LEN_MAX
//   <br/>
//   Regex:  EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_REGEX
//   </dd>
//
// <dt>privilege</dt>
//   <dd>The privileges that will be granted to users who join the notebook through
//       the business library.
//   </dd>
//
// <dt>recommended</dt>
//   <dd>Whether the notebook should be "recommended" when displayed in the business
//       library user interface.
//   </dd>
// </dl>
//
// Attributes:
//  - NotebookDescription
//  - Privilege
//  - Recommended
type BusinessNotebook struct {
	NotebookDescription *string                       `thrift:"notebookDescription,1" json:"notebookDescription,omitempty"`
	Privilege           *SharedNotebookPrivilegeLevel `thrift:"privilege,2" json:"privilege,omitempty"`
	Recommended         *bool                         `thrift:"recommended,3" json:"recommended,omitempty"`
}

func NewBusinessNotebook() *BusinessNotebook {
	return &BusinessNotebook{}
}

var BusinessNotebook_NotebookDescription_DEFAULT string

func (p *BusinessNotebook) GetNotebookDescription() string {
	if !p.IsSetNotebookDescription() {
		return BusinessNotebook_NotebookDescription_DEFAULT
	}
	return *p.NotebookDescription
}

var BusinessNotebook_Privilege_DEFAULT SharedNotebookPrivilegeLevel

func (p *BusinessNotebook) GetPrivilege() SharedNotebookPrivilegeLevel {
	if !p.IsSetPrivilege() {
		return BusinessNotebook_Privilege_DEFAULT
	}
	return *p.Privilege
}

var BusinessNotebook_Recommended_DEFAULT bool

func (p *BusinessNotebook) GetRecommended() bool {
	if !p.IsSetRecommended() {
		return BusinessNotebook_Recommended_DEFAULT
	}
	return *p.Recommended
}
func (p *BusinessNotebook) IsSetNotebookDescription() bool {
	return p.NotebookDescription != nil
}

func (p *BusinessNotebook) IsSetPrivilege() bool {
	return p.Privilege != nil
}

func (p *BusinessNotebook) IsSetRecommended() bool {
	return p.Recommended != nil
}

func (p *BusinessNotebook) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BusinessNotebook) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NotebookDescription = &v
	}
	return nil
}

func (p *BusinessNotebook) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := SharedNotebookPrivilegeLevel(v)
		p.Privilege = &temp
	}
	return nil
}

func (p *BusinessNotebook) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Recommended = &v
	}
	return nil
}

func (p *BusinessNotebook) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BusinessNotebook"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BusinessNotebook) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotebookDescription() {
		if err := oprot.WriteFieldBegin("notebookDescription", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:notebookDescription: ", p), err)
		}
		if err := oprot.WriteString(string(*p.NotebookDescription)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.notebookDescription (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:notebookDescription: ", p), err)
		}
	}
	return err
}

func (p *BusinessNotebook) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivilege() {
		if err := oprot.WriteFieldBegin("privilege", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:privilege: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Privilege)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.privilege (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:privilege: ", p), err)
		}
	}
	return err
}

func (p *BusinessNotebook) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecommended() {
		if err := oprot.WriteFieldBegin("recommended", thrift.BOOL, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:recommended: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Recommended)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.recommended (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:recommended: ", p), err)
		}
	}
	return err
}

func (p *BusinessNotebook) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BusinessNotebook(%+v)", *p)
}

// A structure defining the scope of a SavedSearch.
//
// <dl>
//   <dt>includeAccount</dt>
//   <dd>The search should include notes from the account that contains the SavedSearch.</dd>
//
//   <dt>includePersonalLinkedNotebooks</dt>
//   <dd>The search should include notes within those shared notebooks
//   that the user has joined that are NOT business notebooks.</dd>
//
//   <dt>includeBusinessLinkedNotebooks</dt>
//   <dd>The search should include notes within those shared notebooks
//   that the user has joined that are business notebooks in the business that
//   the user is currently a member of.</dd>
// </dl>
//
// Attributes:
//  - IncludeAccount
//  - IncludePersonalLinkedNotebooks
//  - IncludeBusinessLinkedNotebooks
type SavedSearchScope struct {
	IncludeAccount                 *bool `thrift:"includeAccount,1" json:"includeAccount,omitempty"`
	IncludePersonalLinkedNotebooks *bool `thrift:"includePersonalLinkedNotebooks,2" json:"includePersonalLinkedNotebooks,omitempty"`
	IncludeBusinessLinkedNotebooks *bool `thrift:"includeBusinessLinkedNotebooks,3" json:"includeBusinessLinkedNotebooks,omitempty"`
}

func NewSavedSearchScope() *SavedSearchScope {
	return &SavedSearchScope{}
}

var SavedSearchScope_IncludeAccount_DEFAULT bool

func (p *SavedSearchScope) GetIncludeAccount() bool {
	if !p.IsSetIncludeAccount() {
		return SavedSearchScope_IncludeAccount_DEFAULT
	}
	return *p.IncludeAccount
}

var SavedSearchScope_IncludePersonalLinkedNotebooks_DEFAULT bool

func (p *SavedSearchScope) GetIncludePersonalLinkedNotebooks() bool {
	if !p.IsSetIncludePersonalLinkedNotebooks() {
		return SavedSearchScope_IncludePersonalLinkedNotebooks_DEFAULT
	}
	return *p.IncludePersonalLinkedNotebooks
}

var SavedSearchScope_IncludeBusinessLinkedNotebooks_DEFAULT bool

func (p *SavedSearchScope) GetIncludeBusinessLinkedNotebooks() bool {
	if !p.IsSetIncludeBusinessLinkedNotebooks() {
		return SavedSearchScope_IncludeBusinessLinkedNotebooks_DEFAULT
	}
	return *p.IncludeBusinessLinkedNotebooks
}
func (p *SavedSearchScope) IsSetIncludeAccount() bool {
	return p.IncludeAccount != nil
}

func (p *SavedSearchScope) IsSetIncludePersonalLinkedNotebooks() bool {
	return p.IncludePersonalLinkedNotebooks != nil
}

func (p *SavedSearchScope) IsSetIncludeBusinessLinkedNotebooks() bool {
	return p.IncludeBusinessLinkedNotebooks != nil
}

func (p *SavedSearchScope) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SavedSearchScope) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.IncludeAccount = &v
	}
	return nil
}

func (p *SavedSearchScope) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IncludePersonalLinkedNotebooks = &v
	}
	return nil
}

func (p *SavedSearchScope) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IncludeBusinessLinkedNotebooks = &v
	}
	return nil
}

func (p *SavedSearchScope) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SavedSearchScope"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SavedSearchScope) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeAccount() {
		if err := oprot.WriteFieldBegin("includeAccount", thrift.BOOL, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:includeAccount: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeAccount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeAccount (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:includeAccount: ", p), err)
		}
	}
	return err
}

func (p *SavedSearchScope) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludePersonalLinkedNotebooks() {
		if err := oprot.WriteFieldBegin("includePersonalLinkedNotebooks", thrift.BOOL, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:includePersonalLinkedNotebooks: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludePersonalLinkedNotebooks)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includePersonalLinkedNotebooks (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:includePersonalLinkedNotebooks: ", p), err)
		}
	}
	return err
}

func (p *SavedSearchScope) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeBusinessLinkedNotebooks() {
		if err := oprot.WriteFieldBegin("includeBusinessLinkedNotebooks", thrift.BOOL, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:includeBusinessLinkedNotebooks: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IncludeBusinessLinkedNotebooks)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.includeBusinessLinkedNotebooks (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:includeBusinessLinkedNotebooks: ", p), err)
		}
	}
	return err
}

func (p *SavedSearchScope) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SavedSearchScope(%+v)", *p)
}

// A named search associated with the account that can be quickly re-used.
// <dl>
// <dt>guid</dt>
//   <dd>The unique identifier of this search.  Will be set by the
//   service, so may be omitted by the client when creating.
//   <br/>
//   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
//   <br/>
//   Regex:  EDAM_GUID_REGEX
//   </dd>
//
// <dt>name</dt>
//   <dd>The name of the saved search to display in the GUI.  The
//   account may only contain one search with a given name (case-insensitive
//   compare). Can't begin or end with a space.
//   <br/>
//   Length:  EDAM_SAVED_SEARCH_NAME_LEN_MIN - EDAM_SAVED_SEARCH_NAME_LEN_MAX
//   <br/>
//   Regex:  EDAM_SAVED_SEARCH_NAME_REGEX
//   </dd>
//
// <dt>query</dt>
//   <dd>A string expressing the search to be performed.
//   <br/>
//   Length:  EDAM_SAVED_SEARCH_QUERY_LEN_MIN - EDAM_SAVED_SEARCH_QUERY_LEN_MAX
//   </dd>
//
// <dt>format</dt>
//   <dd>The format of the query string, to determine how to parse
//   and process it.
//   </dd>
//
// <dt>updateSequenceNum</dt>
//   <dd>A number identifying the last transaction to
//   modify the state of this object.  The USN values are sequential within an
//   account, and can be used to compare the order of modifications within the
//   service.
//   </dd>
//
// <dt>scope</dt>
//   <dd><p>Specifies the set of notes that should be included in the search, if
//    possible.</p>
//    <p>Clients are expected to search as much of the desired scope as possible,
//    with the understanding that a given client may not be able to cover the full
//    specified scope. For example, when executing a search that includes notes in both
//    the owner's account and business notebooks, a mobile client may choose to only
//    search within the user's account because it is not capable of searching both
//    scopes simultaneously. When a search across multiple scopes is not possible,
//    a client may choose which scope to search based on the current application
//    context. If a client cannot search any of the desired scopes, it should refuse
//    to execute the search.</p>
//    </dd>
// </dl>
//
// Attributes:
//  - GUID
//  - Name
//  - Query
//  - Format
//  - UpdateSequenceNum
//  - Scope
type SavedSearch struct {
	GUID              *GUID             `thrift:"guid,1" json:"guid,omitempty"`
	Name              *string           `thrift:"name,2" json:"name,omitempty"`
	Query             *string           `thrift:"query,3" json:"query,omitempty"`
	Format            *QueryFormat      `thrift:"format,4" json:"format,omitempty"`
	UpdateSequenceNum *int32            `thrift:"updateSequenceNum,5" json:"updateSequenceNum,omitempty"`
	Scope             *SavedSearchScope `thrift:"scope,6" json:"scope,omitempty"`
}

func NewSavedSearch() *SavedSearch {
	return &SavedSearch{}
}

var SavedSearch_GUID_DEFAULT GUID

func (p *SavedSearch) GetGUID() GUID {
	if !p.IsSetGUID() {
		return SavedSearch_GUID_DEFAULT
	}
	return *p.GUID
}

var SavedSearch_Name_DEFAULT string

func (p *SavedSearch) GetName() string {
	if !p.IsSetName() {
		return SavedSearch_Name_DEFAULT
	}
	return *p.Name
}

var SavedSearch_Query_DEFAULT string

func (p *SavedSearch) GetQuery() string {
	if !p.IsSetQuery() {
		return SavedSearch_Query_DEFAULT
	}
	return *p.Query
}

var SavedSearch_Format_DEFAULT QueryFormat

func (p *SavedSearch) GetFormat() QueryFormat {
	if !p.IsSetFormat() {
		return SavedSearch_Format_DEFAULT
	}
	return *p.Format
}

var SavedSearch_UpdateSequenceNum_DEFAULT int32

func (p *SavedSearch) GetUpdateSequenceNum() int32 {
	if !p.IsSetUpdateSequenceNum() {
		return SavedSearch_UpdateSequenceNum_DEFAULT
	}
	return *p.UpdateSequenceNum
}

var SavedSearch_Scope_DEFAULT *SavedSearchScope

func (p *SavedSearch) GetScope() *SavedSearchScope {
	if !p.IsSetScope() {
		return SavedSearch_Scope_DEFAULT
	}
	return p.Scope
}
func (p *SavedSearch) IsSetGUID() bool {
	return p.GUID != nil
}

func (p *SavedSearch) IsSetName() bool {
	return p.Name != nil
}

func (p *SavedSearch) IsSetQuery() bool {
	return p.Query != nil
}

func (p *SavedSearch) IsSetFormat() bool {
	return p.Format != nil
}

func (p *SavedSearch) IsSetUpdateSequenceNum() bool {
	return p.UpdateSequenceNum != nil
}

func (p *SavedSearch) IsSetScope() bool {
	return p.Scope != nil
}

func (p *SavedSearch) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SavedSearch) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := GUID(v)
		p.GUID = &temp
	}
	return nil
}

func (p *SavedSearch) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *SavedSearch) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Query = &v
	}
	return nil
}

func (p *SavedSearch) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := QueryFormat(v)
		p.Format = &temp
	}
	return nil
}

func (p *SavedSearch) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.UpdateSequenceNum = &v
	}
	return nil
}

func (p *SavedSearch) readField6(iprot thrift.TProtocol) error {
	p.Scope = &SavedSearchScope{}
	if err := p.Scope.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Scope), err)
	}
	return nil
}

func (p *SavedSearch) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SavedSearch"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SavedSearch) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGUID() {
		if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:guid: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.guid (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:guid: ", p), err)
		}
	}
	return err
}

func (p *SavedSearch) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
		}
	}
	return err
}

func (p *SavedSearch) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetQuery() {
		if err := oprot.WriteFieldBegin("query", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:query: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Query)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.query (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:query: ", p), err)
		}
	}
	return err
}

func (p *SavedSearch) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFormat() {
		if err := oprot.WriteFieldBegin("format", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:format: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Format)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.format (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:format: ", p), err)
		}
	}
	return err
}

func (p *SavedSearch) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateSequenceNum() {
		if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:updateSequenceNum: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.UpdateSequenceNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updateSequenceNum (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:updateSequenceNum: ", p), err)
		}
	}
	return err
}

func (p *SavedSearch) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetScope() {
		if err := oprot.WriteFieldBegin("scope", thrift.STRUCT, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:scope: ", p), err)
		}
		if err := p.Scope.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Scope), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:scope: ", p), err)
		}
	}
	return err
}

func (p *SavedSearch) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SavedSearch(%+v)", *p)
}

// Settings meant for the recipient of a shared notebook, such as
// for indicating which types of notifications the recipient wishes
// for reminders, etc.
//
// The reminderNotifyEmail and reminderNotifyInApp fields have a
// 3-state read value but a 2-state write value.  On read, it is
// possible to observe "unset", true, or false.  The initial state is
// "unset".  When you choose to set a value, you may set it to either
// true or false, but you cannot unset the value.  Once one of these
// members has a true/false value, it will always have a true/false
// value.
//
// <dl>
// <dt>reminderNotifyEmail</dt>
// <dd>Indicates that the user wishes to receive daily e-mail notifications
//     for reminders associated with the shared notebook.  This may be
//     true only for business notebooks that belong to the business of
//     which the user is a member.  You may only set this value on a
//     notebook in your business.</dd>
// <dt>reminderNotifyInApp</dt>
// <dd>Indicates that the user wishes to receive notifications for
//     reminders by applications that support providing such
//     notifications.  The exact nature of the notification is defined
//     by the individual applications.</dd>
// </dl>
//
//
// Attributes:
//  - ReminderNotifyEmail
//  - ReminderNotifyInApp
type SharedNotebookRecipientSettings struct {
	ReminderNotifyEmail *bool `thrift:"reminderNotifyEmail,1" json:"reminderNotifyEmail,omitempty"`
	ReminderNotifyInApp *bool `thrift:"reminderNotifyInApp,2" json:"reminderNotifyInApp,omitempty"`
}

func NewSharedNotebookRecipientSettings() *SharedNotebookRecipientSettings {
	return &SharedNotebookRecipientSettings{}
}

var SharedNotebookRecipientSettings_ReminderNotifyEmail_DEFAULT bool

func (p *SharedNotebookRecipientSettings) GetReminderNotifyEmail() bool {
	if !p.IsSetReminderNotifyEmail() {
		return SharedNotebookRecipientSettings_ReminderNotifyEmail_DEFAULT
	}
	return *p.ReminderNotifyEmail
}

var SharedNotebookRecipientSettings_ReminderNotifyInApp_DEFAULT bool

func (p *SharedNotebookRecipientSettings) GetReminderNotifyInApp() bool {
	if !p.IsSetReminderNotifyInApp() {
		return SharedNotebookRecipientSettings_ReminderNotifyInApp_DEFAULT
	}
	return *p.ReminderNotifyInApp
}
func (p *SharedNotebookRecipientSettings) IsSetReminderNotifyEmail() bool {
	return p.ReminderNotifyEmail != nil
}

func (p *SharedNotebookRecipientSettings) IsSetReminderNotifyInApp() bool {
	return p.ReminderNotifyInApp != nil
}

func (p *SharedNotebookRecipientSettings) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SharedNotebookRecipientSettings) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ReminderNotifyEmail = &v
	}
	return nil
}

func (p *SharedNotebookRecipientSettings) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ReminderNotifyInApp = &v
	}
	return nil
}

func (p *SharedNotebookRecipientSettings) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SharedNotebookRecipientSettings"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SharedNotebookRecipientSettings) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetReminderNotifyEmail() {
		if err := oprot.WriteFieldBegin("reminderNotifyEmail", thrift.BOOL, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reminderNotifyEmail: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.ReminderNotifyEmail)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.reminderNotifyEmail (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reminderNotifyEmail: ", p), err)
		}
	}
	return err
}

func (p *SharedNotebookRecipientSettings) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetReminderNotifyInApp() {
		if err := oprot.WriteFieldBegin("reminderNotifyInApp", thrift.BOOL, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reminderNotifyInApp: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.ReminderNotifyInApp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.reminderNotifyInApp (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reminderNotifyInApp: ", p), err)
		}
	}
	return err
}

func (p *SharedNotebookRecipientSettings) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SharedNotebookRecipientSettings(%+v)", *p)
}

// Shared notebooks represent a relationship between a notebook and a single
// share invitation recipient.
// <dl>
// <dt>id</dt>
// <dd>the primary identifier of the share</dd>
//
// <dt>userId</dt>
// <dd>the user id of the owner of the notebook</dd>
//
// <dt>notebookGuid</dt>
// <dd>the GUID of the associated notebook shared.</dd>
//
// <dt>email</dt>
// <dd>the email address of the recipient - used by the notebook
// owner to identify who they shared with.</dd>
//
// <dt>notebookModifiable</dt>
// <dd>(DEPRECATED) a flag indicating the share is read/write -otherwise it's read
//     only.  This field is deprecated in favor of the new "privilege" field.</dd>
//
// <dt>requireLogin</dt>
// <dd>(DEPRECATED) indicates that a user must login to access the share.  This
//     field is deprecated and will be "true" for all new shared notebooks.  It
//     is read-only and ignored when creating or modifying a shared notebook,
//     except that a shared notebook can be modified to require login.
//     See "allowPreview" for information on privileges and shared notebooks.</dd>
//
// <dt>serviceCreated</dt>
// <dd>the date the owner first created the share with the specific email
//   address</dd>
//
// <dt>serviceUpdated</dt>
// <dd>the date the shared notebook was last updated on the service.  This
//     will be updated when authenticateToSharedNotebook is called the first
//     time with a shared notebook requiring login (i.e. when the username is
//     bound to that shared notebook).</dd>
//
// <dt>username</dt>
// <dd>the username of the user who can access this share.
//   Once it's assigned it cannot be changed.</dd>
//
// <dt>privilege</dt>
// <dd>The privilege level granted to the notebook, activity stream, and
//     invitations.  See the corresponding enumeration for details.</dd>
//
// <dt>allowPreview</dt>
// <dd>Whether or not to grant "READ_NOTEBOOK" privilege without an
//     authentication token, for authenticateToSharedNotebook(...).  With
//     the change to "requireLogin" always being true for new shared
//     notebooks, this is the only way to access a shared notebook without
//     an authorization token.  This setting expires after the first use
//     of authenticateToSharedNotebook(...) with a valid authentication
//     token.</dd>
//
// <dt>recipientSettings</dt>
// <dd>Settings intended for use only by the recipient of this shared
//     notebook.  You should skip setting this value unless you want
//     to change the value contained inside the structure, and only if
//     you are the recipient.</dd>
// </dl>
//
// Attributes:
//  - ID
//  - UserId
//  - NotebookGuid
//  - Email
//  - NotebookModifiable
//  - RequireLogin
//  - ServiceCreated
//  - ServiceUpdated
//  - ShareKey
//  - Username
//  - Privilege
//  - AllowPreview
//  - RecipientSettings
type SharedNotebook struct {
	ID                 *int64                           `thrift:"id,1" json:"id,omitempty"`
	UserId             *int32                           `thrift:"userId,2" json:"userId,omitempty"`
	NotebookGuid       *string                          `thrift:"notebookGuid,3" json:"notebookGuid,omitempty"`
	Email              *string                          `thrift:"email,4" json:"email,omitempty"`
	NotebookModifiable *bool                            `thrift:"notebookModifiable,5" json:"notebookModifiable,omitempty"`
	RequireLogin       *bool                            `thrift:"requireLogin,6" json:"requireLogin,omitempty"`
	ServiceCreated     *Timestamp                       `thrift:"serviceCreated,7" json:"serviceCreated,omitempty"`
	ShareKey           *string                          `thrift:"shareKey,8" json:"shareKey,omitempty"`
	Username           *string                          `thrift:"username,9" json:"username,omitempty"`
	ServiceUpdated     *Timestamp                       `thrift:"serviceUpdated,10" json:"serviceUpdated,omitempty"`
	Privilege          *SharedNotebookPrivilegeLevel    `thrift:"privilege,11" json:"privilege,omitempty"`
	AllowPreview       *bool                            `thrift:"allowPreview,12" json:"allowPreview,omitempty"`
	RecipientSettings  *SharedNotebookRecipientSettings `thrift:"recipientSettings,13" json:"recipientSettings,omitempty"`
}

func NewSharedNotebook() *SharedNotebook {
	return &SharedNotebook{}
}

var SharedNotebook_ID_DEFAULT int64

func (p *SharedNotebook) GetID() int64 {
	if !p.IsSetID() {
		return SharedNotebook_ID_DEFAULT
	}
	return *p.ID
}

var SharedNotebook_UserId_DEFAULT int32

func (p *SharedNotebook) GetUserId() int32 {
	if !p.IsSetUserId() {
		return SharedNotebook_UserId_DEFAULT
	}
	return *p.UserId
}

var SharedNotebook_NotebookGuid_DEFAULT string

func (p *SharedNotebook) GetNotebookGuid() string {
	if !p.IsSetNotebookGuid() {
		return SharedNotebook_NotebookGuid_DEFAULT
	}
	return *p.NotebookGuid
}

var SharedNotebook_Email_DEFAULT string

func (p *SharedNotebook) GetEmail() string {
	if !p.IsSetEmail() {
		return SharedNotebook_Email_DEFAULT
	}
	return *p.Email
}

var SharedNotebook_NotebookModifiable_DEFAULT bool

func (p *SharedNotebook) GetNotebookModifiable() bool {
	if !p.IsSetNotebookModifiable() {
		return SharedNotebook_NotebookModifiable_DEFAULT
	}
	return *p.NotebookModifiable
}

var SharedNotebook_RequireLogin_DEFAULT bool

func (p *SharedNotebook) GetRequireLogin() bool {
	if !p.IsSetRequireLogin() {
		return SharedNotebook_RequireLogin_DEFAULT
	}
	return *p.RequireLogin
}

var SharedNotebook_ServiceCreated_DEFAULT Timestamp

func (p *SharedNotebook) GetServiceCreated() Timestamp {
	if !p.IsSetServiceCreated() {
		return SharedNotebook_ServiceCreated_DEFAULT
	}
	return *p.ServiceCreated
}

var SharedNotebook_ServiceUpdated_DEFAULT Timestamp

func (p *SharedNotebook) GetServiceUpdated() Timestamp {
	if !p.IsSetServiceUpdated() {
		return SharedNotebook_ServiceUpdated_DEFAULT
	}
	return *p.ServiceUpdated
}

var SharedNotebook_ShareKey_DEFAULT string

func (p *SharedNotebook) GetShareKey() string {
	if !p.IsSetShareKey() {
		return SharedNotebook_ShareKey_DEFAULT
	}
	return *p.ShareKey
}

var SharedNotebook_Username_DEFAULT string

func (p *SharedNotebook) GetUsername() string {
	if !p.IsSetUsername() {
		return SharedNotebook_Username_DEFAULT
	}
	return *p.Username
}

var SharedNotebook_Privilege_DEFAULT SharedNotebookPrivilegeLevel

func (p *SharedNotebook) GetPrivilege() SharedNotebookPrivilegeLevel {
	if !p.IsSetPrivilege() {
		return SharedNotebook_Privilege_DEFAULT
	}
	return *p.Privilege
}

var SharedNotebook_AllowPreview_DEFAULT bool

func (p *SharedNotebook) GetAllowPreview() bool {
	if !p.IsSetAllowPreview() {
		return SharedNotebook_AllowPreview_DEFAULT
	}
	return *p.AllowPreview
}

var SharedNotebook_RecipientSettings_DEFAULT *SharedNotebookRecipientSettings

func (p *SharedNotebook) GetRecipientSettings() *SharedNotebookRecipientSettings {
	if !p.IsSetRecipientSettings() {
		return SharedNotebook_RecipientSettings_DEFAULT
	}
	return p.RecipientSettings
}
func (p *SharedNotebook) IsSetID() bool {
	return p.ID != nil
}

func (p *SharedNotebook) IsSetUserId() bool {
	return p.UserId != nil
}

func (p *SharedNotebook) IsSetNotebookGuid() bool {
	return p.NotebookGuid != nil
}

func (p *SharedNotebook) IsSetEmail() bool {
	return p.Email != nil
}

func (p *SharedNotebook) IsSetNotebookModifiable() bool {
	return p.NotebookModifiable != nil
}

func (p *SharedNotebook) IsSetRequireLogin() bool {
	return p.RequireLogin != nil
}

func (p *SharedNotebook) IsSetServiceCreated() bool {
	return p.ServiceCreated != nil
}

func (p *SharedNotebook) IsSetServiceUpdated() bool {
	return p.ServiceUpdated != nil
}

func (p *SharedNotebook) IsSetShareKey() bool {
	return p.ShareKey != nil
}

func (p *SharedNotebook) IsSetUsername() bool {
	return p.Username != nil
}

func (p *SharedNotebook) IsSetPrivilege() bool {
	return p.Privilege != nil
}

func (p *SharedNotebook) IsSetAllowPreview() bool {
	return p.AllowPreview != nil
}

func (p *SharedNotebook) IsSetRecipientSettings() bool {
	return p.RecipientSettings != nil
}

func (p *SharedNotebook) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SharedNotebook) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = &v
	}
	return nil
}

func (p *SharedNotebook) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserId = &v
	}
	return nil
}

func (p *SharedNotebook) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NotebookGuid = &v
	}
	return nil
}

func (p *SharedNotebook) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Email = &v
	}
	return nil
}

func (p *SharedNotebook) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.NotebookModifiable = &v
	}
	return nil
}

func (p *SharedNotebook) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.RequireLogin = &v
	}
	return nil
}

func (p *SharedNotebook) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := Timestamp(v)
		p.ServiceCreated = &temp
	}
	return nil
}

func (p *SharedNotebook) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		temp := Timestamp(v)
		p.ServiceUpdated = &temp
	}
	return nil
}

func (p *SharedNotebook) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.ShareKey = &v
	}
	return nil
}

func (p *SharedNotebook) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Username = &v
	}
	return nil
}

func (p *SharedNotebook) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		temp := SharedNotebookPrivilegeLevel(v)
		p.Privilege = &temp
	}
	return nil
}

func (p *SharedNotebook) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.AllowPreview = &v
	}
	return nil
}

func (p *SharedNotebook) readField13(iprot thrift.TProtocol) error {
	p.RecipientSettings = &SharedNotebookRecipientSettings{}
	if err := p.RecipientSettings.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RecipientSettings), err)
	}
	return nil
}

func (p *SharedNotebook) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SharedNotebook"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SharedNotebook) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
		}
	}
	return err
}

func (p *SharedNotebook) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserId() {
		if err := oprot.WriteFieldBegin("userId", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.UserId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.userId (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userId: ", p), err)
		}
	}
	return err
}

func (p *SharedNotebook) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotebookGuid() {
		if err := oprot.WriteFieldBegin("notebookGuid", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notebookGuid: ", p), err)
		}
		if err := oprot.WriteString(string(*p.NotebookGuid)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.notebookGuid (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notebookGuid: ", p), err)
		}
	}
	return err
}

func (p *SharedNotebook) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmail() {
		if err := oprot.WriteFieldBegin("email", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:email: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Email)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.email (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:email: ", p), err)
		}
	}
	return err
}

func (p *SharedNotebook) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotebookModifiable() {
		if err := oprot.WriteFieldBegin("notebookModifiable", thrift.BOOL, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:notebookModifiable: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NotebookModifiable)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.notebookModifiable (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:notebookModifiable: ", p), err)
		}
	}
	return err
}

func (p *SharedNotebook) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequireLogin() {
		if err := oprot.WriteFieldBegin("requireLogin", thrift.BOOL, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:requireLogin: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.RequireLogin)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requireLogin (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:requireLogin: ", p), err)
		}
	}
	return err
}

func (p *SharedNotebook) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceCreated() {
		if err := oprot.WriteFieldBegin("serviceCreated", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:serviceCreated: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ServiceCreated)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.serviceCreated (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:serviceCreated: ", p), err)
		}
	}
	return err
}

func (p *SharedNotebook) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetShareKey() {
		if err := oprot.WriteFieldBegin("shareKey", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:shareKey: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ShareKey)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.shareKey (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:shareKey: ", p), err)
		}
	}
	return err
}

func (p *SharedNotebook) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err := oprot.WriteFieldBegin("username", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:username: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Username)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.username (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:username: ", p), err)
		}
	}
	return err
}

func (p *SharedNotebook) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceUpdated() {
		if err := oprot.WriteFieldBegin("serviceUpdated", thrift.I64, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:serviceUpdated: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ServiceUpdated)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.serviceUpdated (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:serviceUpdated: ", p), err)
		}
	}
	return err
}

func (p *SharedNotebook) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrivilege() {
		if err := oprot.WriteFieldBegin("privilege", thrift.I32, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:privilege: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Privilege)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.privilege (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:privilege: ", p), err)
		}
	}
	return err
}

func (p *SharedNotebook) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetAllowPreview() {
		if err := oprot.WriteFieldBegin("allowPreview", thrift.BOOL, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:allowPreview: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.AllowPreview)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.allowPreview (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:allowPreview: ", p), err)
		}
	}
	return err
}

func (p *SharedNotebook) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecipientSettings() {
		if err := oprot.WriteFieldBegin("recipientSettings", thrift.STRUCT, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:recipientSettings: ", p), err)
		}
		if err := p.RecipientSettings.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RecipientSettings), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:recipientSettings: ", p), err)
		}
	}
	return err
}

func (p *SharedNotebook) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SharedNotebook(%+v)", *p)
}

// This structure captures information about the types of operations
// that cannot be performed on a given notebook with a type of
// authenticated access and credentials.  The values filled into this
// structure are based on then-current values in the server database
// for shared notebooks and notebook publishing records, as well as
// information related to the authentication token.  Information from
// the authentication token includes the application that is accessing
// the server, as defined by the permissions granted by consumer (api)
// key, and the method used to obtain the token, for example via
// authenticateToSharedNotebook, authenticateToBusiness, etc.  Note
// that changes to values in this structure that are the result of
// shared notebook or publishing record changes are communicated to
// the client via a change in the notebook USN during sync.  It is
// important to use the same access method, parameters, and consumer
// key in order obtain correct results from the sync engine.
//
// The server has the final say on what is allowed as values may
// change between calls to obtain NotebookRestrictions instances
// and to operate on data on the service.
//
// If the following are set and true, then the given restriction is
// in effect, as accessed by the same authentication token from which
// the values were obtained.
//
// <dt>noReadNotes</dt>
//   <dd>The client is not able to read notes from the service and
//   the notebook is write-only.
//   </dd>
// <dt>noCreateNotes</dt>
//   <dd>The client may not create new notes in the notebook.
//   </dd>
// <dt>noUpdateNotes</dt>
//   <dd>The client may not update notes currently in the notebook.
//   </dd>
// <dt>noExpungeNotes</dt>
//   <dd>The client may not expunge notes currently in the notebook.
//   </dd>
// <dt>noShareNotes</dt>
//   <dd>The client may not share notes in the notebook via the
//   shareNote method.
//   </dd>
// <dt>noEmailNotes</dt>
//   <dd>The client may not e-mail notes via the Evernote service by
//   using the emailNote method.
//   </dd>
// <dt>noSendMessageToRecipients</dt>
//   <dd>The client may not send messages to the share recipients of
//   the notebook.
//   </dd>
// <dt>noUpdateNotebook</dt>
//   <dd>The client may not update the Notebook object itself, for
//   example, via the updateNotebook method.
//   </dd>
// <dt>noExpungeNotebook</dt>
//   <dd>The client may not expunge the Notebook object itself, for
//   example, via the expungeNotebook method.
//   </dd>
// <dt>noSetDefaultNotebook</dt>
//   <dd>The client may not set this notebook to be the default notebook.
//   The caller should leave Notebook.defaultNotebook unset.
//   </dd>
// <dt>noSetNotebookStack</dt>
//   <dd>If the client is able to update the Notebook, the Notebook.stack
//   value may not be set.
//   </dd>
// <dt>noPublishToPublic</dt>
//   <dd>The client may not change the publish the notebook to the public.
//   For example, business notebooks may not be shared publicly.
//   </dd>
// <dt>noPublishToBusinessLibrary</dt>
//   <dd>The client may not publish the notebook to the business library.
//   </dd>
// <dt>noCreateTags</dt>
//   <dd>The client may not complete an operation that results in a new tag
//   being created in the owner's account.
//   </dd>
// <dt>noUpdateTags</dt>
//   <dd>The client may not update tags in the owner's account.
//   </dd>
// <dt>noExpungeTags</dt>
//   <dd>The client may not expunge tags in the owner's account.
//   </dd>
// <dt>noSetParentTag</dt>
//   <dd>If the client is able to create or update tags in the owner's account,
//   then they will not be able to set the parent tag.  Leave the value unset.
//   </dd>
// <dt>noCreateSharedNotebooks</dt>
//   <dd>The client is unable to create shared notebooks for the notebook.
//   </dd>
// <dt>updateWhichSharedNotebookRestrictions</dt>
//   <dd>Restrictions on which shared notebook instances can be updated.  If the
//   value is not set or null, then the client can update any of the shared notebooks
//   associated with the notebook on which the NotebookRestrictions are defined.
//   See the enumeration for further details.
//   </dd>
// <dt>expungeWhichSharedNotebookRestrictions</dt>
//   <dd>Restrictions on which shared notebook instances can be expunged.  If the
//   value is not set or null, then the client can expunge any of the shared notebooks
//   associated with the notebook on which the NotebookRestrictions are defined.
//   See the enumeration for further details.
//   </dd>
//
// Attributes:
//  - NoReadNotes
//  - NoCreateNotes
//  - NoUpdateNotes
//  - NoExpungeNotes
//  - NoShareNotes
//  - NoEmailNotes
//  - NoSendMessageToRecipients
//  - NoUpdateNotebook
//  - NoExpungeNotebook
//  - NoSetDefaultNotebook
//  - NoSetNotebookStack
//  - NoPublishToPublic
//  - NoPublishToBusinessLibrary
//  - NoCreateTags
//  - NoUpdateTags
//  - NoExpungeTags
//  - NoSetParentTag
//  - NoCreateSharedNotebooks
//  - UpdateWhichSharedNotebookRestrictions
//  - ExpungeWhichSharedNotebookRestrictions
type NotebookRestrictions struct {
	NoReadNotes                            *bool                               `thrift:"noReadNotes,1" json:"noReadNotes,omitempty"`
	NoCreateNotes                          *bool                               `thrift:"noCreateNotes,2" json:"noCreateNotes,omitempty"`
	NoUpdateNotes                          *bool                               `thrift:"noUpdateNotes,3" json:"noUpdateNotes,omitempty"`
	NoExpungeNotes                         *bool                               `thrift:"noExpungeNotes,4" json:"noExpungeNotes,omitempty"`
	NoShareNotes                           *bool                               `thrift:"noShareNotes,5" json:"noShareNotes,omitempty"`
	NoEmailNotes                           *bool                               `thrift:"noEmailNotes,6" json:"noEmailNotes,omitempty"`
	NoSendMessageToRecipients              *bool                               `thrift:"noSendMessageToRecipients,7" json:"noSendMessageToRecipients,omitempty"`
	NoUpdateNotebook                       *bool                               `thrift:"noUpdateNotebook,8" json:"noUpdateNotebook,omitempty"`
	NoExpungeNotebook                      *bool                               `thrift:"noExpungeNotebook,9" json:"noExpungeNotebook,omitempty"`
	NoSetDefaultNotebook                   *bool                               `thrift:"noSetDefaultNotebook,10" json:"noSetDefaultNotebook,omitempty"`
	NoSetNotebookStack                     *bool                               `thrift:"noSetNotebookStack,11" json:"noSetNotebookStack,omitempty"`
	NoPublishToPublic                      *bool                               `thrift:"noPublishToPublic,12" json:"noPublishToPublic,omitempty"`
	NoPublishToBusinessLibrary             *bool                               `thrift:"noPublishToBusinessLibrary,13" json:"noPublishToBusinessLibrary,omitempty"`
	NoCreateTags                           *bool                               `thrift:"noCreateTags,14" json:"noCreateTags,omitempty"`
	NoUpdateTags                           *bool                               `thrift:"noUpdateTags,15" json:"noUpdateTags,omitempty"`
	NoExpungeTags                          *bool                               `thrift:"noExpungeTags,16" json:"noExpungeTags,omitempty"`
	NoSetParentTag                         *bool                               `thrift:"noSetParentTag,17" json:"noSetParentTag,omitempty"`
	NoCreateSharedNotebooks                *bool                               `thrift:"noCreateSharedNotebooks,18" json:"noCreateSharedNotebooks,omitempty"`
	UpdateWhichSharedNotebookRestrictions  *SharedNotebookInstanceRestrictions `thrift:"updateWhichSharedNotebookRestrictions,19" json:"updateWhichSharedNotebookRestrictions,omitempty"`
	ExpungeWhichSharedNotebookRestrictions *SharedNotebookInstanceRestrictions `thrift:"expungeWhichSharedNotebookRestrictions,20" json:"expungeWhichSharedNotebookRestrictions,omitempty"`
}

func NewNotebookRestrictions() *NotebookRestrictions {
	return &NotebookRestrictions{}
}

var NotebookRestrictions_NoReadNotes_DEFAULT bool

func (p *NotebookRestrictions) GetNoReadNotes() bool {
	if !p.IsSetNoReadNotes() {
		return NotebookRestrictions_NoReadNotes_DEFAULT
	}
	return *p.NoReadNotes
}

var NotebookRestrictions_NoCreateNotes_DEFAULT bool

func (p *NotebookRestrictions) GetNoCreateNotes() bool {
	if !p.IsSetNoCreateNotes() {
		return NotebookRestrictions_NoCreateNotes_DEFAULT
	}
	return *p.NoCreateNotes
}

var NotebookRestrictions_NoUpdateNotes_DEFAULT bool

func (p *NotebookRestrictions) GetNoUpdateNotes() bool {
	if !p.IsSetNoUpdateNotes() {
		return NotebookRestrictions_NoUpdateNotes_DEFAULT
	}
	return *p.NoUpdateNotes
}

var NotebookRestrictions_NoExpungeNotes_DEFAULT bool

func (p *NotebookRestrictions) GetNoExpungeNotes() bool {
	if !p.IsSetNoExpungeNotes() {
		return NotebookRestrictions_NoExpungeNotes_DEFAULT
	}
	return *p.NoExpungeNotes
}

var NotebookRestrictions_NoShareNotes_DEFAULT bool

func (p *NotebookRestrictions) GetNoShareNotes() bool {
	if !p.IsSetNoShareNotes() {
		return NotebookRestrictions_NoShareNotes_DEFAULT
	}
	return *p.NoShareNotes
}

var NotebookRestrictions_NoEmailNotes_DEFAULT bool

func (p *NotebookRestrictions) GetNoEmailNotes() bool {
	if !p.IsSetNoEmailNotes() {
		return NotebookRestrictions_NoEmailNotes_DEFAULT
	}
	return *p.NoEmailNotes
}

var NotebookRestrictions_NoSendMessageToRecipients_DEFAULT bool

func (p *NotebookRestrictions) GetNoSendMessageToRecipients() bool {
	if !p.IsSetNoSendMessageToRecipients() {
		return NotebookRestrictions_NoSendMessageToRecipients_DEFAULT
	}
	return *p.NoSendMessageToRecipients
}

var NotebookRestrictions_NoUpdateNotebook_DEFAULT bool

func (p *NotebookRestrictions) GetNoUpdateNotebook() bool {
	if !p.IsSetNoUpdateNotebook() {
		return NotebookRestrictions_NoUpdateNotebook_DEFAULT
	}
	return *p.NoUpdateNotebook
}

var NotebookRestrictions_NoExpungeNotebook_DEFAULT bool

func (p *NotebookRestrictions) GetNoExpungeNotebook() bool {
	if !p.IsSetNoExpungeNotebook() {
		return NotebookRestrictions_NoExpungeNotebook_DEFAULT
	}
	return *p.NoExpungeNotebook
}

var NotebookRestrictions_NoSetDefaultNotebook_DEFAULT bool

func (p *NotebookRestrictions) GetNoSetDefaultNotebook() bool {
	if !p.IsSetNoSetDefaultNotebook() {
		return NotebookRestrictions_NoSetDefaultNotebook_DEFAULT
	}
	return *p.NoSetDefaultNotebook
}

var NotebookRestrictions_NoSetNotebookStack_DEFAULT bool

func (p *NotebookRestrictions) GetNoSetNotebookStack() bool {
	if !p.IsSetNoSetNotebookStack() {
		return NotebookRestrictions_NoSetNotebookStack_DEFAULT
	}
	return *p.NoSetNotebookStack
}

var NotebookRestrictions_NoPublishToPublic_DEFAULT bool

func (p *NotebookRestrictions) GetNoPublishToPublic() bool {
	if !p.IsSetNoPublishToPublic() {
		return NotebookRestrictions_NoPublishToPublic_DEFAULT
	}
	return *p.NoPublishToPublic
}

var NotebookRestrictions_NoPublishToBusinessLibrary_DEFAULT bool

func (p *NotebookRestrictions) GetNoPublishToBusinessLibrary() bool {
	if !p.IsSetNoPublishToBusinessLibrary() {
		return NotebookRestrictions_NoPublishToBusinessLibrary_DEFAULT
	}
	return *p.NoPublishToBusinessLibrary
}

var NotebookRestrictions_NoCreateTags_DEFAULT bool

func (p *NotebookRestrictions) GetNoCreateTags() bool {
	if !p.IsSetNoCreateTags() {
		return NotebookRestrictions_NoCreateTags_DEFAULT
	}
	return *p.NoCreateTags
}

var NotebookRestrictions_NoUpdateTags_DEFAULT bool

func (p *NotebookRestrictions) GetNoUpdateTags() bool {
	if !p.IsSetNoUpdateTags() {
		return NotebookRestrictions_NoUpdateTags_DEFAULT
	}
	return *p.NoUpdateTags
}

var NotebookRestrictions_NoExpungeTags_DEFAULT bool

func (p *NotebookRestrictions) GetNoExpungeTags() bool {
	if !p.IsSetNoExpungeTags() {
		return NotebookRestrictions_NoExpungeTags_DEFAULT
	}
	return *p.NoExpungeTags
}

var NotebookRestrictions_NoSetParentTag_DEFAULT bool

func (p *NotebookRestrictions) GetNoSetParentTag() bool {
	if !p.IsSetNoSetParentTag() {
		return NotebookRestrictions_NoSetParentTag_DEFAULT
	}
	return *p.NoSetParentTag
}

var NotebookRestrictions_NoCreateSharedNotebooks_DEFAULT bool

func (p *NotebookRestrictions) GetNoCreateSharedNotebooks() bool {
	if !p.IsSetNoCreateSharedNotebooks() {
		return NotebookRestrictions_NoCreateSharedNotebooks_DEFAULT
	}
	return *p.NoCreateSharedNotebooks
}

var NotebookRestrictions_UpdateWhichSharedNotebookRestrictions_DEFAULT SharedNotebookInstanceRestrictions

func (p *NotebookRestrictions) GetUpdateWhichSharedNotebookRestrictions() SharedNotebookInstanceRestrictions {
	if !p.IsSetUpdateWhichSharedNotebookRestrictions() {
		return NotebookRestrictions_UpdateWhichSharedNotebookRestrictions_DEFAULT
	}
	return *p.UpdateWhichSharedNotebookRestrictions
}

var NotebookRestrictions_ExpungeWhichSharedNotebookRestrictions_DEFAULT SharedNotebookInstanceRestrictions

func (p *NotebookRestrictions) GetExpungeWhichSharedNotebookRestrictions() SharedNotebookInstanceRestrictions {
	if !p.IsSetExpungeWhichSharedNotebookRestrictions() {
		return NotebookRestrictions_ExpungeWhichSharedNotebookRestrictions_DEFAULT
	}
	return *p.ExpungeWhichSharedNotebookRestrictions
}
func (p *NotebookRestrictions) IsSetNoReadNotes() bool {
	return p.NoReadNotes != nil
}

func (p *NotebookRestrictions) IsSetNoCreateNotes() bool {
	return p.NoCreateNotes != nil
}

func (p *NotebookRestrictions) IsSetNoUpdateNotes() bool {
	return p.NoUpdateNotes != nil
}

func (p *NotebookRestrictions) IsSetNoExpungeNotes() bool {
	return p.NoExpungeNotes != nil
}

func (p *NotebookRestrictions) IsSetNoShareNotes() bool {
	return p.NoShareNotes != nil
}

func (p *NotebookRestrictions) IsSetNoEmailNotes() bool {
	return p.NoEmailNotes != nil
}

func (p *NotebookRestrictions) IsSetNoSendMessageToRecipients() bool {
	return p.NoSendMessageToRecipients != nil
}

func (p *NotebookRestrictions) IsSetNoUpdateNotebook() bool {
	return p.NoUpdateNotebook != nil
}

func (p *NotebookRestrictions) IsSetNoExpungeNotebook() bool {
	return p.NoExpungeNotebook != nil
}

func (p *NotebookRestrictions) IsSetNoSetDefaultNotebook() bool {
	return p.NoSetDefaultNotebook != nil
}

func (p *NotebookRestrictions) IsSetNoSetNotebookStack() bool {
	return p.NoSetNotebookStack != nil
}

func (p *NotebookRestrictions) IsSetNoPublishToPublic() bool {
	return p.NoPublishToPublic != nil
}

func (p *NotebookRestrictions) IsSetNoPublishToBusinessLibrary() bool {
	return p.NoPublishToBusinessLibrary != nil
}

func (p *NotebookRestrictions) IsSetNoCreateTags() bool {
	return p.NoCreateTags != nil
}

func (p *NotebookRestrictions) IsSetNoUpdateTags() bool {
	return p.NoUpdateTags != nil
}

func (p *NotebookRestrictions) IsSetNoExpungeTags() bool {
	return p.NoExpungeTags != nil
}

func (p *NotebookRestrictions) IsSetNoSetParentTag() bool {
	return p.NoSetParentTag != nil
}

func (p *NotebookRestrictions) IsSetNoCreateSharedNotebooks() bool {
	return p.NoCreateSharedNotebooks != nil
}

func (p *NotebookRestrictions) IsSetUpdateWhichSharedNotebookRestrictions() bool {
	return p.UpdateWhichSharedNotebookRestrictions != nil
}

func (p *NotebookRestrictions) IsSetExpungeWhichSharedNotebookRestrictions() bool {
	return p.ExpungeWhichSharedNotebookRestrictions != nil
}

func (p *NotebookRestrictions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NotebookRestrictions) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NoReadNotes = &v
	}
	return nil
}

func (p *NotebookRestrictions) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NoCreateNotes = &v
	}
	return nil
}

func (p *NotebookRestrictions) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NoUpdateNotes = &v
	}
	return nil
}

func (p *NotebookRestrictions) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.NoExpungeNotes = &v
	}
	return nil
}

func (p *NotebookRestrictions) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.NoShareNotes = &v
	}
	return nil
}

func (p *NotebookRestrictions) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.NoEmailNotes = &v
	}
	return nil
}

func (p *NotebookRestrictions) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.NoSendMessageToRecipients = &v
	}
	return nil
}

func (p *NotebookRestrictions) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.NoUpdateNotebook = &v
	}
	return nil
}

func (p *NotebookRestrictions) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.NoExpungeNotebook = &v
	}
	return nil
}

func (p *NotebookRestrictions) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.NoSetDefaultNotebook = &v
	}
	return nil
}

func (p *NotebookRestrictions) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.NoSetNotebookStack = &v
	}
	return nil
}

func (p *NotebookRestrictions) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.NoPublishToPublic = &v
	}
	return nil
}

func (p *NotebookRestrictions) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.NoPublishToBusinessLibrary = &v
	}
	return nil
}

func (p *NotebookRestrictions) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.NoCreateTags = &v
	}
	return nil
}

func (p *NotebookRestrictions) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.NoUpdateTags = &v
	}
	return nil
}

func (p *NotebookRestrictions) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.NoExpungeTags = &v
	}
	return nil
}

func (p *NotebookRestrictions) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.NoSetParentTag = &v
	}
	return nil
}

func (p *NotebookRestrictions) readField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.NoCreateSharedNotebooks = &v
	}
	return nil
}

func (p *NotebookRestrictions) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		temp := SharedNotebookInstanceRestrictions(v)
		p.UpdateWhichSharedNotebookRestrictions = &temp
	}
	return nil
}

func (p *NotebookRestrictions) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		temp := SharedNotebookInstanceRestrictions(v)
		p.ExpungeWhichSharedNotebookRestrictions = &temp
	}
	return nil
}

func (p *NotebookRestrictions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NotebookRestrictions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NotebookRestrictions) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoReadNotes() {
		if err := oprot.WriteFieldBegin("noReadNotes", thrift.BOOL, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:noReadNotes: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoReadNotes)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noReadNotes (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:noReadNotes: ", p), err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoCreateNotes() {
		if err := oprot.WriteFieldBegin("noCreateNotes", thrift.BOOL, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:noCreateNotes: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoCreateNotes)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noCreateNotes (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:noCreateNotes: ", p), err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoUpdateNotes() {
		if err := oprot.WriteFieldBegin("noUpdateNotes", thrift.BOOL, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:noUpdateNotes: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoUpdateNotes)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noUpdateNotes (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:noUpdateNotes: ", p), err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoExpungeNotes() {
		if err := oprot.WriteFieldBegin("noExpungeNotes", thrift.BOOL, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:noExpungeNotes: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoExpungeNotes)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noExpungeNotes (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:noExpungeNotes: ", p), err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoShareNotes() {
		if err := oprot.WriteFieldBegin("noShareNotes", thrift.BOOL, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:noShareNotes: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoShareNotes)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noShareNotes (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:noShareNotes: ", p), err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoEmailNotes() {
		if err := oprot.WriteFieldBegin("noEmailNotes", thrift.BOOL, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:noEmailNotes: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoEmailNotes)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noEmailNotes (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:noEmailNotes: ", p), err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoSendMessageToRecipients() {
		if err := oprot.WriteFieldBegin("noSendMessageToRecipients", thrift.BOOL, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:noSendMessageToRecipients: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoSendMessageToRecipients)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noSendMessageToRecipients (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:noSendMessageToRecipients: ", p), err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoUpdateNotebook() {
		if err := oprot.WriteFieldBegin("noUpdateNotebook", thrift.BOOL, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:noUpdateNotebook: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoUpdateNotebook)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noUpdateNotebook (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:noUpdateNotebook: ", p), err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoExpungeNotebook() {
		if err := oprot.WriteFieldBegin("noExpungeNotebook", thrift.BOOL, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:noExpungeNotebook: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoExpungeNotebook)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noExpungeNotebook (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:noExpungeNotebook: ", p), err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoSetDefaultNotebook() {
		if err := oprot.WriteFieldBegin("noSetDefaultNotebook", thrift.BOOL, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:noSetDefaultNotebook: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoSetDefaultNotebook)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noSetDefaultNotebook (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:noSetDefaultNotebook: ", p), err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoSetNotebookStack() {
		if err := oprot.WriteFieldBegin("noSetNotebookStack", thrift.BOOL, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:noSetNotebookStack: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoSetNotebookStack)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noSetNotebookStack (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:noSetNotebookStack: ", p), err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoPublishToPublic() {
		if err := oprot.WriteFieldBegin("noPublishToPublic", thrift.BOOL, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:noPublishToPublic: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoPublishToPublic)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noPublishToPublic (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:noPublishToPublic: ", p), err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoPublishToBusinessLibrary() {
		if err := oprot.WriteFieldBegin("noPublishToBusinessLibrary", thrift.BOOL, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:noPublishToBusinessLibrary: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoPublishToBusinessLibrary)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noPublishToBusinessLibrary (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:noPublishToBusinessLibrary: ", p), err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoCreateTags() {
		if err := oprot.WriteFieldBegin("noCreateTags", thrift.BOOL, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:noCreateTags: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoCreateTags)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noCreateTags (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:noCreateTags: ", p), err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoUpdateTags() {
		if err := oprot.WriteFieldBegin("noUpdateTags", thrift.BOOL, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:noUpdateTags: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoUpdateTags)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noUpdateTags (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:noUpdateTags: ", p), err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoExpungeTags() {
		if err := oprot.WriteFieldBegin("noExpungeTags", thrift.BOOL, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:noExpungeTags: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoExpungeTags)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noExpungeTags (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:noExpungeTags: ", p), err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoSetParentTag() {
		if err := oprot.WriteFieldBegin("noSetParentTag", thrift.BOOL, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:noSetParentTag: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoSetParentTag)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noSetParentTag (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:noSetParentTag: ", p), err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoCreateSharedNotebooks() {
		if err := oprot.WriteFieldBegin("noCreateSharedNotebooks", thrift.BOOL, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:noCreateSharedNotebooks: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.NoCreateSharedNotebooks)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noCreateSharedNotebooks (18) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:noCreateSharedNotebooks: ", p), err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateWhichSharedNotebookRestrictions() {
		if err := oprot.WriteFieldBegin("updateWhichSharedNotebookRestrictions", thrift.I32, 19); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:updateWhichSharedNotebookRestrictions: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.UpdateWhichSharedNotebookRestrictions)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updateWhichSharedNotebookRestrictions (19) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 19:updateWhichSharedNotebookRestrictions: ", p), err)
		}
	}
	return err
}

func (p *NotebookRestrictions) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetExpungeWhichSharedNotebookRestrictions() {
		if err := oprot.WriteFieldBegin("expungeWhichSharedNotebookRestrictions", thrift.I32, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:expungeWhichSharedNotebookRestrictions: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ExpungeWhichSharedNotebookRestrictions)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.expungeWhichSharedNotebookRestrictions (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:expungeWhichSharedNotebookRestrictions: ", p), err)
		}
	}
	return err
}

func (p *NotebookRestrictions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotebookRestrictions(%+v)", *p)
}

// A unique container for a set of notes.
// <dl>
// <dt>guid</dt>
//   <dd>The unique identifier of this notebook.
//   <br/>
//   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
//   <br/>
//   Regex:  EDAM_GUID_REGEX
//   </dd>
//
// <dt>name</dt>
//   <dd>A sequence of characters representing the name of the
//   notebook.  May be changed by clients, but the account may not contain two
//   notebooks with names that are equal via a case-insensitive comparison.
//   Can't begin or end with a space.
//   <br/>
//   Length:  EDAM_NOTEBOOK_NAME_LEN_MIN - EDAM_NOTEBOOK_NAME_LEN_MAX
//   <br/>
//   Regex:  EDAM_NOTEBOOK_NAME_REGEX
//   </dd>
//
// <dt>updateSequenceNum</dt>
//   <dd>A number identifying the last transaction to
//   modify the state of this object.  The USN values are sequential within an
//   account, and can be used to compare the order of modifications within the
//   service.
//   </dd>
//
// <dt>defaultNotebook</dt>
//   <dd>If true, this notebook should be used for new notes
//   whenever the user has not (or cannot) specify a desired target notebook.
//   For example, if a note is submitted via SMTP email.
//   The service will maintain at most one defaultNotebook per account.
//   If a second notebook is created or updated with defaultNotebook set to
//   true, the service will automatically update the prior notebook's
//   defaultNotebook field to false.  If the default notebook is deleted
//   (i.e. "active" set to false), the "defaultNotebook" field will be
//   set to false by the service.  If the account has no default notebook
//   set, the service will use the most recent notebook as the default.
//   </dd>
//
// <dt>serviceCreated</dt>
//   <dd>The time when this notebook was created on the
//   service. This will be set on the service during creation, and the service
//   will provide this value when it returns a Notebook to a client.
//   The service will ignore this value if it is sent by clients.
//   </dd>
//
// <dt>serviceUpdated</dt>
//   <dd>The time when this notebook was last modified on the
//   service.  This will be set on the service during creation, and the service
//   will provide this value when it returns a Notebook to a client.
//   The service will ignore this value if it is sent by clients.
//   </dd>
//
// <dt>publishing</dt>
//   <dd>If the Notebook has been opened for public access, or
//   business users shared with their business (i.e. if 'published' is
//   set to true), then this will point to the set of publishing
//   information for the Notebook (URI, description, etc.).  A
//   Notebook cannot be published without providing this information,
//   but it will persist for later use if publishing is ever disabled
//   on the Notebook.  Clients that do not wish to change the
//   publishing behavior of a Notebook should not set this value when
//   calling NoteStore.updateNotebook().
//   </dd>
//
// <dt>published</dt>
//   <dd>If this is set to true, then the Notebook will be
//   accessible either to the public, or for business users to their business,
//   via the 'publishing' specification, which must also be set.  If this is set
//   to false, the Notebook will not be available to the public (or business).
//   Clients that do not wish to change the publishing behavior of a Notebook
//   should not set this value when calling NoteStore.updateNotebook().
//   </dd>
//
// <dt>stack</dt>
//   <dd>If this is set, then the notebook is visually contained within a stack
//   of notebooks with this name.  All notebooks in the same account with the
//   same 'stack' field are considered to be in the same stack.
//   Notebooks with no stack set are "top level" and not contained within a
//   stack.
//   </dd>
//
// <dt>sharedNotebookIds</dt>
//   <dd><i>DEPRECATED</i> - replaced by sharedNotebooks.</dd>
//
// <dt>sharedNotebooks</dt>
//   <dd>The list of recipients to whom this notebook has been shared
//   (one SharedNotebook object per recipient email address). This field will
//   be unset if you do not have permission to access this data. If you are
//   accessing the notebook as the owner or via a shared notebook that is
//   modifiable, then you have access to this data and the value will be set.
//   This field is read-only. Clients may not make changes to shared notebooks
//   via this field.
//   </dd>
//
// <dt>businessNotebook</dt>
//   <dd>If the notebook is part of a business account and has been published to the
//   business library, this will contain information for the library listing.
//   The presence or absence of this field is not a reliable test of whether a given
//   notebook is in fact a business notebook - the field is only used when a notebook is or
//   has been published to the business library.
//   </dd>
//
// <dt>contact</dt>
//   <dd>Intended for use with Business accounts, this field identifies the user who
//   has been designated as the "contact".  For notebooks created in business
//   accounts, the server will automatically set this value to the user who created
//   the notebook unless Notebook.contact.username has been set, in which that value
//   will be used.  When updating a notebook, it is common to leave Notebook.contact
//   field unset, indicating that no change to the value is being requested and that
//   the existing value, if any, should be preserved.
//   </dd>
//
// </dl>
//
// Attributes:
//  - GUID
//  - Name
//  - UpdateSequenceNum
//  - DefaultNotebook
//  - ServiceCreated
//  - ServiceUpdated
//  - Publishing
//  - Published
//  - Stack
//  - SharedNotebookIds
//  - SharedNotebooks
//  - BusinessNotebook
//  - Contact
//  - Restrictions
type Notebook struct {
	GUID *GUID   `thrift:"guid,1" json:"guid,omitempty"`
	Name *string `thrift:"name,2" json:"name,omitempty"`
	// unused fields # 3 to 4
	UpdateSequenceNum *int32     `thrift:"updateSequenceNum,5" json:"updateSequenceNum,omitempty"`
	DefaultNotebook   *bool      `thrift:"defaultNotebook,6" json:"defaultNotebook,omitempty"`
	ServiceCreated    *Timestamp `thrift:"serviceCreated,7" json:"serviceCreated,omitempty"`
	ServiceUpdated    *Timestamp `thrift:"serviceUpdated,8" json:"serviceUpdated,omitempty"`
	// unused field # 9
	Publishing        *Publishing           `thrift:"publishing,10" json:"publishing,omitempty"`
	Published         *bool                 `thrift:"published,11" json:"published,omitempty"`
	Stack             *string               `thrift:"stack,12" json:"stack,omitempty"`
	SharedNotebookIds []int64               `thrift:"sharedNotebookIds,13" json:"sharedNotebookIds,omitempty"`
	SharedNotebooks   []*SharedNotebook     `thrift:"sharedNotebooks,14" json:"sharedNotebooks,omitempty"`
	BusinessNotebook  *BusinessNotebook     `thrift:"businessNotebook,15" json:"businessNotebook,omitempty"`
	Contact           *User                 `thrift:"contact,16" json:"contact,omitempty"`
	Restrictions      *NotebookRestrictions `thrift:"restrictions,17" json:"restrictions,omitempty"`
}

func NewNotebook() *Notebook {
	return &Notebook{}
}

var Notebook_GUID_DEFAULT GUID

func (p *Notebook) GetGUID() GUID {
	if !p.IsSetGUID() {
		return Notebook_GUID_DEFAULT
	}
	return *p.GUID
}

var Notebook_Name_DEFAULT string

func (p *Notebook) GetName() string {
	if !p.IsSetName() {
		return Notebook_Name_DEFAULT
	}
	return *p.Name
}

var Notebook_UpdateSequenceNum_DEFAULT int32

func (p *Notebook) GetUpdateSequenceNum() int32 {
	if !p.IsSetUpdateSequenceNum() {
		return Notebook_UpdateSequenceNum_DEFAULT
	}
	return *p.UpdateSequenceNum
}

var Notebook_DefaultNotebook_DEFAULT bool

func (p *Notebook) GetDefaultNotebook() bool {
	if !p.IsSetDefaultNotebook() {
		return Notebook_DefaultNotebook_DEFAULT
	}
	return *p.DefaultNotebook
}

var Notebook_ServiceCreated_DEFAULT Timestamp

func (p *Notebook) GetServiceCreated() Timestamp {
	if !p.IsSetServiceCreated() {
		return Notebook_ServiceCreated_DEFAULT
	}
	return *p.ServiceCreated
}

var Notebook_ServiceUpdated_DEFAULT Timestamp

func (p *Notebook) GetServiceUpdated() Timestamp {
	if !p.IsSetServiceUpdated() {
		return Notebook_ServiceUpdated_DEFAULT
	}
	return *p.ServiceUpdated
}

var Notebook_Publishing_DEFAULT *Publishing

func (p *Notebook) GetPublishing() *Publishing {
	if !p.IsSetPublishing() {
		return Notebook_Publishing_DEFAULT
	}
	return p.Publishing
}

var Notebook_Published_DEFAULT bool

func (p *Notebook) GetPublished() bool {
	if !p.IsSetPublished() {
		return Notebook_Published_DEFAULT
	}
	return *p.Published
}

var Notebook_Stack_DEFAULT string

func (p *Notebook) GetStack() string {
	if !p.IsSetStack() {
		return Notebook_Stack_DEFAULT
	}
	return *p.Stack
}

var Notebook_SharedNotebookIds_DEFAULT []int64

func (p *Notebook) GetSharedNotebookIds() []int64 {
	return p.SharedNotebookIds
}

var Notebook_SharedNotebooks_DEFAULT []*SharedNotebook

func (p *Notebook) GetSharedNotebooks() []*SharedNotebook {
	return p.SharedNotebooks
}

var Notebook_BusinessNotebook_DEFAULT *BusinessNotebook

func (p *Notebook) GetBusinessNotebook() *BusinessNotebook {
	if !p.IsSetBusinessNotebook() {
		return Notebook_BusinessNotebook_DEFAULT
	}
	return p.BusinessNotebook
}

var Notebook_Contact_DEFAULT *User

func (p *Notebook) GetContact() *User {
	if !p.IsSetContact() {
		return Notebook_Contact_DEFAULT
	}
	return p.Contact
}

var Notebook_Restrictions_DEFAULT *NotebookRestrictions

func (p *Notebook) GetRestrictions() *NotebookRestrictions {
	if !p.IsSetRestrictions() {
		return Notebook_Restrictions_DEFAULT
	}
	return p.Restrictions
}
func (p *Notebook) IsSetGUID() bool {
	return p.GUID != nil
}

func (p *Notebook) IsSetName() bool {
	return p.Name != nil
}

func (p *Notebook) IsSetUpdateSequenceNum() bool {
	return p.UpdateSequenceNum != nil
}

func (p *Notebook) IsSetDefaultNotebook() bool {
	return p.DefaultNotebook != nil
}

func (p *Notebook) IsSetServiceCreated() bool {
	return p.ServiceCreated != nil
}

func (p *Notebook) IsSetServiceUpdated() bool {
	return p.ServiceUpdated != nil
}

func (p *Notebook) IsSetPublishing() bool {
	return p.Publishing != nil
}

func (p *Notebook) IsSetPublished() bool {
	return p.Published != nil
}

func (p *Notebook) IsSetStack() bool {
	return p.Stack != nil
}

func (p *Notebook) IsSetSharedNotebookIds() bool {
	return p.SharedNotebookIds != nil
}

func (p *Notebook) IsSetSharedNotebooks() bool {
	return p.SharedNotebooks != nil
}

func (p *Notebook) IsSetBusinessNotebook() bool {
	return p.BusinessNotebook != nil
}

func (p *Notebook) IsSetContact() bool {
	return p.Contact != nil
}

func (p *Notebook) IsSetRestrictions() bool {
	return p.Restrictions != nil
}

func (p *Notebook) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Notebook) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := GUID(v)
		p.GUID = &temp
	}
	return nil
}

func (p *Notebook) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *Notebook) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.UpdateSequenceNum = &v
	}
	return nil
}

func (p *Notebook) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.DefaultNotebook = &v
	}
	return nil
}

func (p *Notebook) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := Timestamp(v)
		p.ServiceCreated = &temp
	}
	return nil
}

func (p *Notebook) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		temp := Timestamp(v)
		p.ServiceUpdated = &temp
	}
	return nil
}

func (p *Notebook) readField10(iprot thrift.TProtocol) error {
	p.Publishing = &Publishing{}
	if err := p.Publishing.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Publishing), err)
	}
	return nil
}

func (p *Notebook) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Published = &v
	}
	return nil
}

func (p *Notebook) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Stack = &v
	}
	return nil
}

func (p *Notebook) readField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.SharedNotebookIds = tSlice
	for i := 0; i < size; i++ {
		var _elem10 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem10 = v
		}
		p.SharedNotebookIds = append(p.SharedNotebookIds, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Notebook) readField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*SharedNotebook, 0, size)
	p.SharedNotebooks = tSlice
	for i := 0; i < size; i++ {
		_elem11 := &SharedNotebook{}
		if err := _elem11.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
		}
		p.SharedNotebooks = append(p.SharedNotebooks, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Notebook) readField15(iprot thrift.TProtocol) error {
	p.BusinessNotebook = &BusinessNotebook{}
	if err := p.BusinessNotebook.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BusinessNotebook), err)
	}
	return nil
}

func (p *Notebook) readField16(iprot thrift.TProtocol) error {
	p.Contact = &User{}
	if err := p.Contact.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Contact), err)
	}
	return nil
}

func (p *Notebook) readField17(iprot thrift.TProtocol) error {
	p.Restrictions = &NotebookRestrictions{}
	if err := p.Restrictions.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Restrictions), err)
	}
	return nil
}

func (p *Notebook) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Notebook"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Notebook) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGUID() {
		if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:guid: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.guid (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:guid: ", p), err)
		}
	}
	return err
}

func (p *Notebook) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
		}
	}
	return err
}

func (p *Notebook) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateSequenceNum() {
		if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:updateSequenceNum: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.UpdateSequenceNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updateSequenceNum (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:updateSequenceNum: ", p), err)
		}
	}
	return err
}

func (p *Notebook) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultNotebook() {
		if err := oprot.WriteFieldBegin("defaultNotebook", thrift.BOOL, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:defaultNotebook: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.DefaultNotebook)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.defaultNotebook (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:defaultNotebook: ", p), err)
		}
	}
	return err
}

func (p *Notebook) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceCreated() {
		if err := oprot.WriteFieldBegin("serviceCreated", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:serviceCreated: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ServiceCreated)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.serviceCreated (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:serviceCreated: ", p), err)
		}
	}
	return err
}

func (p *Notebook) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceUpdated() {
		if err := oprot.WriteFieldBegin("serviceUpdated", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:serviceUpdated: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ServiceUpdated)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.serviceUpdated (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:serviceUpdated: ", p), err)
		}
	}
	return err
}

func (p *Notebook) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetPublishing() {
		if err := oprot.WriteFieldBegin("publishing", thrift.STRUCT, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:publishing: ", p), err)
		}
		if err := p.Publishing.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Publishing), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:publishing: ", p), err)
		}
	}
	return err
}

func (p *Notebook) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetPublished() {
		if err := oprot.WriteFieldBegin("published", thrift.BOOL, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:published: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Published)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.published (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:published: ", p), err)
		}
	}
	return err
}

func (p *Notebook) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetStack() {
		if err := oprot.WriteFieldBegin("stack", thrift.STRING, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:stack: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Stack)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.stack (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:stack: ", p), err)
		}
	}
	return err
}

func (p *Notebook) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetSharedNotebookIds() {
		if err := oprot.WriteFieldBegin("sharedNotebookIds", thrift.LIST, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:sharedNotebookIds: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.SharedNotebookIds)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.SharedNotebookIds {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:sharedNotebookIds: ", p), err)
		}
	}
	return err
}

func (p *Notebook) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetSharedNotebooks() {
		if err := oprot.WriteFieldBegin("sharedNotebooks", thrift.LIST, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:sharedNotebooks: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SharedNotebooks)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.SharedNotebooks {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:sharedNotebooks: ", p), err)
		}
	}
	return err
}

func (p *Notebook) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetBusinessNotebook() {
		if err := oprot.WriteFieldBegin("businessNotebook", thrift.STRUCT, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:businessNotebook: ", p), err)
		}
		if err := p.BusinessNotebook.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BusinessNotebook), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:businessNotebook: ", p), err)
		}
	}
	return err
}

func (p *Notebook) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetContact() {
		if err := oprot.WriteFieldBegin("contact", thrift.STRUCT, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:contact: ", p), err)
		}
		if err := p.Contact.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Contact), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:contact: ", p), err)
		}
	}
	return err
}

func (p *Notebook) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetRestrictions() {
		if err := oprot.WriteFieldBegin("restrictions", thrift.STRUCT, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:restrictions: ", p), err)
		}
		if err := p.Restrictions.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Restrictions), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:restrictions: ", p), err)
		}
	}
	return err
}

func (p *Notebook) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Notebook(%+v)", *p)
}

// A link in an users account that refers them to a public or individual share in
// another user's account.
//
// <dl>
// <dt>shareName</dt>
// <dd>the display name of the shared notebook.
//   The link owner can change this.</dd>
//
// <dt>username</dt>
// <dd>the username of the user who owns the shared or public notebook</dd>
//
// <dt>shardId</dt>
// <dd>the shard ID of the notebook if the notebook is not public</dt>
//
// <dt>shareKey</dt>
// <dd>the secret key that provides access to the shared notebook</dd>
//
// <dt>uri</dt>
// <dd>the identifier of the public notebook</dd>
//
// <dt>guid</dt>
//   <dd>The unique identifier of this linked notebook.  Will be set whenever
//   a linked notebook is retrieved from the service, but may be null when a client
//   is creating a linked notebook.
//   <br/>
//   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
//   <br/>
//   Regex:  EDAM_GUID_REGEX
//   </dd>
//
// <dt>updateSequenceNum</dt>
//   <dd>A number identifying the last transaction to
//   modify the state of this object.  The USN values are sequential within an
//   account, and can be used to compare the order of modifications within the
//   service.
//   </dd>
//
// <dt>noteStoreUrl</dt>
//   <dd>
//   This field will contain the full URL that clients should use to make
//   NoteStore requests to the server shard that contains that notebook's data.
//   I.e. this is the URL that should be used to create the Thrift HTTP client
//   transport to send messages to the NoteStore service for the account.
//   </dd>
//
// <dt>webApiUrlPrefix:</dt>
//   <dd>
//   This field will contain the initial part of the URLs that should be used
//   to make requests to Evernote's thin client "web API", which provide
//   optimized operations for clients that aren't capable of manipulating
//   the full contents of accounts via the full Thrift data model. Clients
//   should concatenate the relative path for the various servlets onto the
//   end of this string to construct the full URL, as documented on our
//   developer web site.
//   </dd>
//
// <dt>stack</dt>
//   <dd>If this is set, then the notebook is visually contained within a stack
//   of notebooks with this name.  All notebooks in the same account with the
//   same 'stack' field are considered to be in the same stack.
//   Notebooks with no stack set are "top level" and not contained within a
//   stack.  The link owner can change this and this field is for the benefit
//   of the link owner.
//   </dd>
//
// <dt>businessId</dt>
//   <dd>If set, this will be the unique identifier for the business that owns
//   the notebook to which the linked notebook refers.
//
// </dl>
//
// Attributes:
//  - ShareName
//  - Username
//  - ShardId
//  - ShareKey
//  - URI
//  - GUID
//  - UpdateSequenceNum
//  - NoteStoreUrl
//  - WebApiUrlPrefix
//  - Stack
//  - BusinessId
type LinkedNotebook struct {
	// unused field # 1
	ShareName         *string `thrift:"shareName,2" json:"shareName,omitempty"`
	Username          *string `thrift:"username,3" json:"username,omitempty"`
	ShardId           *string `thrift:"shardId,4" json:"shardId,omitempty"`
	ShareKey          *string `thrift:"shareKey,5" json:"shareKey,omitempty"`
	URI               *string `thrift:"uri,6" json:"uri,omitempty"`
	GUID              *GUID   `thrift:"guid,7" json:"guid,omitempty"`
	UpdateSequenceNum *int32  `thrift:"updateSequenceNum,8" json:"updateSequenceNum,omitempty"`
	NoteStoreUrl      *string `thrift:"noteStoreUrl,9" json:"noteStoreUrl,omitempty"`
	WebApiUrlPrefix   *string `thrift:"webApiUrlPrefix,10" json:"webApiUrlPrefix,omitempty"`
	Stack             *string `thrift:"stack,11" json:"stack,omitempty"`
	BusinessId        *int32  `thrift:"businessId,12" json:"businessId,omitempty"`
}

func NewLinkedNotebook() *LinkedNotebook {
	return &LinkedNotebook{}
}

var LinkedNotebook_ShareName_DEFAULT string

func (p *LinkedNotebook) GetShareName() string {
	if !p.IsSetShareName() {
		return LinkedNotebook_ShareName_DEFAULT
	}
	return *p.ShareName
}

var LinkedNotebook_Username_DEFAULT string

func (p *LinkedNotebook) GetUsername() string {
	if !p.IsSetUsername() {
		return LinkedNotebook_Username_DEFAULT
	}
	return *p.Username
}

var LinkedNotebook_ShardId_DEFAULT string

func (p *LinkedNotebook) GetShardId() string {
	if !p.IsSetShardId() {
		return LinkedNotebook_ShardId_DEFAULT
	}
	return *p.ShardId
}

var LinkedNotebook_ShareKey_DEFAULT string

func (p *LinkedNotebook) GetShareKey() string {
	if !p.IsSetShareKey() {
		return LinkedNotebook_ShareKey_DEFAULT
	}
	return *p.ShareKey
}

var LinkedNotebook_URI_DEFAULT string

func (p *LinkedNotebook) GetURI() string {
	if !p.IsSetURI() {
		return LinkedNotebook_URI_DEFAULT
	}
	return *p.URI
}

var LinkedNotebook_GUID_DEFAULT GUID

func (p *LinkedNotebook) GetGUID() GUID {
	if !p.IsSetGUID() {
		return LinkedNotebook_GUID_DEFAULT
	}
	return *p.GUID
}

var LinkedNotebook_UpdateSequenceNum_DEFAULT int32

func (p *LinkedNotebook) GetUpdateSequenceNum() int32 {
	if !p.IsSetUpdateSequenceNum() {
		return LinkedNotebook_UpdateSequenceNum_DEFAULT
	}
	return *p.UpdateSequenceNum
}

var LinkedNotebook_NoteStoreUrl_DEFAULT string

func (p *LinkedNotebook) GetNoteStoreUrl() string {
	if !p.IsSetNoteStoreUrl() {
		return LinkedNotebook_NoteStoreUrl_DEFAULT
	}
	return *p.NoteStoreUrl
}

var LinkedNotebook_WebApiUrlPrefix_DEFAULT string

func (p *LinkedNotebook) GetWebApiUrlPrefix() string {
	if !p.IsSetWebApiUrlPrefix() {
		return LinkedNotebook_WebApiUrlPrefix_DEFAULT
	}
	return *p.WebApiUrlPrefix
}

var LinkedNotebook_Stack_DEFAULT string

func (p *LinkedNotebook) GetStack() string {
	if !p.IsSetStack() {
		return LinkedNotebook_Stack_DEFAULT
	}
	return *p.Stack
}

var LinkedNotebook_BusinessId_DEFAULT int32

func (p *LinkedNotebook) GetBusinessId() int32 {
	if !p.IsSetBusinessId() {
		return LinkedNotebook_BusinessId_DEFAULT
	}
	return *p.BusinessId
}
func (p *LinkedNotebook) IsSetShareName() bool {
	return p.ShareName != nil
}

func (p *LinkedNotebook) IsSetUsername() bool {
	return p.Username != nil
}

func (p *LinkedNotebook) IsSetShardId() bool {
	return p.ShardId != nil
}

func (p *LinkedNotebook) IsSetShareKey() bool {
	return p.ShareKey != nil
}

func (p *LinkedNotebook) IsSetURI() bool {
	return p.URI != nil
}

func (p *LinkedNotebook) IsSetGUID() bool {
	return p.GUID != nil
}

func (p *LinkedNotebook) IsSetUpdateSequenceNum() bool {
	return p.UpdateSequenceNum != nil
}

func (p *LinkedNotebook) IsSetNoteStoreUrl() bool {
	return p.NoteStoreUrl != nil
}

func (p *LinkedNotebook) IsSetWebApiUrlPrefix() bool {
	return p.WebApiUrlPrefix != nil
}

func (p *LinkedNotebook) IsSetStack() bool {
	return p.Stack != nil
}

func (p *LinkedNotebook) IsSetBusinessId() bool {
	return p.BusinessId != nil
}

func (p *LinkedNotebook) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LinkedNotebook) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ShareName = &v
	}
	return nil
}

func (p *LinkedNotebook) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Username = &v
	}
	return nil
}

func (p *LinkedNotebook) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ShardId = &v
	}
	return nil
}

func (p *LinkedNotebook) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ShareKey = &v
	}
	return nil
}

func (p *LinkedNotebook) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.URI = &v
	}
	return nil
}

func (p *LinkedNotebook) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := GUID(v)
		p.GUID = &temp
	}
	return nil
}

func (p *LinkedNotebook) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.UpdateSequenceNum = &v
	}
	return nil
}

func (p *LinkedNotebook) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.NoteStoreUrl = &v
	}
	return nil
}

func (p *LinkedNotebook) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.WebApiUrlPrefix = &v
	}
	return nil
}

func (p *LinkedNotebook) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Stack = &v
	}
	return nil
}

func (p *LinkedNotebook) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.BusinessId = &v
	}
	return nil
}

func (p *LinkedNotebook) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LinkedNotebook"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LinkedNotebook) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetShareName() {
		if err := oprot.WriteFieldBegin("shareName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:shareName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ShareName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.shareName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:shareName: ", p), err)
		}
	}
	return err
}

func (p *LinkedNotebook) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsername() {
		if err := oprot.WriteFieldBegin("username", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:username: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Username)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.username (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:username: ", p), err)
		}
	}
	return err
}

func (p *LinkedNotebook) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetShardId() {
		if err := oprot.WriteFieldBegin("shardId", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:shardId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ShardId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.shardId (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:shardId: ", p), err)
		}
	}
	return err
}

func (p *LinkedNotebook) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetShareKey() {
		if err := oprot.WriteFieldBegin("shareKey", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:shareKey: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ShareKey)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.shareKey (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:shareKey: ", p), err)
		}
	}
	return err
}

func (p *LinkedNotebook) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetURI() {
		if err := oprot.WriteFieldBegin("uri", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:uri: ", p), err)
		}
		if err := oprot.WriteString(string(*p.URI)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.uri (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:uri: ", p), err)
		}
	}
	return err
}

func (p *LinkedNotebook) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetGUID() {
		if err := oprot.WriteFieldBegin("guid", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:guid: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.guid (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:guid: ", p), err)
		}
	}
	return err
}

func (p *LinkedNotebook) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateSequenceNum() {
		if err := oprot.WriteFieldBegin("updateSequenceNum", thrift.I32, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:updateSequenceNum: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.UpdateSequenceNum)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updateSequenceNum (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:updateSequenceNum: ", p), err)
		}
	}
	return err
}

func (p *LinkedNotebook) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetNoteStoreUrl() {
		if err := oprot.WriteFieldBegin("noteStoreUrl", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:noteStoreUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.NoteStoreUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.noteStoreUrl (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:noteStoreUrl: ", p), err)
		}
	}
	return err
}

func (p *LinkedNotebook) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetWebApiUrlPrefix() {
		if err := oprot.WriteFieldBegin("webApiUrlPrefix", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:webApiUrlPrefix: ", p), err)
		}
		if err := oprot.WriteString(string(*p.WebApiUrlPrefix)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.webApiUrlPrefix (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:webApiUrlPrefix: ", p), err)
		}
	}
	return err
}

func (p *LinkedNotebook) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetStack() {
		if err := oprot.WriteFieldBegin("stack", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:stack: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Stack)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.stack (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:stack: ", p), err)
		}
	}
	return err
}

func (p *LinkedNotebook) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetBusinessId() {
		if err := oprot.WriteFieldBegin("businessId", thrift.I32, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:businessId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.BusinessId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.businessId (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:businessId: ", p), err)
		}
	}
	return err
}

func (p *LinkedNotebook) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LinkedNotebook(%+v)", *p)
}

// A structure that describes a notebook or a user's relationship with
// a notebook. NotebookDescriptor is expected to remain a lighter-weight
// structure when compared to Notebook.
// <dl>
// <dt>guid</dt>
//   <dd>The unique identifier of the notebook.
//   </dd>
//
// <dt>notebookDisplayName</dt>
//   <dd>A sequence of characters representing the name of the
//   notebook.
//   </dd>
//
// <dt>contactName</dt>
//   <dd>The User.name value of the notebook's "contact".
//   </dd>
//
// <dt>hasSharedNotebook</dt>
//   <dd>Whether a SharedNotebook record exists between the calling user and this
//   notebook.
//   </dd>
//
// <dt>joinedUserCount</dt>
//   <dd>The number of users who have joined this notebook.
//   </dd>
//
// </dl>
//
// Attributes:
//  - GUID
//  - NotebookDisplayName
//  - ContactName
//  - HasSharedNotebook
//  - JoinedUserCount
type NotebookDescriptor struct {
	GUID                *GUID   `thrift:"guid,1" json:"guid,omitempty"`
	NotebookDisplayName *string `thrift:"notebookDisplayName,2" json:"notebookDisplayName,omitempty"`
	ContactName         *string `thrift:"contactName,3" json:"contactName,omitempty"`
	HasSharedNotebook   *bool   `thrift:"hasSharedNotebook,4" json:"hasSharedNotebook,omitempty"`
	JoinedUserCount     *int32  `thrift:"joinedUserCount,5" json:"joinedUserCount,omitempty"`
}

func NewNotebookDescriptor() *NotebookDescriptor {
	return &NotebookDescriptor{}
}

var NotebookDescriptor_GUID_DEFAULT GUID

func (p *NotebookDescriptor) GetGUID() GUID {
	if !p.IsSetGUID() {
		return NotebookDescriptor_GUID_DEFAULT
	}
	return *p.GUID
}

var NotebookDescriptor_NotebookDisplayName_DEFAULT string

func (p *NotebookDescriptor) GetNotebookDisplayName() string {
	if !p.IsSetNotebookDisplayName() {
		return NotebookDescriptor_NotebookDisplayName_DEFAULT
	}
	return *p.NotebookDisplayName
}

var NotebookDescriptor_ContactName_DEFAULT string

func (p *NotebookDescriptor) GetContactName() string {
	if !p.IsSetContactName() {
		return NotebookDescriptor_ContactName_DEFAULT
	}
	return *p.ContactName
}

var NotebookDescriptor_HasSharedNotebook_DEFAULT bool

func (p *NotebookDescriptor) GetHasSharedNotebook() bool {
	if !p.IsSetHasSharedNotebook() {
		return NotebookDescriptor_HasSharedNotebook_DEFAULT
	}
	return *p.HasSharedNotebook
}

var NotebookDescriptor_JoinedUserCount_DEFAULT int32

func (p *NotebookDescriptor) GetJoinedUserCount() int32 {
	if !p.IsSetJoinedUserCount() {
		return NotebookDescriptor_JoinedUserCount_DEFAULT
	}
	return *p.JoinedUserCount
}
func (p *NotebookDescriptor) IsSetGUID() bool {
	return p.GUID != nil
}

func (p *NotebookDescriptor) IsSetNotebookDisplayName() bool {
	return p.NotebookDisplayName != nil
}

func (p *NotebookDescriptor) IsSetContactName() bool {
	return p.ContactName != nil
}

func (p *NotebookDescriptor) IsSetHasSharedNotebook() bool {
	return p.HasSharedNotebook != nil
}

func (p *NotebookDescriptor) IsSetJoinedUserCount() bool {
	return p.JoinedUserCount != nil
}

func (p *NotebookDescriptor) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NotebookDescriptor) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := GUID(v)
		p.GUID = &temp
	}
	return nil
}

func (p *NotebookDescriptor) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NotebookDisplayName = &v
	}
	return nil
}

func (p *NotebookDescriptor) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ContactName = &v
	}
	return nil
}

func (p *NotebookDescriptor) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.HasSharedNotebook = &v
	}
	return nil
}

func (p *NotebookDescriptor) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.JoinedUserCount = &v
	}
	return nil
}

func (p *NotebookDescriptor) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NotebookDescriptor"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NotebookDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGUID() {
		if err := oprot.WriteFieldBegin("guid", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:guid: ", p), err)
		}
		if err := oprot.WriteString(string(*p.GUID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.guid (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:guid: ", p), err)
		}
	}
	return err
}

func (p *NotebookDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNotebookDisplayName() {
		if err := oprot.WriteFieldBegin("notebookDisplayName", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:notebookDisplayName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.NotebookDisplayName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.notebookDisplayName (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:notebookDisplayName: ", p), err)
		}
	}
	return err
}

func (p *NotebookDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetContactName() {
		if err := oprot.WriteFieldBegin("contactName", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ContactName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.contactName (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactName: ", p), err)
		}
	}
	return err
}

func (p *NotebookDescriptor) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetHasSharedNotebook() {
		if err := oprot.WriteFieldBegin("hasSharedNotebook", thrift.BOOL, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hasSharedNotebook: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.HasSharedNotebook)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hasSharedNotebook (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hasSharedNotebook: ", p), err)
		}
	}
	return err
}

func (p *NotebookDescriptor) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetJoinedUserCount() {
		if err := oprot.WriteFieldBegin("joinedUserCount", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:joinedUserCount: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.JoinedUserCount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.joinedUserCount (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:joinedUserCount: ", p), err)
		}
	}
	return err
}

func (p *NotebookDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotebookDescriptor(%+v)", *p)
}
